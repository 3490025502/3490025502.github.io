<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清欢的小黑店</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-25T03:13:41.368Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>清欢</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Excel表格导入脚本输出SQL</title>
    <link href="http://example.com/2022/01/25/Excel%E8%A1%A8%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%84%9A%E6%9C%AC%E8%BE%93%E5%87%BASQL/"/>
    <id>http://example.com/2022/01/25/Excel%E8%A1%A8%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%84%9A%E6%9C%AC%E8%BE%93%E5%87%BASQL/</id>
    <published>2022-01-25T03:12:01.000Z</published>
    <updated>2022-01-25T03:13:41.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读取Excel表格的数据生成SQL语句-批量插入"><a href="#读取Excel表格的数据生成SQL语句-批量插入" class="headerlink" title="读取Excel表格的数据生成SQL语句(批量插入)"></a>读取Excel表格的数据生成SQL语句(批量插入)</h2><p><strong>首先添加依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelData_MySQL</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mysql</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XSSFSheet sheet = <span class="keyword">null</span>;   <span class="comment">//声明XSSFSheet对象</span></span><br><span class="line">        String newCell = <span class="string">&quot;&quot;</span>;      <span class="comment">//用作生成符合sql规范的字符串</span></span><br><span class="line">        XSSFRow row = <span class="keyword">null</span>;       <span class="comment">//excel表中的行</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">0</span>;             <span class="comment">//excel表中的行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = <span class="number">0</span>;          <span class="comment">//excel表中的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));查看当前文件夹路径，方便下方输入文件位置</span></span><br><span class="line">        <span class="comment">//建立输入流获取excle文件对象</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/1.xlsx&quot;</span>);</span><br><span class="line">        <span class="comment">//获取excel文件的工作簿对象</span></span><br><span class="line">        XSSFWorkbook sheets = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">//获取工作簿中的工作表对象</span></span><br><span class="line">        sheet = sheets.getSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下生成sql语句</span></span><br><span class="line">        <span class="comment">//直接写出sql头语句，可根据实际情况修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;insert into 表名 (字段名, 字段名, 字段名, 字段名) values &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取行数</span></span><br><span class="line">        rows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">        <span class="comment">//因为excel中第一行通常为各个列的名字，故舍去，从第二行开始，索引为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            newCell = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到Excel工作表的行</span></span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//得到列数</span></span><br><span class="line">            columns = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//UUID.randomUUID().toString()：生成随机ID</span></span><br><span class="line">            <span class="comment">//需要生成随机ID</span></span><br><span class="line">            newCell =  newCell + UUID.randomUUID().toString() +<span class="string">&quot;\&quot;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//不需要生成随机ID</span></span><br><span class="line">            <span class="comment">//newCell =  newCell+&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环遍历一行中的每一列数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="comment">//获取一列的数据</span></span><br><span class="line">                String cell = row.getCell(j).toString();</span><br><span class="line">                <span class="comment">//为了符合sql规范，第一列数据前不需要加”,“,故作判断,如果添加随机ID就是第二列不需要加”,“</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCell = <span class="string">&quot;\&quot;&quot;</span> + newCell + cell +<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newCell =  newCell + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + cell +<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//一行数据读取结束，为了符合sql规范，最后一行结尾应该用”;“表示，故作判断</span></span><br><span class="line">            <span class="keyword">if</span> (i == rows - <span class="number">1</span>) &#123;</span><br><span class="line">                newCell = <span class="string">&quot;(&quot;</span> + newCell + <span class="string">&quot;);&quot;</span>;</span><br><span class="line">                <span class="comment">//除去数字中的”.0“</span></span><br><span class="line">                String rpStr = newCell.replace(<span class="string">&quot;.0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(rpStr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newCell = <span class="string">&quot;(&quot;</span> + newCell + <span class="string">&quot;),&quot;</span>;</span><br><span class="line">                <span class="comment">//除去数字中的”.0“</span></span><br><span class="line">                String rpStr = newCell.replace(<span class="string">&quot;.0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(rpStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//流操作后关闭流，养成好习惯</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        sheets.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>Oracle不支持insert into … values…批量插入，所以使用多条的insert方法，多次插入，以达到批量插入的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelData_Oracle</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Oracle</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明XSSFSheet对象</span></span><br><span class="line">        XSSFSheet sheet = <span class="keyword">null</span>;</span><br><span class="line">        String newCell = <span class="string">&quot;&quot;</span>;<span class="comment">//用作生成符合sql规范的字符串</span></span><br><span class="line">        XSSFRow row = <span class="keyword">null</span>;<span class="comment">//excel表中的行</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">0</span>;<span class="comment">//excel表中的行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = <span class="number">0</span>;<span class="comment">//excel表中的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));查看当前文件夹路径，方便下方输入文件位置</span></span><br><span class="line">        <span class="comment">//建立输入流获取excle文件对象</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/1.xlsx&quot;</span>);</span><br><span class="line">        <span class="comment">//获取excel文件的工作簿对象</span></span><br><span class="line">        XSSFWorkbook sheets = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">//获取工作簿中的工作表对象</span></span><br><span class="line">        sheet = sheets.getSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取行数</span></span><br><span class="line">        rows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">        <span class="comment">//因为excel中第一行通常为各个列的名字，故舍去，从第二行开始，索引为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            newCell = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//得到Excel工作表的行</span></span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//得到列数</span></span><br><span class="line">            columns = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环遍历一行中的每一列数据</span></span><br><span class="line">            newCell =  newCell + UUID.randomUUID().toString() +<span class="string">&quot;\&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;\&#x27;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="comment">//获取一列的数据</span></span><br><span class="line">                String cell = row.getCell(j).toString();</span><br><span class="line">                <span class="comment">//为了符合sql规范，第一列数据前不需要加”,“,故作判断</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCell = <span class="string">&quot;\&#x27;&quot;</span> + newCell + cell +<span class="string">&quot;\&#x27;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newCell =  newCell + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&#x27;&quot;</span> + cell +<span class="string">&quot;\&#x27;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                newCell = <span class="string">&quot;INSERT INTO 字段名 (字段名,字段名,字段名,字段名) VALUES&quot;</span> + <span class="string">&quot;(&quot;</span> + newCell + <span class="string">&quot;);&quot;</span>;</span><br><span class="line">                <span class="comment">//除去数字中的”.0“</span></span><br><span class="line">                String rpStr = newCell.replace(<span class="string">&quot;.0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(rpStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//流操作后关闭流，养成好习惯</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        sheets.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;读取Excel表格的数据生成SQL语句-批量插入&quot;&gt;&lt;a href=&quot;#读取Excel表格的数据生成SQL语句-批量插入&quot; class=&quot;headerlink&quot; title=&quot;读取Excel表格的数据生成SQL语句(批量插入)&quot;&gt;&lt;/a&gt;读取Excel表格的数据生</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>通过POI导入Excel表格数据修改数据库</title>
    <link href="http://example.com/2022/01/25/%E9%80%9A%E8%BF%87POI%E5%AF%BC%E5%85%A5Excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2022/01/25/%E9%80%9A%E8%BF%87POI%E5%AF%BC%E5%85%A5Excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-01-25T02:28:01.000Z</published>
    <updated>2022-01-25T03:04:34.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过POI导入Excel表格数据修改数据库"><a href="#通过POI导入Excel表格数据修改数据库" class="headerlink" title="通过POI导入Excel表格数据修改数据库"></a>通过POI导入Excel表格数据修改数据库</h1><p><strong>背景：</strong></p><p>利用前端传过来的Excel文件，查询数据库中与Excel表中第一列和第二列相等的数据并对其的第三列数据进行修改。</p><p><strong>完整代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">updateGoodsRepositoryPrice</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XSSFSheet sheet = <span class="keyword">null</span>;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (multipartFile.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Excel文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(multipartFile.getInputStream());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        String title = sheet.getRow(<span class="number">0</span>).getCell(<span class="number">0</span>).getStringCellValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (title.indexOf(<span class="string">&quot;器材编码&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;第一列必须为器材编码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String title1 = sheet.getRow(<span class="number">0</span>).getCell(<span class="number">1</span>).getStringCellValue();</span><br><span class="line">        <span class="keyword">if</span> (title1.indexOf(<span class="string">&quot;名称规格型号&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;第二列必须为名称规格型号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String title3 = sheet.getRow(<span class="number">0</span>).getCell(<span class="number">2</span>).getStringCellValue();</span><br><span class="line">        <span class="keyword">if</span> (title3.indexOf(<span class="string">&quot;单价&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;第三列必须为单价&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sheet.removeRow(sheet.getRow(<span class="number">0</span>));</span><br><span class="line">        Double a = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Row row : sheet)&#123;</span><br><span class="line">            <span class="keyword">if</span> (row.getCell(<span class="number">0</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Query query3 = Query.from(GoodsRepositoryModel.META_ID);</span><br><span class="line">            <span class="comment">//消除科学计数法格式</span></span><br><span class="line">            DecimalFormat df=<span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            a = Double.valueOf(row.getCell(<span class="number">0</span>).toString());</span><br><span class="line">            String Goods_No = df.format(a);</span><br><span class="line"></span><br><span class="line">            query3.and(Condition.eq(GoodsRepositoryModel.GOODS_NO, Goods_No),</span><br><span class="line">                Condition.eq(GoodsRepositoryModel.GOODS_NAME, row.getCell(<span class="number">1</span>).getStringCellValue()));</span><br><span class="line">            GoodsRepositoryModel goodsRepositoryModel3 = <span class="keyword">this</span>.queryOne(query3);</span><br><span class="line">            String price = row.getCell(<span class="number">2</span>).toString();</span><br><span class="line">            logger.debug(query3.toString());</span><br><span class="line">            <span class="comment">//单价为小于等于0</span></span><br><span class="line">            <span class="keyword">if</span>(Double.parseDouble(price) &lt;= <span class="number">0.0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;单价不能小于0.0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算结算金额</span></span><br><span class="line">            BigDecimal amount = <span class="keyword">new</span> BigDecimal(goodsRepositoryModel3.getCount()).multiply(<span class="keyword">new</span> BigDecimal(price));</span><br><span class="line"></span><br><span class="line">            goodsRepositoryModel3.setUpdate_time(DateUtil.getDate());</span><br><span class="line">            goodsRepositoryModel3.setAmount(amount.toString());</span><br><span class="line">            goodsRepositoryModel3.setPrice(price);</span><br><span class="line">            <span class="keyword">this</span>.update(goodsRepositoryModel3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;模块导入成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;器材编码或名称规格型号错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException runtimeException)&#123;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>,runtimeException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;物资导入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        workbook.close();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="MultipartFile类"><a href="#MultipartFile类" class="headerlink" title="MultipartFile类"></a>MultipartFile类</h3><p>使用MultipartFile类，项目必须使用Spring框架，否则无法引入这个类，中文翻译为“多组件文档”，主要使用这个类来实现以表单的形式进行文件上传功能。</p><p><strong>源码注解</strong></p><p><img src="/2022/01/25/%E9%80%9A%E8%BF%87POI%E5%AF%BC%E5%85%A5Excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220125102323405.png" alt="image-20220125102323405"></p><ul><li>一种可以接收使用多种请求方式来进行上传文件的代表形式。也就是说，如果你想用spring框架来实现项目中的文件上传功能，则MultipartFile可能是最合适的选择，而这里提到的多种请求方式则可以通俗理解为以表单的形式提交。</li><li>这个文件内容可以存储到内存中或者存储在磁盘的临时位置上。</li><li>  无论发生哪种情况，用户都可以自由地拷贝文件内容到session存储中，或者以一种永久存储的形式进行存储，如果有需要的话。</li><li>  这种临时性的存储在请求结束之后将会被清除掉</li></ul><p><strong>常用方法</strong></p><p>MultipartFile是一个接口，继承InputStreamSource，所以MultipartFile文件可以转换为输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipartFile.getInputStream();</span><br></pre></td></tr></table></figure><p><strong>使用技巧</strong></p><ul><li>在使用MultipartFile进行参数传递的时候，可以将MultipartFile声明为一个数组，这样就可以支持多文件传输了。</li><li>使用MultipartFile的getSize()方法来获取到传输文件的大小，这样就可以限定传输过来的文件的大小了。</li></ul><h3 id="toString-和getStringCellValue"><a href="#toString-和getStringCellValue" class="headerlink" title="toString()和getStringCellValue()"></a>toString()和getStringCellValue()</h3><p><strong>toString()：</strong></p><p>返回该对象的字符串表示。通常，toString方法返回一个“文本表示”该对象的字符串。结果应该是一个简洁但内容丰富的表述，对于一个人来说很容易阅读。建议所有子类重写此方法。</p><p>类Object的toString方法返回一个字符串，其中包含对象为实例的类的名称，符号字符“@”和对象的哈希代码的无符号十六进制表示形式。换句话说，此方法返回一个字符串等于的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + &#x27;@&#x27; + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure><p><strong>返回：</strong></p><p>对象的字符串表示</p><p><strong>getStringCellValue():</strong></p><p>获取单元格的值作为字符串</p><p>对于数值细胞，这将抛出异常。对于空白单元格，这将返回一个空字符串。对于不是字符串公式的formulaCell，这会引发异常。</p><p><strong>返回：</strong></p><p> 细胞作为字符串</p><p><strong>例如值：</strong></p><p>如果单元格包含日期字段，并使用<code>toString()</code>你可能会得到正确的日期格式的值，但从来没有得到任何的异常，而在第二种情况，你会得到<code>IllegalArgumentException</code></p><p><strong>IllegalStateException异常</strong></p><p>cell.getStringCellValue() 去获取单元格数据的，POI会判断单元格的类型，如果非字符串类型就会抛出上面的异常。</p><p><strong>解决方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cell.setCellType(Cell.CELL_TYPE_STRING); <span class="comment">// 将该列单元格类型设置为String</span></span><br></pre></td></tr></table></figure><h3 id="POI导入长数据会变成1-E10科学计数法"><a href="#POI导入长数据会变成1-E10科学计数法" class="headerlink" title="POI导入长数据会变成1.E10科学计数法"></a>POI导入长数据会变成1.E10科学计数法</h3><p>Excel中的单元格格式无论怎样最后传到Java代码中都会强制转换为1.E10科学计数法的形式，即使POI提供的强制设置Excel单元格为文本类型的代码，也对这个问题起不到关键性的作用。我们需要对传过来的数值进行格式重置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">Double a = Double.valueOf(Cell.toString());</span><br><span class="line">String b = df.format(a);</span><br></pre></td></tr></table></figure><h3 id="POI"><a href="#POI" class="headerlink" title="POI"></a>POI</h3><p>HSSF提供读写Microsoft Excel XLS格式档案的功能。</p><p>XSSF提供读写Microsoft Excel OOXML XLSX格式档案的功能。</p><p>HWPF提供读写Microsoft Word DOC格式档案的功能。</p><p>HSLF提供读写Microsoft PowerPoint格式档案的功能。</p><p>HDGF提供读Microsoft Visio格式档案的功能。</p><p>HPBF提供读Microsoft Publisher格式档案的功能。</p><p>HSMF提供读Microsoft Outlook格式档案的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过POI导入Excel表格数据修改数据库&quot;&gt;&lt;a href=&quot;#通过POI导入Excel表格数据修改数据库&quot; class=&quot;headerlink&quot; title=&quot;通过POI导入Excel表格数据修改数据库&quot;&gt;&lt;/a&gt;通过POI导入Excel表格数据修改数据库&lt;/</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2学习笔记</title>
    <link href="http://example.com/2021/11/26/SpringBoot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/11/26/SpringBoot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-26T03:03:09.000Z</published>
    <updated>2022-01-25T03:08:59.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="56-Web原生组件的注入（Servlet、Filter、Listener）"><a href="#56-Web原生组件的注入（Servlet、Filter、Listener）" class="headerlink" title="56 Web原生组件的注入（Servlet、Filter、Listener）"></a>56 Web原生组件的注入（Servlet、Filter、Listener）</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-add-a-servlet-filter-or-listener">官方文档 - Servlets, Filters, and listeners</a></p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=56">视频地址</a></p><h3 id="使用Servlet-API"><a href="#使用Servlet-API" class="headerlink" title="使用Servlet API"></a>使用Servlet API</h3><h4 id="MyServlet类"><a href="#MyServlet类" class="headerlink" title="MyServlet类"></a>MyServlet类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问映射</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;66666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@WebServlet直接响应，没有经过Spring的拦截器</strong></p><p>主配置类中同时编写注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//自动将Servlet扫描进去</span><br><span class="line">@ServletComponentScan(basePackages = &quot;被扫描的包&quot;)</span><br></pre></td></tr></table></figure><p><strong>@ServletComponentScan指定原生Servlet组件都放在哪里</strong></p><p><strong>basePackages默认扫描主配置类同一个包及其子包中的servlet（也可以在需要被扫描的包中使用@ComponentScan注解）</strong></p><h4 id="MyFilter类"><a href="#MyFilter类" class="headerlink" title="MyFilter类"></a>MyFilter类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//urlPatterns过滤路径</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns=&#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException, IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter工作&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyServletContextListener类"><a href="#MyServletContextListener类" class="headerlink" title="MyServletContextListener类"></a>MyServletContextListener类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MySwervletContextListener监听到项目初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MySwervletContextListener监听到项目销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用RegistrationBean"><a href="#使用RegistrationBean" class="headerlink" title="使用RegistrationBean"></a>使用RegistrationBean</h3><h4 id="MyRegistConfig配置类"><a href="#MyRegistConfig配置类" class="headerlink" title="MyRegistConfig配置类"></a>MyRegistConfig配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（proxyBeanMethods = true）: 保证依赖的组件始终是单实例的</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/my02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line"><span class="comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = <span class="keyword">new</span> MySwervletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="59-定制化原理-springboot的定制化组件的几种方式"><a href="#59-定制化原理-springboot的定制化组件的几种方式" class="headerlink" title="59 定制化原理-springboot的定制化组件的几种方式"></a>59 定制化原理-springboot的定制化组件的几种方式</h2><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=59">视频地址</a></p><h3 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h3><ul><li>修改配置文件</li><li><code>xxxxxCustomizer</code></li><li>编写自定义的配置类 <code>xxxConfiguration</code> + <code>@Bean</code>替换、增加容器中默认组件，视图解析器</li><li>==Web应用 编写一个配置类实现 <code>WebMvcConfigurer</code> 即可定制化web功能 + <code>@Bean</code>给容器中再扩展一些组件==</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li><p>@EnableWebMvc+WebMvcConfigurer—@Bean</p><p>可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能（高级功能，初学者退避三舍）。</p><ul><li><p>原理：</p><ol><li><p><code>WebMvcAutoConfiguration</code>默认的SpringMVC的自动配置功能类，如静态资源、欢迎页等。</p></li><li><p>一旦使用 <code>@EnableWebMvc</code> ，会<code>@Import(DelegatingWebMvcConfiguration.class)</code>。</p></li><li><p>DelegatingWebMvcConfiguration</p><p>的作用，只保证SpringMVC最基本的使用</p><ul><li>把所有系统中的<code>WebMvcConfigurer</code>拿过来，所有功能的定制都是这些<code>WebMvcConfigurer</code>合起来一起生效。</li><li>自动配置了一些非常底层的组件，如<code>RequestMappingHandlerMapping</code>，这些组件依赖的组件都是从容器中获取如。</li><li><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport</code>。</li></ul></li><li><p><code>WebMvcAutoConfiguration</code>里面的配置要能生效必须 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>。</p></li><li><p>@EnableWebMvc 导致了WebMvcAutoConfiguration 没有生效。</p></li></ol></li></ul></li></ul><h3 id="原理分析套路"><a href="#原理分析套路" class="headerlink" title="原理分析套路"></a>原理分析套路</h3><p>==场景starter== - <code>xxxxAutoConfiguration</code> - 导入xxx组件 - 绑定<code>xxxProperties</code> - ==绑定配置文件项。==</p><h2 id="60-数据访问-数据库场景的自动配置分析及整合测试"><a href="#60-数据访问-数据库场景的自动配置分析及整合测试" class="headerlink" title="60 数据访问-数据库场景的自动配置分析及整合测试"></a>60 数据访问-数据库场景的自动配置分析及整合测试</h2><h3 id="1-导入JDBC场景"><a href="#1-导入JDBC场景" class="headerlink" title="1.导入JDBC场景"></a>1.导入JDBC场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/11/26/SpringBoot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211126131006672.png" alt="image-20211126131006672"></p><p><strong>数据库驱动</strong>（官方不知道我们需要操作哪个数据库，所以需要自行导入）</p><p>默认版本为最新版本</p><p>查看方式：pom.xml-&gt;spring-boot-starter-parent-&gt;spring-boot-dependencies-&gt;&lt;mysql.version&gt;</p><p>这里选择自己电脑最合适的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-分析自动配置"><a href="#2-分析自动配置" class="headerlink" title="2.分析自动配置"></a>2.分析自动配置</h3><h4 id="自动配置的类"><a href="#自动配置的类" class="headerlink" title="自动配置的类"></a>自动配置的类</h4><ul><li><code>DataSourceAutoConfiguration</code> ： 数据源的自动配置。<ul><li>修改数据源相关的配置：<code>spring.datasource</code>。</li><li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong>。</li><li>底层配置好的连接池是：<code>HikariDataSource</code>。</li></ul></li><li><code>DataSourceTransactionManagerAutoConfiguration</code>： 事务管理器的自动配置。</li><li><code>JdbcTemplateAutoConfiguration</code>： <code>JdbcTemplate</code>的自动配置，可以来对数据库进行CRUD。<ul><li>可以修改前缀为<code>spring.jdbc</code>的配置项来修改<code>JdbcTemplate</code>。</li><li><code>@Bean @Primary JdbcTemplate</code>：Spring容器中有这个<code>JdbcTemplate</code>组件，使用<code>@Autowired</code>。</li></ul></li><li><code>JndiDataSourceAutoConfiguration</code>： JNDI的自动配置。</li><li><code>XADataSourceAutoConfiguration</code>： 分布式事务相关的。</li></ul><p><strong>修改配置项：application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="3-单元测试数据源"><a href="#3-单元测试数据源" class="headerlink" title="3.单元测试数据源"></a>3.单元测试数据源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//用@org.junit.Test会报空指针异常，可能跟JUnit新版本有关</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span></span><br><span class="line">        Long aLong = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);</span><br><span class="line">        log.info(<span class="string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="61-数据访问-自定义方式整合druid数据源"><a href="#61-数据访问-自定义方式整合druid数据源" class="headerlink" title="61.数据访问-自定义方式整合druid数据源"></a>61.数据访问-自定义方式整合druid数据源</h2><p><a href="https://github.com/alibaba/druid">Druid官网</a></p><h3 id="Druid是什么？"><a href="#Druid是什么？" class="headerlink" title="Druid是什么？"></a>Druid是什么？</h3><p>它是数据库连接池，它能够提供强大的监控和扩展功能，有些企业会用到。</p><h3 id="Spring-Boot整合第三方技术的两种方式："><a href="#Spring-Boot整合第三方技术的两种方式：" class="headerlink" title="Spring Boot整合第三方技术的两种方式："></a>Spring Boot整合第三方技术的两种方式：</h3><h4 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置Druid数据源"><a href="#配置Druid数据源" class="headerlink" title="配置Druid数据源"></a>配置Druid数据源</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><span class="comment">//将配置文件中指定路径下 的属性对应的绑定过来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        druidDataSource.setUrl();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setUsername();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setPassword();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">更多配置项</a></p><p><strong>配置Druid的监控页功能</strong>：</p><ul><li>Druid内置提供了一个<code>StatViewServlet</code>用于展示Druid的统计信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE">官方文档 - 配置_StatViewServlet配置</a>。这个<code>StatViewServlet</code>的用途包括：<ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul></li><li>Druid内置提供一个<code>StatFilter</code>，用于统计监控信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter">官方文档 - 配置_StatFilter</a></li><li><code>WebStatFilter</code>用于采集web-jdbc关联监控的数据，如SQL监控、URI监控。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter">官方文档 - 配置_配置WebStatFilter</a></li><li>Druid提供了<code>WallFilter</code>，它是基于SQL语义分析来实现防御SQL注入攻击的。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter">官方文档 - 配置 wallfilter</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入监控和防火墙功能功能</span></span><br><span class="line">        druidDataSource.setFilters(<span class="string">&quot;stat,wall&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 druid的监控页功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = </span><br><span class="line">            <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监控页账号密码：</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line"></span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;56-Web原生组件的注入（Servlet、Filter、Listener）&quot;&gt;&lt;a href=&quot;#56-Web原生组件的注入（Servlet、Filter、Listener）&quot; class=&quot;headerlink&quot; title=&quot;56 Web原生组件的注入（Se</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>关于用Typora编写Hexo完美插入本地图片的方法</title>
    <link href="http://example.com/2021/11/25/%E5%85%B3%E4%BA%8E%E7%94%A8Typora%E7%BC%96%E5%86%99Hexo%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2021/11/25/%E5%85%B3%E4%BA%8E%E7%94%A8Typora%E7%BC%96%E5%86%99Hexo%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2021-11-25T12:50:27.000Z</published>
    <updated>2021-11-25T14:35:30.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-面临的问题"><a href="#1-面临的问题" class="headerlink" title="1.面临的问题"></a>1.面临的问题</h1><p>当我们在用Typora编写Hexo博客时插入我们所需要的本地图片或者截图时，Typora所引用的是本地的绝对路径，发布在Hexo上时就不会显示出引用的图片了，我看了很多网上的教程都很麻烦而且弄出来也没用，所以才自己写了这篇博客。</p><h1 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h1><h2 id="第一步：安装转换插件"><a href="#第一步：安装转换插件" class="headerlink" title="第一步：安装转换插件"></a>第一步：安装转换插件</h2><ol><li><p>进入博客的目录，安装hexo-asset-image插件</p><p><strong>推荐使用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/%E5%85%B3%E4%BA%8E%E7%94%A8Typora%E7%BC%96%E5%86%99Hexo%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/image-20211125210655898.png" alt="image-20211125210655898"></p><p>这样子就安装成功了</p><p><strong>插件的作用</strong>：给引用的本地图片添加绝对路径。</p></li><li><p>注意尽量不要使用（npm install hexo-asset-image –save），据说这个下载的有bug，具体我也没有尝试过。</p></li></ol><h2 id="第二步：修改配置"><a href="#第二步：修改配置" class="headerlink" title="第二步：修改配置"></a>第二步：修改配置</h2><p>1.打开根目录地下的_config.yml配置文件</p><p>修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>作用</strong>：在使用hexo new命令创建一个.md文件的时候，在该目录下会生成一个同名的文件夹用来存放这篇文章的所有资源，比如图片，附件等。</p><p><img src="/2021/11/25/%E5%85%B3%E4%BA%8E%E7%94%A8Typora%E7%BC%96%E5%86%99Hexo%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/image-20211125212419167.png" alt="image-20211125212419167"></p><p>添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">imgroot:</span> <span class="string">/</span>  <span class="comment">#如果监听到有第三方图片存储添加，如果是本地就用`/`</span></span><br></pre></td></tr></table></figure><h2 id="第三步：Typora设置"><a href="#第三步：Typora设置" class="headerlink" title="第三步：Typora设置"></a>第三步：Typora设置</h2><p>这一步非常重要！！！</p><p><img src="/2021/11/25/%E5%85%B3%E4%BA%8E%E7%94%A8Typora%E7%BC%96%E5%86%99Hexo%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/image-20211125212649887.png" alt="image-20211125212649887"></p><p>在设置中找到这个设置并且输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure><p>这个设置的作用就是在你拖入本地图片或远程图片自动直接保存到<code>*.md</code>同名文件夹目录中</p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h1><p>设置完成后，在你编写Typora时，只需要和以前一样直接把图片拖到文章中，会自动给你保存到文章对应的文件夹，实现本地图片在发布后也可以同样浏览，不需要多余的操作，完美！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-面临的问题&quot;&gt;&lt;a href=&quot;#1-面临的问题&quot; class=&quot;headerlink&quot; title=&quot;1.面临的问题&quot;&gt;&lt;/a&gt;1.面临的问题&lt;/h1&gt;&lt;p&gt;当我们在用Typora编写Hexo博客时插入我们所需要的本地图片或者截图时，Typora所引用的是本</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Typora" scheme="http://example.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>R语言学习笔记[断更]</title>
    <link href="http://example.com/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-24T14:00:00.000Z</published>
    <updated>2021-11-25T12:45:48.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R语言"><a href="#R语言" class="headerlink" title="R语言"></a>R语言</h1><p>⭐️ </p><h2 id="22-数据框"><a href="#22-数据框" class="headerlink" title="22    数据框"></a>22    数据框</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>表格式的数据结构，旨在模拟数据集（与SAS和SPSS中的数据集的概念一致）</p><h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><p>由数据构成的矩形数组（行：观测，列：变量）</p><h3 id="数据框与矩阵的区别："><a href="#数据框与矩阵的区别：" class="headerlink" title="数据框与矩阵的区别："></a>数据框与矩阵的区别：</h3><p>1.数据框形状像矩阵</p><p>2.数据框是比较规则的列表</p><p>3.矩阵必须为同一数据类型</p><p>4.数据框每一列必须为同一类型，每一行可以不同</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><h4 id="数据框的创建："><a href="#数据框的创建：" class="headerlink" title="数据框的创建："></a>数据框的创建：</h4><p>data.frame()</p><h4 id="数据框的访问："><a href="#数据框的访问：" class="headerlink" title="数据框的访问："></a>数据框的访问：</h4><h5 id="1-按索引访问"><a href="#1-按索引访问" class="headerlink" title="1.按索引访问"></a>1.按索引访问</h5><p>state[1]：输出数据框的第一列</p><p>state[c(1,4)]：输出第一和第四列</p><p>state[-c(1,4)]：输出除了第一和第四列的数据框</p><h5 id="2-根据名字访问"><a href="#2-根据名字访问" class="headerlink" title="2.根据名字访问"></a>2.根据名字访问</h5><p>⭐️ state$state.abb：输出“state.abb”这一列或这一行</p><p>state[,”state.abb”]：输出“state.abb”这一列</p><p>state[“state.abb”,]：输出“state.abb”这一行</p><h5 id="3-拓展函数"><a href="#3-拓展函数" class="headerlink" title="3.拓展函数"></a>3.拓展函数</h5><p>attach(数据框)：加载数据框在R搜索目录中（可以直接用列名输出数据）</p><p>detach：取消加载</p><p>with(数据框,{列名})：输出该列</p><h5 id="4-单双中括号的区别"><a href="#4-单双中括号的区别" class="headerlink" title="4.单双中括号的区别"></a>4.单双中括号的区别</h5><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204544630.png" alt="image-20211125204544630"></p><h2 id="23-因子"><a href="#23-因子" class="headerlink" title="23    因子"></a>23    因子</h2><h3 id="变量分类："><a href="#变量分类：" class="headerlink" title="变量分类："></a>变量分类：</h3><p>1.名义型变量（名称）</p><p>2.有序性变量（等级变量：good、better、best）</p><p>3.连续型变量（数值）</p><h3 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h3><p>名义型变量和有序型变量称为因子</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>用来分类，计算频数和频率</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><p>table()：频数统计</p><p>factor()：定义因子</p><p>factor(c(),order = T,levels = c())：定义因子及顺序等级</p><p>num &lt;- c(1:100)<br>cut (num,c(seq(0,100,10)))：</p><p>cut(数据集，分割间隔)，将num&lt;-1：100按照固定间隔分割，也就是cut函数将连续型变量变成具有多个水平的因子</p><p>seq（英文是sequence）（开头数字，末尾数字，间隔大小）：构建等差数列</p><h2 id="24-缺失数据"><a href="#24-缺失数据" class="headerlink" title="24    缺失数据"></a>24    缺失数据</h2><h3 id="概念：-2"><a href="#概念：-2" class="headerlink" title="概念："></a>概念：</h3><p>NA（not avalilable）代表缺失值，NA是不可用，不可用的的简称，用来存储缺失信息</p><p>这里缺失值NA表示没有，但注 意没有并不一定就是0，NA是不知道是多少，也能是0，也可能是任何值，缺失值和值为零是完全不同的.</p><h3 id="规避NA的计算："><a href="#规避NA的计算：" class="headerlink" title="规避NA的计算："></a>规避NA的计算：</h3><p>sum(a,<strong>na.rm = TRUE</strong>)<br>mean(a,<strong>na.rm = TRUE</strong>)</p><p>删除NA的元素后进行运算</p><p>is.na（数据集）：判断元素是否为NA，然后返回T和F的数据集</p><p>na.omit():去除向量中的NA，并保留属性</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204527791.png" alt="image-20211125204527791"></p><p>na.omit(数据集)：删除包含NA的每一行</p><h3 id="处理缺失值的包："><a href="#处理缺失值的包：" class="headerlink" title="处理缺失值的包："></a>处理缺失值的包：</h3><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204517381.png" alt="image-20211125204517381"></p><h3 id="其他缺失数据："><a href="#其他缺失数据：" class="headerlink" title="其他缺失数据："></a>其他缺失数据：</h3><ol><li>缺失数据NaN ,代表不可能的值;</li><li>Inf表示无穷 ,分为正无穷Inf和负无穷Inf，代表无穷大或者无穷小。</li></ol><h3 id="不同缺失值之间的差别"><a href="#不同缺失值之间的差别" class="headerlink" title="不同缺失值之间的差别"></a>不同缺失值之间的差别</h3><ol><li>NA是存在的值，但是不知道是多少;</li><li>NaN是不存在的;</li><li>Inf存在,是无无穷大后者无穷小，但是表示不可能的值。</li></ol><h2 id="28-获取数据"><a href="#28-获取数据" class="headerlink" title="28 获取数据"></a>28 获取数据</h2><h3 id="R获取数据的三种途径："><a href="#R获取数据的三种途径：" class="headerlink" title="R获取数据的三种途径："></a>R获取数据的三种途径：</h3><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204503778.png" alt="image-20211125204503778"></p><h3 id="键盘输入："><a href="#键盘输入：" class="headerlink" title="键盘输入："></a>键盘输入：</h3><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204451787.png" alt="image-20211125204451787"></p><p>edit(数据框)：弹出一个可编辑的表格框（需要赋值给原变量，否则无法保存）</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204439916.png" alt="image-20211125204439916"></p><p>fix(数据框)：同上（不需要赋值给原变量，自动保存）</p><h3 id="通过ODBC访问数据库："><a href="#通过ODBC访问数据库：" class="headerlink" title="通过ODBC访问数据库："></a>通过ODBC访问数据库：</h3><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204421029.png" alt="image-20211125204421029"></p><h2 id="29-读入数据"><a href="#29-读入数据" class="headerlink" title="29 读入数据"></a>29 读入数据</h2><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204404553.png" alt="image-20211125204404553"></p><p>read.table(“文件名”): 读取文件</p><p>head(文件): 读取文件前6行的数据（linux读取文件的前十行）</p><p>tail(文件): 读取文件最后6行的数据（linux读取文件的最后十行）</p><p>sep参数：</p><p>csv文件未使用sep参数，默认用空格分隔，但是csv文件默认用逗号分隔，导致打印出来很乱</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204350192.png" alt="image-20211125204350192"></p><p>使用sep参数</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204316321.png" alt="image-20211125204316321"></p><p>header参数:是否将第一行视为名称（默认是F）</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204305220.png" alt="image-20211125204305220"></p><p>skip参数：从第几行开始读数据</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204243762.png" alt="image-20211125204243762"></p><p>nrows参数：读到第几行</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204227408.png" alt="image-20211125204227408"></p><p>读取网络链接文件：</p><p><img src="/2021/11/24/R%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20211125204212579.png" alt="image-20211125204212579"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;R语言&quot;&gt;&lt;a href=&quot;#R语言&quot; class=&quot;headerlink&quot; title=&quot;R语言&quot;&gt;&lt;/a&gt;R语言&lt;/h1&gt;&lt;p&gt;⭐️ &lt;/p&gt;
&lt;h2 id=&quot;22-数据框&quot;&gt;&lt;a href=&quot;#22-数据框&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="R语言" scheme="http://example.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记[转载]</title>
    <link href="http://example.com/2021/11/24/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0[%E8%BD%AC%E8%BD%BD]/"/>
    <id>http://example.com/2021/11/24/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0[%E8%BD%AC%E8%BD%BD]/</id>
    <published>2021-11-24T13:41:04.796Z</published>
    <updated>2021-11-25T14:08:48.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="00-Git常用命令"><a href="#00-Git常用命令" class="headerlink" title="00-Git常用命令"></a>00-Git常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><strong>安装与配置</strong></td><td></td></tr><tr><td>sudo apt-get install git</td><td>Ubuntu上安装Git命令</td></tr><tr><td>git config –global user.name 用户名</td><td>设置用户签名 （安装Git后务必设置）</td></tr><tr><td>git config –global user.email email地址</td><td>设置用户email地址 （安装Git后务必设置）</td></tr><tr><td><strong>获取与创建项目</strong></td><td></td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git clone 远程库地址</td><td>从远程库克隆到本地</td></tr><tr><td><strong>基本快照</strong></td><td></td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加变动文件到暂存区</td></tr><tr><td>git add .</td><td>添加当前目录下所有变动文件到暂存区</td></tr><tr><td>git restore –staged 文件名</td><td>复位在暂存区的文件（add反悔药）</td></tr><tr><td>git rm –cached 文件名</td><td>移除在暂存区的文件（add反悔药）（同上一条）</td></tr><tr><td>git commit -m “备注文本” 文件名</td><td>提交暂存区文件到本地库 （文件名缺省时，将暂存区所有文件提交）</td></tr><tr><td>git commit –amend</td><td>修改上次提交的备注文本</td></tr><tr><td>git revert 版本号(7位)</td><td>撤销指定的提交（commit反悔药）(慎用)</td></tr><tr><td>git reset –hard 版本号(7位)</td><td>版本间穿梭（配合git reflog使用）</td></tr><tr><td>git reset –hard HEAD^</td><td>穿梭到上一个版本</td></tr><tr><td><strong>分支与合并</strong></td><td></td></tr><tr><td>git branch</td><td>列出所有分支</td></tr><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名B</td><td>分支B合并到A （A为当前工作目录所处分支）</td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td></tr><tr><td>git tag</td><td>列出所有本地标签</td></tr><tr><td>git tag -l 通配模式文本(*)</td><td>根据符合通配模式文本，列出所有本地标签</td></tr><tr><td>git tag 标签名</td><td>为最新提交创建<strong>轻量</strong>标签</td></tr><tr><td>git tag 标签名 版本号(7位)</td><td>为对应版本号提交创建<strong>轻量</strong>标签（在后期打标签）</td></tr><tr><td>git tag -a 标签名 -m 备注文本</td><td>为最新提交创建<strong>附注</strong>标签</td></tr><tr><td>git tag -d 标签名</td><td>删除指定标签</td></tr><tr><td><strong>共享与更新项目</strong></td><td></td></tr><tr><td>git remote add 别名 远程仓库地址</td><td>添加远程库</td></tr><tr><td>git remote -v</td><td>查看添加过的远程库</td></tr><tr><td>git push 远程库地址或其别名 分支名</td><td>推送到远程库</td></tr><tr><td>git push 远程库地址或其别名 –tags</td><td>推送所有标签到远程库</td></tr><tr><td>git fetch</td><td>将远程库的最新内容拉到本地</td></tr><tr><td>git pull 远程库地址或其别名 分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并， 相当于git fetch + git merge，这样可能会产生冲突，需要手动解决</td></tr><tr><td><strong>检查与比较</strong></td><td></td></tr><tr><td>git show 标签名</td><td>显示标签信息和与之对应的提交信息</td></tr><tr><td>git show 版本号(7位)</td><td>显示对应版本对应的提交信息</td></tr><tr><td>git log</td><td>显示当前分支所有提交过的版本信息</td></tr><tr><td>git log –follow 文件名</td><td>显示当前分支所有提交过的关于指定文件版本信息</td></tr><tr><td>git log –pretty=oneline</td><td>显示当前分支所有提交过的版本信息（精简）</td></tr><tr><td>git log –graph</td><td>显示当前分支所有提交过的版本信息（附有分支合并图）</td></tr><tr><td>git diff 分支一 分支二</td><td>显示两分支差异</td></tr><tr><td>git diff 版本号一(7位) 版本号二(7位)</td><td>显示同一分支两版本差异</td></tr><tr><td><strong>管理</strong></td><td></td></tr><tr><td>git reflog</td><td></td></tr></tbody></table><h2 id="01-课程介绍"><a href="#01-课程介绍" class="headerlink" title="01_课程介绍"></a>01_课程介绍</h2><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6">教学视频地址</a></p><ul><li>Git<ul><li>Git介绍 分布式版本控制工具 VS 集中式版本控制工具</li><li>Git安装 基于官网发布的最新版本2.31.1安装讲解</li><li>Git命令 基于开发案例详细讲解了git的常用命令</li><li>Git分支 分支特性 分支创建 分支转换 分支合并 代码合并冲突解决</li><li>Idea集成Git</li></ul></li><li>GitHub<ul><li>创建远程库</li><li>代码推送Push</li><li>代码拉取Pull</li><li>代码克隆Clone</li><li>SSH免密登录</li><li>Idea集成GitHub</li></ul></li><li>Gitee码云<ul><li>码云创建远程库</li><li>Idea集成Gitee码云</li><li>码云连接GitHub进行代码的复制和迁移</li></ul></li><li>GitLab<ul><li>GitLab服务器的搭建和部署</li><li>Idea集成GitLab</li></ul></li></ul><p>课程目标：五小时熟练掌握Git GitHub GitLab Gitee码云的使用</p><h2 id="02-官网介绍"><a href="#02-官网介绍" class="headerlink" title="02_官网介绍"></a>02_官网介绍</h2><p><a href="https://git-scm.com/">Git官网</a></p><p><a href="http://git-scm.com/docs">Git官方文档</a></p><p><a href="https://git-scm.com/book/zh/v2">Git官方书</a></p><p><a href="https://git-scm.com/downloads">Git下载页面</a></p><p><a href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/">Github Git Cheat Sheets - 中文版</a></p><p>Git 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。</p><p>Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作流分支等特性。 其性能优于 Subversion、 CVS、 Perforce 和 ClearCase 等版本控制工具。</p><h2 id="03-概述-版本控制介绍"><a href="#03-概述-版本控制介绍" class="headerlink" title="03_概述_版本控制介绍"></a>03_概述_版本控制介绍</h2><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2abc5f18d46afc2d50cee7db484a460f.png" alt="img"></p><h3 id="为什么需要版本控制"><a href="#为什么需要版本控制" class="headerlink" title="为什么需要版本控制"></a>为什么需要版本控制</h3><p>个人开发过渡到团队协作。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2bcf55bc8f1e6cda16fc048ed30e12fc.png" alt="img"></p><h2 id="04-概述-分布式版本控制VS集中式版本控制"><a href="#04-概述-分布式版本控制VS集中式版本控制" class="headerlink" title="04_概述_分布式版本控制VS集中式版本控制"></a>04_概述_分布式版本控制VS集中式版本控制</h2><h3 id="集中式版本控制工具"><a href="#集中式版本控制工具" class="headerlink" title="集中式版本控制工具"></a>集中式版本控制工具</h3><p>集中化的版本控制系统诸如 CVS、 SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</p><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统， 要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。这么做显而易见的<strong>缺点</strong>是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f0cc7f6f1eb57316f7f8fce8e2f03f45.png" alt="img"></p><h3 id="分布式版本控制工具"><a href="#分布式版本控制工具" class="headerlink" title="分布式版本控制工具"></a>分布式版本控制工具</h3><p>Git、 Mercurial、 Bazaar、 Darcs……</p><p>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。</p><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷：</p><ol><li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</li><li>每个客户端保存的也都是整个完整的项目（包含历史记录， 更加安全）</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/340e9b3bc50013b61f0e83e96b99f86a.png" alt="img"></p><h2 id="05-概述-发展历史"><a href="#05-概述-发展历史" class="headerlink" title="05_概述_发展历史"></a>05_概述_发展历史</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/3f25cba01665ab8dcb63fcc79d05f04f.png" alt="img"></p><h2 id="06-概述-工作机制和代码托管中心"><a href="#06-概述-工作机制和代码托管中心" class="headerlink" title="06_概述_工作机制和代码托管中心"></a>06_概述_工作机制和代码托管中心</h2><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/1706b3553447ac9f8d95377d965d4fd2.png" alt="img"></p><h3 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为<strong>远程库</strong>。</p><ul><li>局域网<ul><li>GitLab</li></ul></li><li>互联网<ul><li>GitHub（外网）</li><li>Gitee 码云（国内网站）</li></ul></li></ul><h2 id="07-安装-安装和客户端的使用"><a href="#07-安装-安装和客户端的使用" class="headerlink" title="07_安装_安装和客户端的使用"></a>07_安装_安装和客户端的使用</h2><p>在<a href="https://git-scm.com/downloads">Git下载页面</a>，选择下载Windows 64位版的Git安装软件。</p><p>安装步骤按照安装软件的安装向导安装即可，无需过多配置。</p><p>安装成功后，通常在文件浏览器空白处单击击鼠标右键，弹出菜单栏有Git的选项。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/72adc78acc2344ab51285dae2c4776ad.png" alt="img"></p><h2 id="08-命令-设置用户签名"><a href="#08-命令-设置用户签名" class="headerlink" title="08_命令_设置用户签名"></a>08_命令_设置用户签名</h2><h3 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户email地址</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h3 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name abc #有户名</span><br><span class="line">git config --global user.email abc@123.com</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>说明：<strong>签名的作用是区分不同操作者身份</strong>。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。 <strong>Git 首次安装必须设置一下用户签名，否则无法提交代码</strong>。</p><p><strong>注意</strong>： 这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</p><p>查看设置过用户签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop</span><br><span class="line">$ cat ~/.gitconfig</span><br><span class="line">[user]</span><br><span class="line">        name = abc</span><br><span class="line">        email = abc@123.com</span><br><span class="line">[core]</span><br><span class="line">        quotepath = false</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h2 id="09-命令-初始化本地库"><a href="#09-命令-初始化本地库" class="headerlink" title="09_命令_初始化本地库"></a>09_命令_初始化本地库</h2><p>基本语法：<code>git init</code></p><p>案例实操：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop</span><br><span class="line">$ mkdir HelloGit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop (master)</span><br><span class="line">$ <span class="built_in">cd</span> HelloGit/</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ ls -al</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 1 abc 197121 0 Jul  5 20:18 ./</span><br><span class="line">drwxr-xr-x 1 abc 197121 0 Jul  5 20:19 ../</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> C:/Users/abc/Desktop/HelloGit/.git/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个名为.git非空隐藏文件夹</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ ls -al</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 1 abc 197121 0 Jul  5 20:19 ./</span><br><span class="line">drwxr-xr-x 1 abc 197121 0 Jul  5 20:19 ../</span><br><span class="line">drwxr-xr-x 1 abc 197121 0 Jul  5 20:19 .git/</span><br><span class="line"></span><br><span class="line">123456789101112131415161718192021222324</span><br></pre></td></tr></table></figure><p>创建了一个名为.git非空隐藏文件夹。</p><h2 id="10-命令-查看本地库状态"><a href="#10-命令-查看本地库状态" class="headerlink" title="10_命令_查看本地库状态"></a>10_命令_查看本地库状态</h2><p>基本语法：<code>git status</code></p><p>案例实操：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop</span><br><span class="line">$ <span class="built_in">cd</span> HelloGit/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次查看（工作区没有任何文件）</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增文件（hello.txt）</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看（检测到未追踪的文件）</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950</span><br></pre></td></tr></table></figure><h2 id="11-命令-添加暂存区"><a href="#11-命令-添加暂存区" class="headerlink" title="11_命令_添加暂存区"></a>11_命令_添加暂存区</h2><p>基本语法：<code>git add 文件名</code></p><p>案例实操：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加至暂存区</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   hello.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除暂存区的hello.txt</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git rm --cached hello.txt</span><br><span class="line">rm <span class="string">&#x27;hello.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次添加</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950</span><br></pre></td></tr></table></figure><h2 id="12-命令-提交本地库"><a href="#12-命令-提交本地库" class="headerlink" title="12_命令_提交本地库"></a>12_命令_提交本地库</h2><p>基本语法：<code>git commit -m &quot;日志信息&quot; 文件名</code></p><p>案例实操：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#提交本地库</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">[master (root-commit) b0006bc] first commit</span><br><span class="line"> 1 file changed, 19 insertions(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure><p>查看提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">b0006bc (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit b0006bc538b98b7eb77b4b4aaa17b6e333c4289e (HEAD -&gt; master)</span><br><span class="line">Author: abc &lt;abc@123.com&gt;</span><br><span class="line">Date:   Tue Jul 6 00:38:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><h2 id="13-命令-修改文件"><a href="#13-命令-修改文件" class="headerlink" title="13_命令_修改文件"></a>13_命令_修改文件</h2><p>修改hello.txt内容，<code>git status</code>会提示该文件修改过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!222</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line"></span><br><span class="line"><span class="comment">#提示 hello.txt 被修改过（modified）</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将修改的文件再次添加暂存区</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> hello.txt.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2次提交</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;second commit&quot;</span></span><br><span class="line">[master 6967bf0] second commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">6967bf0 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: second commit</span><br><span class="line">b0006bc HEAD@&#123;1&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758</span><br></pre></td></tr></table></figure><h2 id="14-命令-版本穿梭"><a href="#14-命令-版本穿梭" class="headerlink" title="14_命令_版本穿梭"></a>14_命令_版本穿梭</h2><h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><p>基本语法：</p><ul><li><code>git reflog</code> 查看版本信息</li><li><code>git log</code> 查看版本详细信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">41f776b (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;1&#125;: commit: second commit</span><br><span class="line">b0006bc HEAD@&#123;2&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 41f776ba69ea06c42bd449098d818ab73608d4dd (HEAD -&gt; master)</span><br><span class="line">Author: abc &lt;abc@123.com&gt;</span><br><span class="line">Date:   Tue Jul 6 01:18:21 2021 +0800</span><br><span class="line"></span><br><span class="line">    third commit</span><br><span class="line"></span><br><span class="line">commit 6967bf01bdcbc8e326f1b8c45d45db8bd4c0c868</span><br><span class="line">Author: abc &lt;abc@123.com&gt;</span><br><span class="line">Date:   Tue Jul 6 01:02:10 2021 +0800</span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit b0006bc538b98b7eb77b4b4aaa17b6e333c4289e</span><br><span class="line">Author: abc &lt;abc@123.com&gt;</span><br><span class="line">Date:   Tue Jul 6 00:38:24 2021 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526</span><br></pre></td></tr></table></figure><p><strong>git log与git reflog区别</strong></p><p><code>git log</code> 命令可以显示所有提交过的版本信息，如果感觉太繁琐，可以加上参数 <code>--pretty=oneline</code>，只会显示版本号和提交时的备注信息。</p><p><code>git reflog</code> 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）。例如，执行 <code>git reset --hard HEAD~1</code>，退回到上一个版本，用<code>git log</code>则是看不出来被删除的commitid，用<code>git reflog</code>则可以看到被删除的commitid，我们就可以买后悔药，恢复到被删除的那个版本。<a href="https://blog.csdn.net/u013252047/article/details/80230781">link</a></p><h3 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h3><p>基本语法：<code>git reset --hard 版本号</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先查看当前的历史记录</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">41f776b (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;1&#125;: commit: second commit</span><br><span class="line">b0006bc HEAD@&#123;2&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 b0006bc 版本，也就是第一次提交的版本</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reset --hard b0006bc</span><br><span class="line">HEAD is now at b0006bc first commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换完毕之后再查看历史记录，当前成功切换到了 b0006bc 版本</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">b0006bc (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to b0006bc</span><br><span class="line">41f776b HEAD@&#123;1&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;2&#125;: commit: second commit</span><br><span class="line">b0006bc (HEAD -&gt; master) HEAD@&#123;3&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后查看文件 hello.txt，发现文件内容回到第一版本</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br></pre></td></tr></table></figure><p>当你在切换版本后，再更改文本内容提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;forth commit&quot;</span></span><br><span class="line">[master 5f8dbf6] forth commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">5f8dbf6 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: forth commit</span><br><span class="line">b0006bc HEAD@&#123;1&#125;: reset: moving to b0006bc</span><br><span class="line">41f776b HEAD@&#123;2&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;3&#125;: commit: second commit</span><br><span class="line">b0006bc HEAD@&#123;4&#125;: commit (initial): first commit</span><br><span class="line">12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure><p>再次切换到第一版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reset --hard b0006bc</span><br><span class="line">HEAD is now at b0006bc first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">b0006bc (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to b0006bc</span><br><span class="line">5f8dbf6 HEAD@&#123;1&#125;: commit: forth commit</span><br><span class="line">b0006bc (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to b0006bc</span><br><span class="line">41f776b HEAD@&#123;3&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;4&#125;: commit: second commit</span><br><span class="line">b0006bc (HEAD -&gt; master) HEAD@&#123;5&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334</span><br></pre></td></tr></table></figure><p><strong>Git 切换版本， 底层其实是移动的 HEAD 指针。</strong></p><h2 id="15-分支-概述和优点"><a href="#15-分支-概述和优点" class="headerlink" title="15_分支_概述和优点"></a>15_分支_概述和优点</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/bcad650a512a72097b3391e00ecb8bbe.png" alt="img"></p><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来， 开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f1d0659ed000e9dfa295fc696a58cf74.png" alt="某项目有四条分支"></p><h3 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h3><p>同时并行推进多个功能开发，提高开发效率。</p><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p><h2 id="16-分支-查看-amp-创建-amp-切换"><a href="#16-分支-查看-amp-创建-amp-切换" class="headerlink" title="16_分支_查看&amp;创建&amp;切换"></a>16_分支_查看&amp;创建&amp;切换</h2><h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><p>基本语法：<code>git branch -v</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">* master b0006bc first commit</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><p>基本语法：<code>git branch 分支名</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git branch hot-fix</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">  hot-fix b0006bc first commit</span><br><span class="line">* master  b0006bc first commit</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p><strong>刚创建的新的分支，并将主分支master的内容复制了一份</strong>。</p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>基本语法：<code>git checkout 分支名</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到刚创建的分支上</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git branch -v</span><br><span class="line">* hot-fix b0006bc first commit</span><br><span class="line">  master  b0006bc first commit</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><p>切换分支后，在新分支修改文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git status</span><br><span class="line">On branch hot-fix</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#在hot-fix提交</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git commit -m <span class="string">&quot;hot-fix first commit&quot;</span></span><br><span class="line">[hot-fix 25f62d6] hot-fix first commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git reflog</span><br><span class="line">25f62d6 (HEAD -&gt; hot-fix) HEAD@&#123;0&#125;: commit: hot-fix first commit</span><br><span class="line">b0006bc (master) HEAD@&#123;1&#125;: checkout: moving from master to hot-fix</span><br><span class="line">b0006bc (master) HEAD@&#123;2&#125;: reset: moving to b0006bc</span><br><span class="line">5f8dbf6 HEAD@&#123;3&#125;: commit: forth commit</span><br><span class="line">b0006bc (master) HEAD@&#123;4&#125;: reset: moving to b0006bc</span><br><span class="line">41f776b HEAD@&#123;5&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;6&#125;: commit: second commit</span><br><span class="line">b0006bc (master) HEAD@&#123;7&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455</span><br></pre></td></tr></table></figure><h2 id="17-分支-合并分支-正常合并"><a href="#17-分支-合并分支-正常合并" class="headerlink" title="17_分支_合并分支(正常合并)"></a>17_分支_合并分支(正常合并)</h2><p>基本语法：<code>git merge 分支名</code></p><p>在 master 分支上合并 hot-fix 分支（将hot-fix的合并到master）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先要切换到master分支上</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将hot-fix的合并到master</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Updating b0006bc..25f62d6</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并后，可以在master分支上看到hot-fix上分支对文件的修改</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并后，hot-fix分支依然存在，并未消失</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git branch -v</span><br><span class="line">  hot-fix 25f62d6 hot-fix first commit</span><br><span class="line">* master  25f62d6 hot-fix first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git branch hot-fix</span><br><span class="line">fatal: A branch named <span class="string">&#x27;hot-fix&#x27;</span> already exists.</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152</span><br></pre></td></tr></table></figure><h2 id="18-分支-合并分支-冲突合并"><a href="#18-分支-合并分支-冲突合并" class="headerlink" title="18_分支_合并分支(冲突合并)"></a>18_分支_合并分支(冲突合并)</h2><h3 id="冲突产生的原因"><a href="#冲突产生的原因" class="headerlink" title="冲突产生的原因"></a>冲突产生的原因</h3><p>并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。 Git 无法替我们决定使用哪一个，因此，必须<strong>人为决定</strong>新代码内容。</p><h3 id="产生冲突"><a href="#产生冲突" class="headerlink" title="产生冲突"></a>产生冲突</h3><p>首先，在master修改文件hello.txt最后一行内容，并提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!master <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;master test&quot;</span></span><br><span class="line">[master fb0e30b] master <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br></pre></td></tr></table></figure><p>然后，在hot-fix修改文件hello.txt最后一行内容，并提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git checkout hot-fix</span><br><span class="line">Switched to branch <span class="string">&#x27;hot-fix&#x27;</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!hot-fix <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git commit -m <span class="string">&quot;hot-fix test&quot;</span></span><br><span class="line">[hot-fix 47d2d8f] hot-fix <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637</span><br></pre></td></tr></table></figure><p>切换到master分支，然后将hot-fix分支的合并到master，冲突产生：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (hot-fix)</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 冲突产生</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git merge hot-fix</span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line"><span class="comment"># MERGING 出现，表示有冲突待解决</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line">        both modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">hello, git!hot-fix test</span></span><br><span class="line"><span class="string">hello, git!master test</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">hello, git!</span></span><br><span class="line"><span class="string">hello, git!hot-fix test</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152</span></span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>编辑有冲突的文件，<strong>删除特殊符号</strong>，决定要使用的内容</p><p>特殊符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">当前分支的代码 </span><br><span class="line">======= </span><br><span class="line">合并过来的代码 </span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br><span class="line">12345</span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello, git!hot-fix test</span><br><span class="line">hello, git!master test</span><br><span class="line">=======</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!hot-fix test</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!hot-fix test</span><br><span class="line">hello, git!master test</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">        both modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master|MERGING)</span><br><span class="line">$ git commit -m &quot;conflict solved&quot;</span><br><span class="line">[master 785ab46] conflict solved</span><br><span class="line"></span><br><span class="line"># (master|MERGING)的|MERGING消失了，冲突解决</span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">785ab46 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (merge): conflict solved</span><br><span class="line">fb0e30b HEAD@&#123;1&#125;: checkout: moving from hot-fix to master</span><br><span class="line">47d2d8f (hot-fix) HEAD@&#123;2&#125;: commit: hot-fix test</span><br><span class="line">25f62d6 HEAD@&#123;3&#125;: checkout: moving from master to hot-fix</span><br><span class="line">fb0e30b HEAD@&#123;4&#125;: commit: master test</span><br><span class="line">25f62d6 HEAD@&#123;5&#125;: checkout: moving from hot-fix to master</span><br><span class="line">25f62d6 HEAD@&#123;6&#125;: checkout: moving from master to hot-fix</span><br><span class="line">25f62d6 HEAD@&#123;7&#125;: checkout: moving from hot-fix to master</span><br><span class="line">25f62d6 HEAD@&#123;8&#125;: checkout: moving from master to hot-fix</span><br><span class="line">25f62d6 HEAD@&#123;9&#125;: merge hot-fix: Fast-forward</span><br><span class="line">b0006bc HEAD@&#123;10&#125;: checkout: moving from hot-fix to master</span><br><span class="line">25f62d6 HEAD@&#123;11&#125;: commit: hot-fix first commit</span><br><span class="line">b0006bc HEAD@&#123;12&#125;: checkout: moving from master to hot-fix</span><br><span class="line">b0006bc HEAD@&#123;13&#125;: reset: moving to b0006bc</span><br><span class="line">5f8dbf6 HEAD@&#123;14&#125;: commit: forth commit</span><br><span class="line">b0006bc HEAD@&#123;15&#125;: reset: moving to b0006bc</span><br><span class="line">41f776b HEAD@&#123;16&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;17&#125;: commit: second commit</span><br><span class="line">b0006bc HEAD@&#123;18&#125;: commit (initial): first commit</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697</span><br></pre></td></tr></table></figure><h3 id="创建分支和切换分支"><a href="#创建分支和切换分支" class="headerlink" title="创建分支和切换分支"></a>创建分支和切换分支</h3><p>master、 hot-fix 其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD决定的。所以创建分支的本质就是多创建一个指针。</p><ul><li>HEAD 如果指向 master，那么我们现在就在 master 分支上。</li><li>HEAD 如果执行 hot-fix，那么我们现在就在 hot-fix 分支上。</li></ul><p>所以切换分支的本质就是移动 HEAD 指针。</p><h2 id="19-团队协作-团队内协作和跨团队协作"><a href="#19-团队协作-团队内协作和跨团队协作" class="headerlink" title="19_团队协作_团队内协作和跨团队协作"></a>19_团队协作_团队内协作和跨团队协作</h2><h3 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c397bde00d728c4e41eca79f578d25c3.png" alt="img"></p><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e3069f865cc2d9760801b7a06c9d213b.png" alt="img"></p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="20-GitHub-创建远程库-amp-创建别名"><a href="#20-GitHub-创建远程库-amp-创建别名" class="headerlink" title="20_GitHub_创建远程库&amp;创建别名"></a>20_GitHub_创建远程库&amp;创建别名</h2><p><a href="https://github.com/">GitHub网址</a></p><h3 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h3><p>登陆后，点击在网页右上角的“+” –&gt; “New repository”，创建远程库。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3dfd6ad9419bfcef2635e08a5c02e86c.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/fba2c7ad888d2aeeea3a6f4a28c7fb03.png" alt="img"></p><h3 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr></tbody></table><h3 id="创建别名"><a href="#创建别名" class="headerlink" title="创建别名"></a>创建别名</h3><p><strong>基本语法</strong>：</p><ul><li><code>git remote -v</code> 查看当前所有远程地址别名</li><li><code>git remote add 别名 远程地址</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git remote add hellogit https://github.com/abc/HelloGit.git</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git remote -v</span><br><span class="line">hellogit        https://github.com/abc/HelloGit.git (fetch)</span><br><span class="line">hellogit        https://github.com/abc/HelloGit.git (push)</span><br><span class="line"></span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><p><a href="https://github.com/abc/HelloGit.git%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%9C%A8%E5%88%9B%E5%BB%BA%E5%AE%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%90%8E%E7%94%9F%E6%88%90%E7%9A%84%E8%BF%9E%E6%8E%A5">https://github.com/abc/HelloGit.git，这个地址在创建完远程仓库后生成的连接</a> ，如图所示</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d9ee95e5b293a176efbfe8afefc3e632.png" alt="img"></p><h2 id="21-GitHub-推送本地库到远程库"><a href="#21-GitHub-推送本地库到远程库" class="headerlink" title="21_GitHub_推送本地库到远程库"></a>21_GitHub_推送本地库到远程库</h2><p>基本语法：<code>git push 别名 分支</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将master分支推送到别名为hellogit远程地址，</span></span><br><span class="line"><span class="comment"># 也就推送到https://github.com/abc/HelloGit.git（具体看前一节）</span></span><br><span class="line"><span class="comment"># 这里需要授权认证操作（输入账号密码）</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git push hellogit master</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/abc/HelloGit.git/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git push hellogit master</span><br><span class="line">Enumerating objects: 13, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (13/13), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (9/9), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (13/13), 1.02 KiB | 523.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 13 (delta 4), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/abc/HelloGit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819</span><br></pre></td></tr></table></figure><p>推送成功后，刷新<a href="https://github.com/abc/HelloGit%EF%BC%9A">https://github.com/abc/HelloGit：</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/84e90e7cd9e5cda112179e28facb2c2e.png" alt="img"></p><h2 id="22-GitHub-拉取远程库到本地库"><a href="#22-GitHub-拉取远程库到本地库" class="headerlink" title="22_GitHub_拉取远程库到本地库"></a>22_GitHub_拉取远程库到本地库</h2><p>基本语法：<code>git push 别名 分支</code></p><p>在Github上修改hello.txt文件，并提交。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bfe5dcc2d0362f94437bf09b16986ee5.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从hellogit拉取到master分支上</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git pull hellogit master</span><br><span class="line">remote: Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), 672 bytes | 168.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/JallenKwong/HelloGit</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   785ab46..47e257f  master     -&gt; hellogit/master</span><br><span class="line">Updating 785ab46..47e257f</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可看到从Github上修改后痕迹</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!modify from Github editor</span><br><span class="line">hello, git!hot-fix <span class="built_in">test</span></span><br><span class="line">hello, git!master <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">47e257f (HEAD -&gt; master, hellogit/master) HEAD@&#123;0&#125;: pull hellogit master: Fast-forward</span><br><span class="line">785ab46 HEAD@&#123;1&#125;: commit (merge): conflict solved</span><br><span class="line">fb0e30b HEAD@&#123;2&#125;: checkout: moving from hot-fix to master</span><br><span class="line">47d2d8f (hot-fix) HEAD@&#123;3&#125;: commit: hot-fix <span class="built_in">test</span></span><br><span class="line">25f62d6 HEAD@&#123;4&#125;: checkout: moving from master to hot-fix</span><br><span class="line">fb0e30b HEAD@&#123;5&#125;: commit: master <span class="built_in">test</span></span><br><span class="line">25f62d6 HEAD@&#123;6&#125;: checkout: moving from hot-fix to master</span><br><span class="line">25f62d6 HEAD@&#123;7&#125;: checkout: moving from master to hot-fix</span><br><span class="line">25f62d6 HEAD@&#123;8&#125;: checkout: moving from hot-fix to master</span><br><span class="line">25f62d6 HEAD@&#123;9&#125;: checkout: moving from master to hot-fix</span><br><span class="line">25f62d6 HEAD@&#123;10&#125;: merge hot-fix: Fast-forward</span><br><span class="line">b0006bc HEAD@&#123;11&#125;: checkout: moving from hot-fix to master</span><br><span class="line">25f62d6 HEAD@&#123;12&#125;: commit: hot-fix first commit</span><br><span class="line">b0006bc HEAD@&#123;13&#125;: checkout: moving from master to hot-fix</span><br><span class="line">b0006bc HEAD@&#123;14&#125;: reset: moving to b0006bc</span><br><span class="line">5f8dbf6 HEAD@&#123;15&#125;: commit: forth commit</span><br><span class="line">b0006bc HEAD@&#123;16&#125;: reset: moving to b0006bc</span><br><span class="line">41f776b HEAD@&#123;17&#125;: commit: third commit</span><br><span class="line">6967bf0 HEAD@&#123;18&#125;: commit: second commit</span><br><span class="line">b0006bc HEAD@&#123;19&#125;: commit (initial): first commit</span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566</span><br></pre></td></tr></table></figure><h2 id="23-GitHub-克隆远程库到本地"><a href="#23-GitHub-克隆远程库到本地" class="headerlink" title="23_GitHub_克隆远程库到本地"></a>23_GitHub_克隆远程库到本地</h2><p>基本语法：<code>git clone 远程地址</code></p><p>在远程库获取地址URL</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ff23330d5eab8f2a681c6f91727a37ca.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit (master)</span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新文件夹</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop</span><br><span class="line">$ mkdir HelloGit-clone</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop</span><br><span class="line">$ <span class="built_in">cd</span> HelloGit-clone/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在新的文件夹内，克隆远程库到本地</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/abc/HelloGit.git</span><br><span class="line">Cloning into <span class="string">&#x27;HelloGit&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 16, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (16/16), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (7/7), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 16 (delta 5), reused 12 (delta 4), pack-reused 0</span><br><span class="line">Receiving objects: 100% (16/16), <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone</span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">fatal: not a git repository (or any of the parent directories): .git</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone</span><br><span class="line">$ ls</span><br><span class="line">HelloGit/</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone</span><br><span class="line">$ <span class="built_in">cd</span> HelloGit/</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/abc/HelloGit.git (fetch)</span><br><span class="line">origin  https://github.com/abc/HelloGit.git (push)</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ git reflog</span><br><span class="line">47e257f (HEAD -&gt; master, origin/master, origin/HEAD) HEAD@&#123;0&#125;: <span class="built_in">clone</span>: from https://github.com/JallenKwong/HelloGit.git</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041</span><br></pre></td></tr></table></figure><p>clone 会做如下操作：</p><ol><li>拉取代码。</li><li>初始化本地仓库。</li><li>创建别名。</li></ol><h2 id="24-GitHub-团队内协作"><a href="#24-GitHub-团队内协作" class="headerlink" title="24_GitHub_团队内协作"></a>24_GitHub_团队内协作</h2><p>一、选择邀请合作者。（在仓库设置里操作）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/945f1ba6e29fb725ee0d852ff59c3851.png" alt="img"></p><p>二、填入目标合作者。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ee1b6a6656efe2adbb740b38954529b9.png" alt="img"></p><p>三、复制网址发送给你目标合作者 ， 复制内容如下：<a href="https://github.com/atguiguyueyue/git-shTest/invitations%E3%80%82">https://github.com/atguiguyueyue/git-shTest/invitations。</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0f5ec0155e64421d315594aa537fd187.png" alt="img"></p><p>四、目标合作者接收到网址，用浏览器打开它，点击接受邀请。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/295a2398e0a3150d50530d5db21103aa.png" alt="img"></p><p>五、接受邀请成功之后，可以在目标合作者Github账号上看到将来共同开发远程仓库。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ddca26e11277016e10eb610195567dac.png" alt="img"></p><p>六、目标合作者可以修改内容并 push 到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 clone 下来的文件</span></span><br><span class="line">Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line">Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello git! hello atguigu! 2222222222222</span><br><span class="line">hello git! hello atguigu! 33333333333333</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu! 我是最帅的， 比岳不群还帅</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu!</span><br><span class="line">hello git! hello atguigu! master <span class="built_in">test</span></span><br><span class="line">hello git! hello atguigu! hot-fix <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编辑好的文件添加到暂存区</span></span><br><span class="line">Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将暂存区的文件上传到本地库</span></span><br><span class="line">Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest(master)</span><br><span class="line">$ git commit -m <span class="string">&quot;lhc commit&quot;</span> hello.txt</span><br><span class="line">[master 5dabe6b] lhc commit</span><br><span class="line">1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地库的内容 push 到远程仓库</span></span><br><span class="line">Layne@LAPTOP-Layne MINGW64 /d/Git-Space/pro-linghuchong/git-shTest</span><br><span class="line">(master)</span><br><span class="line">$ git push origin master</span><br><span class="line">Logon failed, use ctrl+c to cancel basic credential prompt.</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://github.com&#x27;</span>: atguigulinghuchong</span><br><span class="line">Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 309 bytes | 309.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 <span class="built_in">local</span> object.</span><br><span class="line">To https://github.com/atguiguyueyue/git-shTest.git</span><br><span class="line">7cb4d02..5dabe6b master -&gt; master</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546</span><br></pre></td></tr></table></figure><p>七、回到发送合作邀请者的 GitHub 远程仓库中可以看到，最后一次是目标合作者提交的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b1a36bdb929e5dcb8cc03744e8806221.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2bb7de5f45f0a6b692d18806f976a932.png" alt="img"></p><h2 id="25-GitHub-跨团队协作"><a href="#25-GitHub-跨团队协作" class="headerlink" title="25_GitHub_跨团队协作"></a>25_GitHub_跨团队协作</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/e3069f865cc2d9760801b7a06c9d213b.png" alt="跨团队协作"></p><p>一、将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败。</p><p>二、在东方不败的 GitHub 账号里的地址栏复制收到的链接，然后点击 网页右上方的Fork按钮，将项目叉到自己的本地仓库。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4856e4845a7f0dbb54c79bd804892f5e.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c641d9ba65f20ba58d3f98ec792ae0e5.png" alt="img"></p><p>叉成功后可以看到当前仓库信息。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3078d75badb2fd393dbe172327dc094c.png" alt="img"></p><p>三、东方不败就可以在线编辑叉取过来的文件。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/40aa522895eb04a6c203a9bcbca25005.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/eb19249416069d158e2b4280a679063f.png" alt="img"></p><p>四、编辑完毕后，填写描述信息并点击左下角绿色按钮提交。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c87379a8a91eb65e2961475129362da4.png" alt="img"></p><p>五、接下来点击上方的 Pull 请求，并创建一个新的请求。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8bdb52dc24df07d8d846a4fe19985908.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c2f07c7ba5586e3923ba870a37c856d.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/996007e8e9fee91ef37af6818e164139.png" alt="img"></p><p>六、回到岳岳 GitHub 账号可以看到有一个 Pull request 请求。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c634b139396001cb2fcb64b8e2a078e1.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d666e1f3544c07821e85b602d0beffc5.png" alt="img"></p><p>进入到聊天室，可以讨论代码相关内容。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3d97452ea50fffca42ec29308c842692.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c477d95ea98448b966264bdae235b64.png" alt="img"></p><p>七、如果代码没有问题，可以点击 Merge pull reque 合并代码。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/894bdb75678d7793e92f1099e5c1d080.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2964db9c2239859ee59c4bfb9fb25513.png" alt="img"></p><h2 id="26-GitHub-SSH免密登录"><a href="#26-GitHub-SSH免密登录" class="headerlink" title="26_GitHub_SSH免密登录"></a>26_GitHub_SSH免密登录</h2><p>我们可以看到远程仓库中还有一个 SSH 的地址，因此我们也可以使用 SSH 进行访问。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/197d6964ccfb06f1eaf22f795061826d.png" alt="img"></p><p>先到用户的主页目录，删除.ssh文件夹（如果没有.ssh文件夹，忽略此步）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/c/Users/abc</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="line">$ ls -a .ssh</span><br><span class="line">./  ../  id_rsa  id_rsa.pub</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="line">$ rm -rf .ssh</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~</span><br><span class="line">$ ls -a .ssh</span><br><span class="line">ls: cannot access <span class="string">&#x27;.ssh&#x27;</span>: No such file or directory</span><br><span class="line"></span><br><span class="line">123456789101112131415161718</span><br></pre></td></tr></table></figure><p>运行命令ssh-keygen生成.ssh目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ ssh-keygen -t rsa -C abc@123.com</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/abc/.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">&#x27;/c/Users/abc/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/abc/.ssh/id_rsa</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/abc/.ssh/id_rsa.pub</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:aeNMB/hP2yiH/Dka2jK9BJciSgA8yKKLlKXX8oei7J0 jallenkwong@163.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|=                |</span></span><br><span class="line"><span class="string">|++ .   .         |</span></span><br><span class="line"><span class="string">|+ = . . .        |</span></span><br><span class="line"><span class="string">|.= o . . +       |</span></span><br><span class="line"><span class="string">|o.o + + S o      |</span></span><br><span class="line"><span class="string">|o. o + @ * +     |</span></span><br><span class="line"><span class="string">|. o . ..O = .    |</span></span><br><span class="line"><span class="string">| o. . o+.=..     |</span></span><br><span class="line"><span class="string">|.. E  .o+oo.     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">abc@DESKTOP-R85C9HV MINGW64 ~</span></span><br><span class="line"><span class="string">$ ls -a .ssh</span></span><br><span class="line"><span class="string">./  ../  id_rsa  id_rsa.pub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 生成公钥</span></span><br><span class="line"><span class="string">abc@DESKTOP-R85C9HV MINGW64 ~</span></span><br><span class="line"><span class="string">$ cat .ssh/id_rsa.pub</span></span><br><span class="line"><span class="string">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChXy8I20br9nu4GCNeZSDkozfHvlRFpXiImYnVlHVvyvFgjct1/zMeJgot1J6+yArSJbA4TMlS9nG8owCE6C9yqhPceDlKtQbARKS2pW7IyP5OhIbcqVmWmvvd+IMmsWrWgK9S6jqp0xSqv3Z3mlcHWOAK18oOe6wF6b3SyGgCP/EcwwUGX4NG7jukhK+In9joSuAxchEg/Ba2/LVjqtfBn3hXZx/SEt+rJ0UVPIT/eEe32HflrzokNcO7l0IgyLntv5QEAsSC2hiGxrM6vF5tQpb12MVZnt1/01ytP0ruQn2TVTI96vsOAa3Cj98dAH2Z0JdqZUSVBw+o3AqXP5oeF1JWkDHZzHQjLgu741wnUZn+vVXFBu1xQyApbvH7y7cNbq8PaxU+SyZbVXbq3RwTywJsyFQvsIOM5l0tG7jUD0QAd6dP3rcNODjFTaafJaBsR9aMwvKQd/d7H+BdwFPYOFp8HB2JAzhRpvlS4Av9MCIe0474wZ0T2QOJmcs7mns= abc@123.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233</span></span><br></pre></td></tr></table></figure><p>然后，将生成的公钥添加至Github账号SSH设置</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d213036d44d57f07ad75b23d20871ea.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0a6a75ce73adad73a535947dce7fa525.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0c2f4dd9ef30bdc8c47ae59e50b8851b.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1f54c4dccd3d8a17e909042c28181fb6.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0ad893fd8447ac90ed0ee7ceafdf582e.png" alt="img"></p><p>添加公钥后，可不用输入Github账号密码便可推送。</p><p>接下来通过SSH方式提交hello.txt。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b2391f3377179188499d33c3ee517d53.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!modify from Github editor</span><br><span class="line">hello, git!hot-fix <span class="built_in">test</span></span><br><span class="line">hello, git!master <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ vim hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ cat hello.txt</span><br><span class="line">hello, git!hot-fix</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!ssh <span class="built_in">test</span></span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!</span><br><span class="line">hello, git!modify from Github editor</span><br><span class="line">hello, git!hot-fix <span class="built_in">test</span></span><br><span class="line">hello, git!master <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ git commit -m <span class="string">&quot;ssh test&quot;</span></span><br><span class="line">[master 9602a37] ssh <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过SSH推送</span></span><br><span class="line">abc@DESKTOP-R85C9HV MINGW64 ~/Desktop/HelloGit-clone/HelloGit (master)</span><br><span class="line">$ git push git@github.com:abc/HelloGit.git master</span><br><span class="line">The authenticity of host <span class="string">&#x27;github.com (13.250.177.223)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>github.com,13.250.177.223<span class="string">&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Enumerating objects: 5, done.</span></span><br><span class="line"><span class="string">Counting objects: 100% (5/5), done.</span></span><br><span class="line"><span class="string">Delta compression using up to 8 threads</span></span><br><span class="line"><span class="string">Compressing objects: 100% (2/2), done.</span></span><br><span class="line"><span class="string">Writing objects: 100% (3/3), 283 bytes | 283.00 KiB/s, done.</span></span><br><span class="line"><span class="string">Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span></span><br><span class="line"><span class="string">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span></span><br><span class="line"><span class="string">To github.com:JallenKwong/HelloGit.git</span></span><br><span class="line"><span class="string">   47e257f..9602a37  master -&gt; master</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081</span></span><br></pre></td></tr></table></figure><p>推送成功。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/92d174f42df3162c15b5d2824dc06e28.png" alt="img"></p><h2 id="27-IDEA集成Git-环境准备"><a href="#27-IDEA集成Git-环境准备" class="headerlink" title="27_IDEA集成Git_环境准备"></a>27_IDEA集成Git_环境准备</h2><p>实操的IDEA版本为ultimate 2020.1。</p><h3 id="配置-Git-忽略文件"><a href="#配置-Git-忽略文件" class="headerlink" title="配置 Git 忽略文件"></a>配置 Git 忽略文件</h3><p>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之<br>间的差异。例如，Maven工程根据src生成的target。</p><p>创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore），这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，<strong>建议</strong>也放在用户家目录下。</p><p>git.ignore 文件模版内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br><span class="line">1234567891011121314151617181920212223242526272829</span><br></pre></td></tr></table></figure><p>在.gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = Layne</span><br><span class="line">    email = Layne@atguigu.com</span><br><span class="line">[core]</span><br><span class="line">excludesfile = C:/Users/asus/git.ignore</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><p>注意：这里要使用“正斜线（/）”，不要使用“反斜线（\）”</p><h3 id="在IDEA配置Git程序"><a href="#在IDEA配置Git程序" class="headerlink" title="在IDEA配置Git程序"></a>在IDEA配置Git程序</h3><p>在菜单栏File-&gt;Setting-&gt;搜索栏搜Git，配置Git的安装路径。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d86ae18c01b9a08bc73f02aa6c1b3708.png" alt="img"></p><h2 id="28-IDEA集成Git-初始化-amp-添加-amp-提交"><a href="#28-IDEA集成Git-初始化-amp-添加-amp-提交" class="headerlink" title="28_IDEA集成Git_初始化&amp;添加&amp;提交"></a>28_IDEA集成Git_初始化&amp;添加&amp;提交</h2><p>先创建一个名叫HelloGit的Maven工程。</p><h3 id="初始化Git"><a href="#初始化Git" class="headerlink" title="初始化Git"></a>初始化Git</h3><p>在菜单栏VCS -&gt; Import into Version Control -&gt; Create Git Repository</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4bbfb1e76fb25655b3fe6900bb29ea47.png" alt="img"></p><p>选择要创建 Git 本地仓库的工程，也就是HelloGit工程，然后添加OK。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5dc609978787f3e5a83dbdf954a3e039.png" alt="img"></p><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><p>创建一个HelloGit类，将其添加Git暂存区。</p><p>右键点击HelloGit类，选择Git-&gt;Add。可以右键点击HelloGit，更大范围地添加文件到暂存区。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/42d316f8c5058311afc83779b0c13551.png" alt="img"></p><p>添加成功后，文件名会从红色变成绿色。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ec95c2b0b99d1f3a0ac8ad3291fdde50.png" alt="img"></p><h3 id="提交至本地库"><a href="#提交至本地库" class="headerlink" title="提交至本地库"></a>提交至本地库</h3><p>右键点击HelloGit，选择Git-&gt;Commit Directory。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a73d7bbac024bfe61951662f5bf6ded.png" alt="img"></p><p>添加注释后提交：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/281c7f26319b59e7584103c2a3ee88dd.png" alt="img"></p><p>添加成功后，后台打印相关信息。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3bdf7a9135d3ae80b9aad4d678626491.png" alt="img"></p><h2 id="29-IDEA集成Git-切换版本"><a href="#29-IDEA集成Git-切换版本" class="headerlink" title="29_IDEA集成Git_切换版本"></a>29_IDEA集成Git_切换版本</h2><p>在 IDEA 的左下角，点击 Git，然后点击 Log 查看版本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/69e6670ea5681781c173f1c86864ae1e.png" alt="img"></p><p>右键选择要切换的版本，然后在菜单里点击 Checkout Revision。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5530ac3d829954cebd23ed15a681769f.png" alt="img"></p><h2 id="30-IDEA集成Git-创建分支-amp-切换分支"><a href="#30-IDEA集成Git-创建分支-amp-切换分支" class="headerlink" title="30_IDEA集成Git_创建分支&amp;切换分支"></a>30_IDEA集成Git_创建分支&amp;切换分支</h2><h3 id="创建分支-1"><a href="#创建分支-1" class="headerlink" title="创建分支"></a>创建分支</h3><p>右键点击HelloGit，Git -&gt; Repository -&gt; Branches，或者点击IDEA的右下角，如图红圈所示部位：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e31e84cd2f7b5b95bb2639abcb1804f.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c7544c1bade118b3177907ad903a8082.png" alt="img"></p><p>选择点击New Branch：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b9c18ec9924788adfa432b7b924308ce.png" alt="img"></p><p>创建新分支：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8a4a5e7cf7511d086ddac0be704e850f.png" alt="img"></p><h3 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h3><p>跟<strong>创建分支</strong>步骤相似，如点击IDEA的右下角（它显示项目正处在那条分支），如图红圈所示部位，选择你想要切换的分支，然后checkout：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c7544c1bade118b3177907ad903a8082.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/afbbe9a835629f522d0b02024fe2c11b.png" alt="img"></p><p>或者在log窗口，右键点击分支，选择checkout：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7ab6ab48e9b5a42009757b8b17b901f0.png" alt="img"></p><h2 id="31-IDEA集成Git-合并分支-正常合并"><a href="#31-IDEA集成Git-合并分支-正常合并" class="headerlink" title="31_IDEA集成Git_合并分支(正常合并)"></a>31_IDEA集成Git_合并分支(正常合并)</h2><p>先在hot-fix分支修改HelloGit类，并将其提交：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/41667203b7e067b59d1310cce4d92b15.png" alt="img"></p><p>然后切换到master分支，右下角的hot-fix会变为master：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f183b86164b0e00e9d6e8c8c9a4a17da.png" alt="img"></p><p>然后，点击IDEA 窗口的右下角的master，将 hot-fix 分支合并到当前 master 分支。选择hot-fix-&gt;Merge into Current</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fff1d4e014223aa2cc70f0fdc237f350.png" alt="img"></p><p>如果代码没有冲突， 分支直接合并成功，分支合并成功以后，代码自动提交，无需手动<br>提交本地库。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/271421c28750e86e69accd6ac687490c.png" alt="img"></p><h2 id="32-IDEA集成Git-合并分支-冲突合并"><a href="#32-IDEA集成Git-合并分支-冲突合并" class="headerlink" title="32_IDEA集成Git_合并分支(冲突合并)"></a>32_IDEA集成Git_合并分支(冲突合并)</h2><p>分别在master，hot-fix分支修改HelloGit类同一行，并提交，故意制作冲突：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/53daad680bc796069dc1ce61682d4abc.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f8fcf275169cdec742d31ce85ce20d7f.png" alt="img"></p><p>切换到master分支，将hot-fix的合并到master分支：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fff1d4e014223aa2cc70f0fdc237f350.png" alt="img"></p><p>冲突产生，需要人工解决：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eb3804e00dccfa2658aa33c972d8996e.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a73d642f285f171eeff7ae0c9bb6111b.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/eafebea94008b4f1f0ae15f8b2092919.png" alt="img"></p><p>代码冲突解决，将代码提交本地库后，如图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/15a9058f7f35112b8605cd69aaf42e35.png" alt="img"></p><h2 id="33-IDEA集成GitHub-设置GitHub账号"><a href="#33-IDEA集成GitHub-设置GitHub账号" class="headerlink" title="33_IDEA集成GitHub_设置GitHub账号"></a>33_IDEA集成GitHub_设置GitHub账号</h2><p>在菜单栏File-&gt;Setting-&gt;搜索栏搜GitHub，添加GitHub账号：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/00572764f1ed257dbc2d0f668434e6a0.png" alt="img"></p><p>由于网络问题，会时常登陆不了：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3084475acd640b1adf621688462a1504.png" alt="img"></p><p>解决方法：可通过Token登陆。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f3a64a809fa56624a997073836139140.png" alt="img"></p><p>登陆Github网站，<strong>获取Token</strong>，操作步骤看下图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d213036d44d57f07ad75b23d20871ea.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b2489e068b004bee03a227760248edb.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/200c556f6f0b6d44c442b58d6e8bb7ea.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/81a82fb47421c0a802cd1cfad7297e43.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3f596f2f68d50d277eefe1a4e6035d2d.png" alt="img"></p><p>将生成的token用来IDEA登录。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/704eafd9157658a0be35b081c3530ced.png" alt="img"></p><h2 id="34-IDEA集成GitHub-分享项目到GitHub"><a href="#34-IDEA集成GitHub-分享项目到GitHub" class="headerlink" title="34_IDEA集成GitHub_分享项目到GitHub"></a>34_IDEA集成GitHub_分享项目到GitHub</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/e057d2e660c2033ef9eae0c638aee2bc.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5ba3e09a890113b94420c3939dac239.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/44b2419dd2eebc2c053fb642188e8909.png" alt="img"></p><h2 id="35-IDEA集成GitHub-推送代码到远程库"><a href="#35-IDEA集成GitHub-推送代码到远程库" class="headerlink" title="35_IDEA集成GitHub_推送代码到远程库"></a>35_IDEA集成GitHub_推送代码到远程库</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/84baeaa175c6faa3ff538e0313187eff.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1ee51e1ed781404a93655f1ad10bd9ca.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bb9689e1fc2e1167e68ef39f73f28af7.png" alt="img"></p><p>注意： push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，<br>push 的操作是会被拒绝的。也就是说， 要想 push 成功，一定要保证本地库的版本要比远程库的版本高！ <strong>因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送！</strong></p><h2 id="36-IDEA集成GitHub-拉取远程库代码合并本地库"><a href="#36-IDEA集成GitHub-拉取远程库代码合并本地库" class="headerlink" title="36_IDEA集成GitHub_拉取远程库代码合并本地库"></a>36_IDEA集成GitHub_拉取远程库代码合并本地库</h2><p>右键点击项目，可以将远程仓库的内容 pull 到本地仓库。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/193d00830bc1636e2ae2640b749b9899.png" alt="img"></p><p>注意： pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动<br>合并，如果自动合并失败，还会涉及到手动解决冲突的问题。</p><h2 id="37-IDEA集成GitHub-克隆代码到本地"><a href="#37-IDEA集成GitHub-克隆代码到本地" class="headerlink" title="37_IDEA集成GitHub_克隆代码到本地"></a>37_IDEA集成GitHub_克隆代码到本地</h2><p>在菜单栏的File-&gt;Close Project-&gt;Get from Version Control。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f436b8f9156e5e5ce8c0e2b3b5fe3639.png" alt="img"></p><p>或者在菜单栏VCS-&gt;Get from Version Control。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/63f9691dd0a7627bd44a125942be7f31.png" alt="img"></p><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><h2 id="38-码云-账号注册登录-amp-创建远程库"><a href="#38-码云-账号注册登录-amp-创建远程库" class="headerlink" title="38_码云_账号注册登录&amp;创建远程库"></a>38_码云_账号注册登录&amp;创建远程库</h2><h3 id="码云简介"><a href="#码云简介" class="headerlink" title="码云简介"></a>码云简介</h3><p>众所周知， GitHub 服务器在国外， 使用 GitHub 作为项目托管网站，如果网速不好的话，严重影响使用体验，甚至会出现登录不上的情况。针对这个情况， 大家也可以使用国内的项目托管网站-码云。</p><p>码云是开源中国推出的基于 Git 的代码托管服务中心， 网址是 <a href="https://gitee.com/">https://gitee.com/</a> ，使用<br>方式跟 GitHub 一样，而且它还是一个中文网站，如果你英文不是很好，它是最好的选择。</p><h3 id="账号注册登录"><a href="#账号注册登录" class="headerlink" title="账号注册登录"></a>账号注册登录</h3><p>略</p><h3 id="创建远程库-1"><a href="#创建远程库-1" class="headerlink" title="创建远程库"></a>创建远程库</h3><p>跟Github的类似。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c8c01b7813e8578423ee2d790a580ee4.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/16341a72fa521e904f7b5a5489d4c693.png" alt="img"></p><p>另外，可以从GitHub与GitLab中导入仓库。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c5daf945afdd2f2836c1e9e20e8e389b.png" alt="img"></p><h2 id="39-码云-IDEA集成Gitee码云"><a href="#39-码云-IDEA集成Gitee码云" class="headerlink" title="39_码云_IDEA集成Gitee码云"></a>39_码云_IDEA集成Gitee码云</h2><p>首先，要在IDEA安装Gitee插件。</p><p>在菜单栏选File-&gt;Settings-&gt;Plugins，搜Gitee。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0241b8536ebed6fb08dcf04804c62cb0.png" alt="img"></p><p>安装插件成功后，重启IDEA。</p><p>功能跟在IDEA的Github插件，功能类似，如添加Gitee账号等，可参考前文IDEA的Github插件，触类旁通。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87e35b8ee0fd1fd4136f2b2727cbf02a.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/89e7174170b4ecc1c4ba896e3f1c9ad9.png" alt="img"></p><h2 id="40-码云-导入GitHub项目"><a href="#40-码云-导入GitHub项目" class="headerlink" title="40_码云_导入GitHub项目"></a>40_码云_导入GitHub项目</h2><p>略</p><h1 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h1><h2 id="41-GitLab-简介和安装环境准备"><a href="#41-GitLab-简介和安装环境准备" class="headerlink" title="41_GitLab_简介和安装环境准备"></a>41_GitLab_简介和安装环境准备</h2><h3 id="GitLab简介"><a href="#GitLab简介" class="headerlink" title="GitLab简介"></a>GitLab简介</h3><p>GitLab 是由 GitLab Inc.开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务。（可搭建局域网Git仓库）。</p><p>GitLab 由乌克兰程序员 DmitriyZaporozhets 和 ValerySizov 开发，它使用 Ruby 语言写成。后来，一些部分用 Go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以及 2000 多名开源贡献者。 GitLab 被 IBM， Sony， JülichResearchCenter， NASA， Alibaba，Invincea， O’ReillyMedia， Leibniz-Rechenzentrum(LRZ)， CERN， SpaceX 等组织使用。</p><h3 id="GitLab官网地址"><a href="#GitLab官网地址" class="headerlink" title="GitLab官网地址"></a>GitLab官网地址</h3><p><a href="https://about.gitlab.com/">官网地址</a></p><p><a href="https://about.gitlab.com/installation/">安装说明</a></p><h3 id="GitLab安装准备"><a href="#GitLab安装准备" class="headerlink" title="GitLab安装准备"></a>GitLab安装准备</h3><ol><li>准备一个系统为 CentOS7 以上版本的服务器， 要求内存 4G，磁盘 50G。</li><li>关闭防火墙， 并且配置好主机名和 IP，保证服务器可以上网。</li><li>此教程使用虚拟机：主机名： gitlab-server IP 地址： 192.168.6.200</li><li>Yum 在线安装 gitlab- ce 时，需要下载几百 M 的安装文件，非常耗时，所以最好提前把所需 RPM 包下载到本地，然后使用离线 rpm 的方式安装。<a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm">下载地址</a>。注：资料里提供了此 rpm 包，直接将此包上传到服务器/opt/module 目录下即可。</li></ol><h2 id="42-GitLab-安装-amp-初始化服务-amp-启动服务"><a href="#42-GitLab-安装-amp-初始化服务-amp-启动服务" class="headerlink" title="42_GitLab_安装&amp;初始化服务&amp;启动服务"></a>42_GitLab_安装&amp;初始化服务&amp;启动服务</h2><h3 id="编写安装脚本"><a href="#编写安装脚本" class="headerlink" title="编写安装脚本"></a>编写安装脚本</h3><p>安装 gitlab 步骤比较繁琐，因此我们可以参考<a href="https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh">官网编写 gitlab 的安装脚本</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]<span class="comment"># vim gitlab-install.sh</span></span><br><span class="line">sudo rpm -ivh /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server cronie</span><br><span class="line"></span><br><span class="line">sudo lokkit -s http -s ssh</span><br><span class="line"></span><br><span class="line">sudo yum install -y postfix</span><br><span class="line"></span><br><span class="line">sudo service postfix start</span><br><span class="line"></span><br><span class="line">sudo chkconfig postfix on</span><br><span class="line"></span><br><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlabce/script.rpm.sh | sudo bash</span><br><span class="line"></span><br><span class="line">sudo EXTERNAL_URL=<span class="string">&quot;http://gitlab.example.com&quot;</span> yum -y install gitlabce</span><br><span class="line">12345678910111213141516</span><br></pre></td></tr></table></figure><p>给脚本增加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]<span class="comment"># chmod +x gitlab-install.sh</span></span><br><span class="line">[root@gitlab-server module]<span class="comment"># ll</span></span><br><span class="line">总用量 403104</span><br><span class="line">-rw-r--r--. 1 root root 412774002 4 月 7 15:47 gitlab-ce-13.10.2-</span><br><span class="line">ce.0.el7.x86_64.rpm</span><br><span class="line">-rwxr-xr-x. 1 root root 416 4 月 7 15:49 gitlab-install.sh</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]<span class="comment"># ./gitlab-install.sh</span></span><br><span class="line">警告： /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm: 头 V4</span><br><span class="line">RSA/SHA1 Signature, 密钥 ID f27eab47: NOKEY</span><br><span class="line">准备中... <span class="comment">#################################</span></span><br><span class="line">[100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">1:gitlab-ce-13.10.2-ce.0.el7</span><br><span class="line"><span class="comment">################################# [100%]</span></span><br><span class="line">。 。 。 。 。 。</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><h3 id="初始化GitLab服务"><a href="#初始化GitLab服务" class="headerlink" title="初始化GitLab服务"></a>初始化GitLab服务</h3><p>执行以下命令初始化 GitLab 服务，过程大概需要几分钟，耐心等待…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]<span class="comment"># gitlab-ctl reconfigure</span></span><br><span class="line">。 。 。 。 。 。</span><br><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client finished, 425/608 resources updated <span class="keyword">in</span> 03 minutes 08</span><br><span class="line">seconds</span><br><span class="line">gitlab Reconfigured!</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h3 id="启动GitLab服务"><a href="#启动GitLab服务" class="headerlink" title="启动GitLab服务"></a>启动GitLab服务</h3><p>执行以下命令启动 GitLab 服务，如需停止，执行 gitlab-ctl stop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]<span class="comment"># gitlab-ctl start</span></span><br><span class="line">ok: run: alertmanager: (pid 6812) 134s</span><br><span class="line">ok: run: gitaly: (pid 6740) 135s</span><br><span class="line">ok: run: gitlab-monitor: (pid 6765) 135s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 6722) 136s</span><br><span class="line">ok: run: logrotate: (pid 5994) 197s</span><br><span class="line">ok: run: nginx: (pid 5930) 203s</span><br><span class="line">ok: run: node-exporter: (pid 6234) 185s</span><br><span class="line">ok: run: postgres-exporter: (pid 6834) 133s</span><br><span class="line">ok: run: postgresql: (pid 5456) 257s</span><br><span class="line">ok: run: prometheus: (pid 6777) 134s</span><br><span class="line">ok: run: redis: (pid 5327) 263s</span><br><span class="line">ok: run: redis-exporter: (pid 6391) 173s</span><br><span class="line">ok: run: sidekiq: (pid 5797) 215s</span><br><span class="line">ok: run: unicorn: (pid 5728) 221s</span><br><span class="line">123456789101112131415</span><br></pre></td></tr></table></figure><h2 id="43-GitLab-登录GitLab并创建远程库"><a href="#43-GitLab-登录GitLab并创建远程库" class="headerlink" title="43_GitLab_登录GitLab并创建远程库"></a>43_GitLab_登录GitLab并创建远程库</h2><h3 id="登录GitLab"><a href="#登录GitLab" class="headerlink" title="登录GitLab"></a>登录GitLab</h3><p>使用主机名或者 IP 地址即可访问 GitLab 服务。可配一下 windows 的 hosts 文件（C:\Windows\System32\drivers\etc）。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/048956890f1e644fb77e8d58092a8b6d.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1870c658dcabcf08fbc3b5b9fa6b2243.png" alt="img"></p><p>首次登陆之前，需要修改下 GitLab 提供的 root 账户的密码，要求 8 位以上，包含大小写子母和特殊符号。</p><p>然后使用修改后的密码登录 GitLab。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5608650ec5e913d5ab549f30fbb477d3.png" alt="img"></p><p>GitLab 登录成功。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3231f6dd1a07f90326ec0506eaae747f.png" alt="img"></p><h3 id="创建远程库-2"><a href="#创建远程库-2" class="headerlink" title="创建远程库"></a>创建远程库</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2ab639dfaa57cd499133c2c4cde1222a.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f135a7b76c745c3aeef9034a82c8afaf.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5ff82d173fe047244945c8cd255a4b33.png" alt="img"></p><h2 id="44-GitLab-IDEA集成GitLab"><a href="#44-GitLab-IDEA集成GitLab" class="headerlink" title="44_GitLab_IDEA集成GitLab"></a>44_GitLab_IDEA集成GitLab</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/1f34175126922c56c158f466dd4d665c.png" alt="img"></p><p>接下来插件配置，Git操作等与Github、Gitee的IDEA插件大同小异，不再赘述，自己触类旁通吧！</p><h1 id="转载鸣谢"><a href="#转载鸣谢" class="headerlink" title="转载鸣谢"></a>转载鸣谢</h1><p>转载至：<a href="https://blog.csdn.net/u011863024/article/details/118562748">https://blog.csdn.net/u011863024/article/details/118562748</a></p><p>作者：<a href="https://blog.csdn.net/u011863024">巨輪</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;00-Git常用命令&quot;&gt;&lt;a href=&quot;#00-Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;0</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>第一天来到Hexo</title>
    <link href="http://example.com/2021/11/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%9D%A5%E8%80%8DHexo/"/>
    <id>http://example.com/2021/11/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%9D%A5%E8%80%8DHexo/</id>
    <published>2021-11-21T14:00:00.000Z</published>
    <updated>2021-11-25T11:23:53.916Z</updated>
    
    <content type="html"><![CDATA[<p>来到hexo的第一天</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来到hexo的第一天&lt;/p&gt;
</summary>
      
    
    
    
    <category term="记录" scheme="http://example.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
</feed>
