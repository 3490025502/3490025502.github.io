<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清欢的小黑店</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-08T15:40:40.645Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>清欢</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XMind思维导图windows端破解（含应用程序）</title>
    <link href="http://example.com/2022/08/08/XMind%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEwindows%E7%AB%AF%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%90%AB%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%89/"/>
    <id>http://example.com/2022/08/08/XMind%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEwindows%E7%AB%AF%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%90%AB%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%89/</id>
    <published>2022-08-08T14:48:43.000Z</published>
    <updated>2022-08-08T15:40:40.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认识XMind"><a href="#认识XMind" class="headerlink" title="认识XMind"></a>认识XMind</h2><p>众所周知，思维导图是生产力是重中之重，XMind作为已经发展多年的生产力工具，其功能架构与使用体验都是非常不错的，但是在试用版中，我们有很多关键的功能无法使用，例如插入图片、导出各类型的文件，但是正式版的价格，都是我们这些学生党或者初入社会的社畜望而却步的，所以一个破解版的生产力工具那可谓是久旱逢甘霖呀！但是在自己有经济条件的情况下，大家还是多多支持正版，上车补票才能让这个软件迭代得更加完美。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://pan.baidu.com/s/158nHtObvXQ0Oz11vI_iPug?pwd=1314">XMind破解版(百度网盘下载)</a><br>        提取码：1314</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><ol><li><p>下载后正常安装并打开XMind</p></li><li><p>关闭【帮助】-【检查更新】中的【自动安装以后的更新】</p><p><img src="/2022/08/08/XMind%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEwindows%E7%AB%AF%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%90%AB%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%89/image-20220808231942640.png" alt="image-20220808231942640"></p><p><img src="/2022/08/08/XMind%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEwindows%E7%AB%AF%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%90%AB%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%89/image-20220808232043916.png" alt="image-20220808232043916"></p></li><li><p>在【首选项】-【自动更新】也需要关掉</p><p><img src="/2022/08/08/XMind%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEwindows%E7%AB%AF%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%90%AB%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%89/image-20220808232257542.png" alt="image-20220808232257542"></p><p><img src="/2022/08/08/XMind%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BEwindows%E7%AB%AF%E7%A0%B4%E8%A7%A3%EF%BC%88%E5%90%AB%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%EF%BC%89/image-20220808232344086.png" alt="image-20220808232344086"></p></li><li><p>然后找到XMind安装目录下的resources/app.asar文件，用刚刚下载的app.asar文件替换这个文件，然后重启。</p></li><li><p>然后开始享用全功能的XMind吧！</p></li></ol><h2 id="可能出现的情况"><a href="#可能出现的情况" class="headerlink" title="可能出现的情况"></a>可能出现的情况</h2><ol><li><p>当未关闭自动更新时，直接替换app.asar文件会出现应用程序<strong>自动更新为最新版本</strong>，但是该最新版本仍处于试用的状态，这个时候很多人就会选择再次替换app.asar文件，但是这时就会出现<strong>应用程序无法打开</strong>，而且cpu和内存爆满的情况。</p><p><strong>解决方案：</strong>重新安装XMind，然后关闭所有更新策略之后再进行替换操作。</p></li><li><p> 该破解方法暂时<strong>不支持最新版本</strong>，其他版本可自行尝试。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;认识XMind&quot;&gt;&lt;a href=&quot;#认识XMind&quot; class=&quot;headerlink&quot; title=&quot;认识XMind&quot;&gt;&lt;/a&gt;认识XMind&lt;/h2&gt;&lt;p&gt;众所周知，思维导图是生产力是重中之重，XMind作为已经发展多年的生产力工具，其功能架构与使用体验都</summary>
      
    
    
    
    <category term="思维导图" scheme="http://example.com/categories/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
    
    <category term="XMind" scheme="http://example.com/tags/XMind/"/>
    
  </entry>
  
  <entry>
    <title>CentOS网络配置</title>
    <link href="http://example.com/2022/07/01/CentOS%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/07/01/CentOS%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</id>
    <published>2022-07-01T15:14:00.000Z</published>
    <updated>2022-07-01T15:51:34.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CentOS网络配置"><a href="#CentOS网络配置" class="headerlink" title="CentOS网络配置"></a>CentOS网络配置</h1><h2 id="本地网络适配器设置"><a href="#本地网络适配器设置" class="headerlink" title="本地网络适配器设置"></a>本地网络适配器设置</h2><p><img src="/2022/07/01/CentOS%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20220619155932274.png" alt="image-20220619155932274"></p><h2 id="虚拟机网络适配器设置"><a href="#虚拟机网络适配器设置" class="headerlink" title="虚拟机网络适配器设置"></a>虚拟机网络适配器设置</h2><p><img src="/2022/07/01/CentOS%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20220619160045448.png" alt="image-20220619160045448"></p><h3 id="NAT设置"><a href="#NAT设置" class="headerlink" title="NAT设置"></a>NAT设置</h3><p><img src="/2022/07/01/CentOS%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20220619160057535.png" alt="image-20220619160057535"></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=dd47c6ff-eb13-49c4-a12b-0bf9c2173c3d</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.203.132</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.203.2</span><br><span class="line">PREFIX=24</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure><h2 id="添加自己网段的DNS"><a href="#添加自己网段的DNS" class="headerlink" title="添加自己网段的DNS"></a>添加自己网段的DNS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim resolv.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 192.168.203.2</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CentOS网络配置&quot;&gt;&lt;a href=&quot;#CentOS网络配置&quot; class=&quot;headerlink&quot; title=&quot;CentOS网络配置&quot;&gt;&lt;/a&gt;CentOS网络配置&lt;/h1&gt;&lt;h2 id=&quot;本地网络适配器设置&quot;&gt;&lt;a href=&quot;#本地网络适配器设置&quot; c</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://example.com/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-01T15:11:12.000Z</published>
    <updated>2022-08-09T15:13:51.357Z</updated>
    
    <content type="html"><![CDATA[<p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h1 id="单机安装Redis"><a href="#单机安装Redis" class="headerlink" title="单机安装Redis"></a>单机安装Redis</h1><h2 id="安装Redis依赖"><a href="#安装Redis依赖" class="headerlink" title="安装Redis依赖"></a>安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><h2 id="上传安装包并解压"><a href="#上传安装包并解压" class="headerlink" title="上传安装包并解压"></a>上传安装包并解压</h2><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211071712536.png" alt="image-20211211071712536"></p><p>例如，我放到了/usr/local/src 目录：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211080151539.png" alt="image-20211211080151539"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure><p>解压后：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211080339076.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211080603710.png" alt="image-20211211080603710"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="默认启动"><a href="#默认启动" class="headerlink" title="默认启动"></a>默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211081716167.png" alt="image-20211211081716167"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123321 shutdown</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h1 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="Redis命令行客户端"><a href="#Redis命令行客户端" class="headerlink" title="Redis命令行客户端"></a>Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码 </li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211110439353.png" alt="image-20211211110439353"></p><h2 id="图形化桌面客户端"><a href="#图形化桌面客户端" class="headerlink" title="图形化桌面客户端"></a>图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211111351885.png" alt="image-20211211111351885"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211214154938770.png" alt="image-20211214154938770"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211214155123841.png" alt="image-20211214155123841"></p><p>此处略。</p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211110935819.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211214155406692.png" alt="image-20211214155406692"></p><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211214155424842.png" alt="image-20211214155424842"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211211111614483.png" alt="image-20211211111614483"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211214155804523.png" alt="image-20211214155804523"></p><p>点击即可建立连接了：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211214155849495.png" alt="image-20211214155849495"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择 0号库</span></span><br><span class="line">select 0</span><br></pre></td></tr></table></figure><h1 id="初学Redis"><a href="#初学Redis" class="headerlink" title="初学Redis"></a>初学Redis</h1><h2 id="Redis通用命令"><a href="#Redis通用命令" class="headerlink" title="Redis通用命令"></a>Redis通用命令</h2><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p><strong>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</strong></p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><p><strong>String的常见命令有：</strong></p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220701233230524.png" alt="image-20220701233230524"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220701233318681.png" alt="image-20220701233318681"></p><p><strong>Hash的常见命令有：</strong></p><ul><li>HSET key field value：添加或者修改hash类型key的field的值</li><li>HGET key field：获取一个hash类型key的field的值</li><li>HMSET：批量添加多个hash类型key的field的值</li><li>HMGET：批量获取多个hash类型key的field的值</li><li>HGETALL：获取一个hash类型的key中的所有的field和value</li><li>HKEYS：获取一个hash类型的key中的所有的field</li><li>HVALS：获取一个hash类型的key中的所有的value</li><li>HINCRBY:让一个hash类型key的字段值自增并指定步长</li><li>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</li></ul><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220701233528501.png" alt="image-20220701233528501"></p><h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><p><strong>String的常见命令有：</strong></p><ul><li><p>SADD key member … ：向set中添加一个或多个元素</p></li><li><p>SREM key member … : 移除set中的指定元素</p></li><li><p>SCARD key： 返回set中元素的个数</p></li><li><p>SISMEMBER key member：判断一个元素是否存在于set中</p></li><li><p>SMEMBERS：获取set中的所有元素</p></li><li><p>SINTER key1 key2 … ：求key1与key2的交集</p></li><li><p>SDIFF key1 key2 … ：求key1与key2的差集</p></li><li><p>SUNION key1 key2 ..：求key1和key2的并集</p></li></ul><h2 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p><strong>SortedSet的常见命令有：</strong></p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可</p><h1 id="Reids的Java客户端"><a href="#Reids的Java客户端" class="headerlink" title="Reids的Java客户端"></a>Reids的Java客户端</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/clients">Reids官网Clients</a></p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220701234021091.png" alt="image-20220701234021091"></p><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>Jedis的官网地址： <a href="https://github.com/redis/jedis%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E6%9D%A5%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%9A">https://github.com/redis/jedis，我们先来个快速入门：</a></p><h3 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="建立连接："><a href="#建立连接：" class="headerlink" title="建立连接："></a>建立连接：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.建立连接</span></span><br><span class="line">        jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.203.132&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.设置密码</span></span><br><span class="line">        jedis.auth(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//3.选择库</span></span><br><span class="line">        jedis.select(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试String"><a href="#测试String" class="headerlink" title="测试String"></a>测试String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        String result = jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hhh&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;setResult=&quot;</span> + result);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        String getResult = <span class="keyword">this</span>.jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;getResult=&quot;</span> + getResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试Hash"><a href="#测试Hash" class="headerlink" title="测试Hash"></a>测试Hash</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testHash</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        <span class="keyword">long</span> result = jedis.hset(<span class="string">&quot;user:xwl&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;xwl&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        String name = jedis.hget(<span class="string">&quot;user:xwl&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="keyword">null</span>)&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h2><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</p><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisConnectionFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPoll;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//配置连接池</span></span><br><span class="line">        JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">0</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//创建连接池对象</span></span><br><span class="line">        jedisPoll = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">&quot;192.168.203.132&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPoll.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringDataRedis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单：</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接池依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line"><span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line"><span class="attr">lettuce:</span></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line"><span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 最大连接</span></span><br><span class="line"><span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 最大空闲连接</span></span><br><span class="line"><span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 最小空闲连接</span></span><br><span class="line"><span class="attr">max-wait:</span> <span class="number">100</span> <span class="comment"># 连接等待时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注入RedisTemplate"><a href="#注入RedisTemplate" class="headerlink" title="注入RedisTemplate"></a>注入RedisTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><h3 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 插入一条string类型数据</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="comment">// 读取一条string类型数据</span></span><br><span class="line">    Object name = redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SpringDataRedis的使用步骤："><a href="#SpringDataRedis的使用步骤：" class="headerlink" title="SpringDataRedis的使用步骤："></a>SpringDataRedis的使用步骤：</h3><ol><li>引入spring-boot-starter-data-redis依赖</li><li>在application.yml配置Redis信息</li><li>注入RedisTemplate</li></ol><h3 id="SpringDataRedis的序列化方式"><a href="#SpringDataRedis的序列化方式" class="headerlink" title="SpringDataRedis的序列化方式"></a>SpringDataRedis的序列化方式</h3><p>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220709115724125.png" alt="image-20220709115724125"></p><p><strong>缺点：</strong></p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">//连接RedisConnectionFactory工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//创建JSON序列化工具</span></span><br><span class="line">        GenericJackson2JsonRedisSerializer jsonRedisSerializer = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">        <span class="comment">//创建key序列化方法</span></span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">//创建value序列化方法</span></span><br><span class="line">        redisTemplate.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">//返回序列化后的结果</span></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如图：</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220709115901205.png" alt="image-20220709115901205"></p><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220709115940474.png" alt="image-20220709115940474"></p><p>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">public class RedisStringTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void testString() &#123;</span><br><span class="line">        //插入一条数据</span><br><span class="line">        stringRedisTemplate.opsForValue().set(&quot;name1&quot;,&quot;huge&quot;);</span><br><span class="line">        //获取一条数据</span><br><span class="line">        String name = stringRedisTemplate.opsForValue().get(&quot;name&quot;);</span><br><span class="line">        System.out.println(&quot;name = &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static final ObjectMapper MAPPER = new ObjectMapper();</span><br><span class="line">    @Test</span><br><span class="line">    void testSaveObject()&#123;</span><br><span class="line">        //创建对象</span><br><span class="line">        User user1 = new User(&quot;徐文龙&quot;, &quot;16&quot;);</span><br><span class="line">        //手动序列化</span><br><span class="line">        String user = &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            user = MAPPER.writeValueAsString(user1);</span><br><span class="line">        //插入一个对象</span><br><span class="line">        stringRedisTemplate.opsForValue().set(&quot;user&quot;, user);</span><br><span class="line">        //获取对象(手动反序列化）</span><br><span class="line">        String userObject = stringRedisTemplate.opsForValue().get(&quot;user&quot;);</span><br><span class="line">        User user2 = MAPPER.readValue(userObject, User.class);</span><br><span class="line">        System.out.println(&quot;user = &quot; + user2);</span><br><span class="line">        &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void testHash()&#123;</span><br><span class="line">        stringRedisTemplate.opsForHash().put(&quot;user:100&quot;, &quot;name1&quot;,&quot;xwl&quot;);</span><br><span class="line">        stringRedisTemplate.opsForHash().put(&quot;user:100&quot;, &quot;name&quot;,&quot;hmh&quot;);</span><br><span class="line">        Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(&quot;user:100&quot;);</span><br><span class="line">        System.out.println(&quot;entries = &quot; + entries);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisTemplate的两种序列化实践方案："><a href="#RedisTemplate的两种序列化实践方案：" class="headerlink" title="RedisTemplate的两种序列化实践方案："></a>RedisTemplate的两种序列化实践方案：</h3><p>方案一：</p><ol><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ol><p>方案二：</p><ol><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ol><h1 id="Redis实战：短信登录"><a href="#Redis实战：短信登录" class="headerlink" title="Redis实战：短信登录"></a>Redis实战：短信登录</h1><h2 id="基于session的短信登录流程参考"><a href="#基于session的短信登录流程参考" class="headerlink" title="基于session的短信登录流程参考"></a>基于session的短信登录流程参考</h2><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220731214553668.png" alt="image-20220731214553668"></p><p><strong>session共享问题</strong>：多台Tomcat并不共享session存储空间，当请求切换到不同tomcat服务时导致数据丢失的问题。</p><p>session的替代方案应该满足：</p><p>•数据共享</p><p>•内存存储</p><p>•key、value结构</p><p>所以选用Redis缓存session解决多台Tomcat不共享session存储空间的问题</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220731214828901.png" alt="image-20220731214828901"></p><h2 id="登录拦截器的优化"><a href="#登录拦截器的优化" class="headerlink" title="登录拦截器的优化"></a>登录拦截器的优化</h2><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220731214927216.png" alt="image-20220731214927216"></p><h2 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h2><p>缓存：一种具备高效读写能力的数据暂存区域</p><p>缓存的作用:</p><ol><li>降低后端负载</li><li>提高服务读写响应速度</li></ol><p>缓存的成本：</p><ol><li>开发成本</li><li>运维成本</li><li>一致性问题</li></ol><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><table><thead><tr><th align="center"></th><th align="center">内存淘汰</th><th align="center">过期淘汰</th><th align="center">主动更新</th></tr></thead><tbody><tr><td align="center">说明</td><td align="center">Redis自带的内存淘汰机制，默认采用LRU（最近最少使用）的淘汰机制</td><td align="center">利用expire命令给数据设置过期时间</td><td align="center">编写业务逻辑过期，主动完成数据库与缓存的同时更新</td></tr><tr><td align="center">一致性</td><td align="center">差</td><td align="center">一般</td><td align="center">好</td></tr><tr><td align="center">维护成本</td><td align="center">无</td><td align="center">低</td><td align="center">高</td></tr></tbody></table><h3 id="策略选择"><a href="#策略选择" class="headerlink" title="策略选择"></a>策略选择</h3><p>低一致性需求：内存淘汰或过期淘汰</p><p>高一致性需求：主动更新为主，过期淘汰兜底</p><h3 id="主动更新方案"><a href="#主动更新方案" class="headerlink" title="主动更新方案"></a>主动更新方案</h3><ol><li>Cache Aside：缓存调用者在更新数据库的同时完成对缓存的更新（推荐）</li><li>Read/Write Through：缓存与数据库集成为一个服务，服务保证两者的一致性，对外暴露API接口，调用者调用API，无需知道自己操作的是数据库还是缓存，不关心一致性</li><li>Write Back：缓存调用者的CRUD都针对缓存完成，由独立线程异步的将缓存数据写到数据库，实现最终一致</li></ol><h4 id="Cache-Aside的模式选择"><a href="#Cache-Aside的模式选择" class="headerlink" title="Cache Aside的模式选择"></a>Cache Aside的模式选择</h4><ol><li><p>更新缓存还是删除缓存？</p><p>更新缓存会产生许多无效的更新操作，而且更新操作还有很大的线程安全问题</p><p>所有我们一般选择在数据库变动的同时删除缓存，当用户需要查询的时候再重建缓存，这样及避免了不必要的操作，还保证了线程安全</p></li><li><p>先操作数据库还是缓存？</p><p>推荐先更新数据，再删除缓存，在满足原子性的情况下，安全问题概率较低</p></li><li><p>如何确保数据库与缓存操作的原子性？</p><p>单体系统利用事务机制，分布式系统利用分布式事务机制</p></li></ol><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>当缓存与数据库中都没有相关数据时，请求一直请求查询数据库，导致缓存的作用失效，数据库压力大大增加。</p><p>解决方法：</p><ol><li>当缓存和数据库中都未查询到数据时，在缓存中写入一个有过期时间的空对象，当下次请求再次进去时，直接返回缓存中的空对象，防止请求再次进入到数据库中，缺点就是在空对象未过期的那段时间内，数据缺乏一致性，而且缓存的空对象也会导致额外的内存消耗</li><li>通过布隆过滤算法判断对象是否存在，布隆过滤算法中存放的已有对象的Hash值，当对象存在的时候放行，对象不存在的时候直接返回，缺点就是布隆过滤算法存在一定的误差，以及实现起来比较复杂</li><li>还可以通过做好数据的基础格式的校验，加强用户权限校验以及做好热点参数的限流</li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>当突然大部分的缓存Key过期时，或者Redis的崩溃，导致有大量的请求直接打到数据库，使数据库压力陡增甚至宕机</p><p>解决方法：</p><ol><li>为缓存的key设置随机数，防止出现突然大量的key消失的情况</li><li>对Redis进行主从分布式集群，防止Redis宕机导致缓存雪崩</li><li>给缓存业务添加降级限流策略</li><li> 给业务添加多级缓存，当一个缓存崩盘时，还可以通过另一个服务进行缓存提供</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>又称热点Key问题，当一个缓存key使用频繁而且重建周期较长的情况下，当缓存还未重建成功时，大量请求都在申请重建缓存，导致数据库压力陡增</p><p>解决方法：</p><ol><li>互斥锁：给重建的线程添加锁，只允许一个线程进行缓存重建，其他线程则等待缓存重建，这样的优点是保证了数据的一致性，但是牺牲了用户的体验，同时还存在死锁的风险</li><li>逻辑过期：当一个用户申请缓存重建后，该用户开辟一个独立线程去完成缓存重建的任务，然后在缓存未完成之前，该用户和其他用户先获取旧数据，直到缓存重建完成，这样做的优点是不需要用户等待缓存重建，但是牺牲了数据一致性</li></ol><h2 id="缓存工具类"><a href="#缓存工具类" class="headerlink" title="缓存工具类"></a>缓存工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.CACHE_NULL_TTL;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 存储Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 存储值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 过期时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 存储Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 存储值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 过期时间单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 设置逻辑过期</span></span><br><span class="line">        RedisData redisData = <span class="keyword">new</span> RedisData();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        <span class="comment">// 写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix 缓存Key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 缓存ID（同时也是缓存的后缀）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbFallback 数据库查询方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 过期实践单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 类的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;ID&gt; 不同ID的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;R&gt; 返回指定类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; <span class="function">R <span class="title">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallback, Long time, TimeUnit unit)</span></span>&#123;</span><br><span class="line">        String key = keyPrefix + id;</span><br><span class="line">        <span class="comment">// 从redis查询缓存</span></span><br><span class="line">        String json = stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json))&#123;</span><br><span class="line">            <span class="comment">// 直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否为空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在，根据id查询数据库</span></span><br><span class="line">        R r = dbFallback.apply(id);</span><br><span class="line">        <span class="comment">// 数据库不存在返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//将空值写入Redis，解决缓存穿透</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">//返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在,写入Redis</span></span><br><span class="line">        <span class="keyword">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix 缓存Key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 缓存ID（同时也是缓存的后缀）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbFallback 数据库查询方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 过期实践单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 类的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;ID&gt; 不同ID的泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;R&gt; 返回指定类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; <span class="function">R <span class="title">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallback, Long time, TimeUnit unit)</span></span>&#123;</span><br><span class="line">        String key = keyPrefix + id;</span><br><span class="line">        <span class="comment">// 从redis查询缓存</span></span><br><span class="line">        String json = stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json))&#123;</span><br><span class="line">            <span class="comment">// 直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 命中，需要先报json反序列化为对象</span></span><br><span class="line">        RedisData redisData = JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        R r = JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">        LocalDateTime expireTime = redisData.getExpireTime();</span><br><span class="line">        <span class="comment">// 判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="comment">// 魏国器直接返回信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">// 获取互斥锁</span></span><br><span class="line">        String lockKey = keyPrefix + id;</span><br><span class="line">        <span class="keyword">boolean</span> isLock = tryLock(lockKey);</span><br><span class="line">        <span class="comment">//判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">            <span class="comment">// 成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//查询数据库</span></span><br><span class="line">                    R r1 = dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 写入Redis</span></span><br><span class="line">                    <span class="keyword">this</span>.setWithLogicalExpire(key, id, time, unit);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在,写入Redis</span></span><br><span class="line">        <span class="keyword">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span> , TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isFalse(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h1><h2 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h2><h3 id="全局ID生成器"><a href="#全局ID生成器" class="headerlink" title="全局ID生成器"></a>全局ID生成器</h3><p>在分布式系统下用来生成全局唯一ID的工具，一般满足下列特性：</p><ul><li>唯一性</li><li>高可用</li><li>高性能</li><li>递增性</li><li>安全性</li></ul><p>本项目采用的全局ID生成规则</p><p>​    （Redis）64位：1bit 符号位—–31bit 时间戳—–32bit序列号</p><p>​    参考：（雪花算法）64位： 1bit符号位—–41bit时间戳—–5bit机器编号—–5bit服务编号—–12序列号</p><p>雪花算法<strong>优点</strong>：</p><ul><li><p>高并发分布式环境下生成不重复 id，每秒可生成百万个不重复 id。</p></li><li><p>基于时间戳，以及同一时间戳下序列号自增，基本保证 id 有序递增。</p></li><li><p>不依赖第三方库或者中间件。</p></li><li><p>算法简单，在内存中进行，效率高。</p></li></ul><p>雪花算法<strong>缺点</strong>：</p><p>​    依赖服务器时间，<strong>服务器时钟回拨</strong>时可能会生成重复 id。算法中可通过记录最后一个生成 id 时的时间戳来解决，每次生成 id 之前比较当前服务器时钟是否被回拨，避免生成重复 id。</p><p><strong>服务器时钟回拨问题</strong></p><p>在获取时间的时候，可能会出现<code>时间回拨</code>的问题，什么是时间回拨问题呢？就是服务器上的时间突然倒退到之前的时间。</p><ol><li>人为原因，把系统环境的时间改了。</li><li>有时候不同的机器上需要同步时间，可能不同机器之间存在误差，那么可能会出现时间回拨问题。</li></ol><p>时钟回拨解决方案：</p><ol><li> 回拨时间小的时候，不生成 ID，循环等待到时间点到达。</li><li> 上面的方案只适合时钟回拨较小的，如果间隔过大，阻塞等待，肯定是不可取的，因此要么超过一定大小的回拨直接报错，拒绝服务，或者有一种方案是利用拓展位，回拨之后在拓展位上加1就可以了，这样ID依然可以保持唯一。但是这个要求我们提前预留出位数，要么从机器id中，要么从序列号中，腾出一定的位，在时间回拨的时候，这个位置 <code>+1</code>。</li></ol><h2 id="秒杀券超卖问题"><a href="#秒杀券超卖问题" class="headerlink" title="秒杀券超卖问题"></a>秒杀券超卖问题</h2><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>在优惠券的秒杀场景下，当多个线程同时秒杀时，会出现多个线程同时秒杀一张优惠券的情况，导致优惠券出现超卖的问题</p><p><img src="/2022/07/01/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20220806162002078.png" alt="image-20220806162002078"></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p><strong>乐观锁：</strong></p><p>认为线程安全问题不一定会发生，因此不加锁，只是在更新数据的时候去判断有没有其他线程对数据做了修改。</p><p>如果没有修改则认为是安全的，自己才会更新数据，如果数据被其他线程修改说明发生了安全问题，此时可以重试或者抛出异常</p><p><strong>悲观锁：</strong></p><p>认为线程安全问题一定会发生，因此在操作数据之前先获取锁，确保线程串行执行。</p><p>例如Synchronized、Lock都属于悲观锁</p><p><strong>CAS法：</strong></p><p>CAS也是乐观锁的一种实现方式，目的是在修改数据库是判断锁修改的字段是否与查询时的一样，而不通过版本号来控制，但是这样可能会出现ABA的情况，需ABA是否会影响具体业务</p><p><strong>乐观锁存在的问题：</strong></p><p>在写操作很多时，很存在很多需要重试的操作，数据库的压力大大增加，对于库存的问题，可以允许多线程一起修改，但是要确保在修改数据库时，数据库的库存处于正常范围。</p><h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><p>由于有些优惠力度很大的优惠券，商家为了吸引客户才发放这类优惠券，所以在业务上限制一人一单。</p><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><ol><li><p>通过数据查询优惠券ID和用户ID，保证订单表中，只存在一个用户购买一个优惠券的情况，但是该方法类似于超卖的情况，会存在多线程安全问题。所有下买采用悲观锁的方式去控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//同步代码块,通过userID来控制锁</span><br><span class="line">//因为toStirng()方法每次都会创建一个新的字符串对象，</span><br><span class="line">//所以这个锁其实是不起作用的，但是可以加上intern()方法</span><br><span class="line">//intern()方法每次都会查询值相同的对象，来解决一个ID产生多个不同对象的问题</span><br><span class="line">synchronized(userId.toString().intern())&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.&lt;/p&gt;
&lt;p&gt;此处选择的Linux版本为CentOS 7.&lt;/p&gt;
&lt;p&gt;Redis的官方网站地址：&lt;a href=&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>发送GET和POST请求调用远程接口</title>
    <link href="http://example.com/2022/04/08/%E5%8F%91%E9%80%81GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2022/04/08/%E5%8F%91%E9%80%81GET%E5%92%8CPOST%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-04-08T06:09:39.000Z</published>
    <updated>2022-04-08T06:56:50.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p>通过调用远程登录接口获取cookie或者token；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * - 调用登录接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回Cookie</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String Cookie = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        HttpClientContext context = HttpClientContext.create();</span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(URL+<span class="string">&quot;/auth/login.do&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        List&lt;BasicNameValuePair&gt; list = <span class="keyword">new</span> ArrayList&lt;BasicNameValuePair&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;deleteflag&quot;</span>, <span class="string">&quot;0&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;alwaysLogin&quot;</span>, <span class="string">&quot;true&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;username&quot;</span>, USERNAME));</span><br><span class="line">        list.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">&quot;password&quot;</span>, PASSWORD));</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(list, HTTP.UTF_8));</span><br><span class="line">            CloseableHttpResponse httpResponse = httpClient.execute(httpPost, context);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != httpResponse) &#123;</span><br><span class="line">                HttpEntity httpEntity = httpResponse.getEntity();</span><br><span class="line">                JSONObject returnData = JSON.parseObject(EntityUtils.toString(httpEntity));</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != returnData) &#123;</span><br><span class="line">                    Cookie = returnData.getJSONObject(<span class="string">&quot;data&quot;</span>).getString(<span class="string">&quot;cloudToken&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;JSESSIONID=&quot;</span>+Cookie;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;登录失败&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="调用post远程接口"><a href="#调用post远程接口" class="headerlink" title="调用post远程接口"></a>调用post远程接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用POST方法传Json格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 接口地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> JSONObject&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">doPostAll</span><span class="params">(String url, String projectId)</span> </span>&#123;</span><br><span class="line">        String Cookie = hoLogin();</span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        </span><br><span class="line">        JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        params.put(<span class="string">&quot;isCount&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        params.put(<span class="string">&quot;projectId&quot;</span>, projectId);</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StringEntity string = <span class="keyword">new</span> StringEntity(params.toString(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            string.setContentEncoding(<span class="keyword">new</span> BasicHeader(HTTP.CONTENT_TYPE, <span class="string">&quot;application/json&quot;</span>));</span><br><span class="line">            post.setEntity(string);</span><br><span class="line">            post.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            post.setHeader(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)&quot;</span>);</span><br><span class="line">            post.addHeader(<span class="string">&quot;Cookie&quot;</span>,Cookie);</span><br><span class="line">            HttpResponse httpResponse = HttpClientUtil.getHttpClient().execute(post);</span><br><span class="line">            HttpEntity entity = httpResponse.getEntity();</span><br><span class="line">            result = JSONObject.parseObject(EntityUtils.toString(entity, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="调用Get远程接口"><a href="#调用Get远程接口" class="headerlink" title="调用Get远程接口"></a>调用Get远程接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用Get远程接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Id ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> JSONObject&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException ioexception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title">doGetTree</span><span class="params">(String Id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String Cookie = Login();</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(URL+<span class="string">&quot;/query&quot;</span>);</span><br><span class="line">        httpGet.addHeader(<span class="string">&quot;Cookie&quot;</span>,Cookie);</span><br><span class="line">        CloseableHttpResponse httpResponse = httpClient.execute(httpGet);</span><br><span class="line">        HttpEntity entity = httpResponse.getEntity();</span><br><span class="line">        JSONObject result = JSONObject.parseObject(EntityUtils.toString(entity, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h1&gt;&lt;p&gt;通过调用远程登录接口获取cookie或者token；&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="代码清单" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E6%B8%85%E5%8D%95/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>亲密关系</title>
    <link href="http://example.com/2022/04/05/%E3%80%8A%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB%E3%80%8B/"/>
    <id>http://example.com/2022/04/05/%E3%80%8A%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB%E3%80%8B/</id>
    <published>2022-04-05T12:45:00.000Z</published>
    <updated>2022-04-05T12:49:55.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《亲密关系》"><a href="#《亲密关系》" class="headerlink" title="《亲密关系》"></a>《亲密关系》</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    这本书是加拿大的作家克里斯多福·孟老师编写，张德芬和余蕙玲两位老师翻译的，整本书主要讲述的就是关于人们生活中的亲密关系，这其中的亲密关系不仅包括伴侣、父母、兄弟姐妹，更是挚友、闺蜜、兄弟，甚至是同事，通过拷问自己的内心来找到亲密关系的真正的意义，这也是我读这本书的目的。</p><p>​    这本书我是在22岁这个时间节点开始看的，但是我认为这会是一本让我终生受益的书，这时的我处于青年与成年的交界处，一直在学校上课读书，生活中的关系最多的也是同学与老师的关系，有过恋人的关系，但是最久的也只是持续了一年，但是我深知我在过去的二十二年间，对于这些亲密关系一直处于搁置的状态，并没有全身心，负责任的去看待这个在我们人生中并不可轻视的关系，恰逢这个时间点，我也遇到了一个能寻找真正的灵魂伴侣的机会，这次的机会我觉得我一定能把握住，而且我的年纪逐渐成长，父母的容颜也开始逐渐凋零，他们曾经花费了自己大半辈子的时光来照料我们，我们更应懂得回报，懂得感恩。</p><p>​    这本书我已经看了大半本了，我也深刻的认为这本书也许会一直陪伴着我，不断的内省与反思。</p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>​    感觉的重要性：作为一个情感成熟的人，我们应该突破感到害怕、罪恶以及耻辱的保护机制，正视并深切的感受我们的感觉。</p><p>​    责任的重要性：责怪、批评与指责是人类防御机制的关键要素，遇到痛苦与责难，我们通常会选择批评责怪他人，这样就可以将痛苦转移到他人的身上，而且这种方式想要做到轻而易举，但是这会使我们亲密关系的人离我们越来越远，最终也只会加强自己的受害者意识。</p><p>​    一段关系的目的不是给予与接受彼此的爱，而是帮助你了解你自己就是一直以来所寻找的爱。</p><p>​    伴侣的目的：你的伴侣不是你的爱与幸福的来源，满足你的期待与使你开心不是他们的职责，但是你的伴侣的确在你的生活中扮演者三个重要的角色，尤其是在面对情感上的成熟与唤醒真实自我的时候。</p><ul><li>一面镜子：让你看见引发你关注的不舒服感</li><li>一名老师：在你探寻真实自我的时候，激励与启发你</li><li>一名玩伴：开启并陪伴你一段生命的旅程</li></ul><h2 id="第一章：亲密关系的圣杯"><a href="#第一章：亲密关系的圣杯" class="headerlink" title="第一章：亲密关系的圣杯"></a>第一章：亲密关系的圣杯</h2><p>​    在亲密关系中，痛苦浮现是件好事</p><h3 id="灵魂关系"><a href="#灵魂关系" class="headerlink" title="灵魂关系"></a>灵魂关系</h3><p>​    我们很多人想要亲密关系，并且需要的不只是慰籍与陪伴，而是需要灵魂关系：</p><ul><li>能鼓励我们超越自我的伴侣</li><li>能激发人生意义与方向，并在我们收到考验时，给予我们帮助的人际关系</li></ul><p>​    但从“灵魂关系”得到的真爱不能被局限在两人之间，而是推及整个世界</p><h3 id="真正的爱？"><a href="#真正的爱？" class="headerlink" title="真正的爱？"></a>真正的爱？</h3><p>​    许多人把需求和感觉当作爱；</p><p>​    许多人相信争吵时一定有一方对，一方错；</p><p>​    许多人经常想操纵或控制另一半；</p><h2 id="第二章：月晕现象"><a href="#第二章：月晕现象" class="headerlink" title="第二章：月晕现象"></a>第二章：月晕现象</h2><p>​    作者用这个词代表不实的光彩，使人分心而看不到真正的光源。与情人眼中出西施一样。</p><h3 id="情感之旅"><a href="#情感之旅" class="headerlink" title="情感之旅"></a>情感之旅</h3><p>​    “坠入情网的，谁不是一见钟情？” ——克里斯多福·马洛</p><p>​    这是亲密关系的第一个阶段，这一段时光是最美好的，以至于很多人都认为这就是真爱。</p><p>​    有些人确实能找到真命天子，且努力维持着初识时的热情之火，更有甚者，纯粹为了恋爱而恋爱，一生中不断寻找能让我们热情不灭的特殊人物，而当热情熄灭的时候便转而寻找下一个可能目标。</p><p>​    亲密关系的过程，一开始是互相吸引，然后一步步发展出浪漫的火花，人一旦坠入情网，难免会有过高的期望，以致最后掉入幻灭的深渊。</p><p>​    我相信恐惧与无知是造就所谓的“亲密关系失败”的两大原因</p><p>​    越了解隐藏的陷阱，我们就越不会被无知所控制</p><h3 id="吸引磁场"><a href="#吸引磁场" class="headerlink" title="吸引磁场"></a>吸引磁场</h3><p>​    开始和维持一段亲密关系背后的真正动机，其实在于需求</p><p>​    孩童的两大主要需求是归属感和确认自己的重要性</p><p>​    “想要变得特别”的欲望，正是激发我们浪漫情怀的主因</p><p>​    想要有重要性、有价值、有用、被赞赏、别接受等欲望，全都衍生自想当特别的人的需求</p><p>​    每当我一想到心上人，心就会狂跳，而且乐观的展望未来，一开始我并没有察觉，其实，这种美好的感觉的真正原因，是因为我意识到需求即将得到满足</p><p>​    人们在吸引他人时，会去假装自己所缺乏的特质，这也是月晕现象的一部分原因</p><h3 id="制造梦想的机器"><a href="#制造梦想的机器" class="headerlink" title="制造梦想的机器"></a>制造梦想的机器</h3><p>​    孩童时期，需求没有被满足时，就会出现失落，为了弥补这些不足，我们就会在内心创造一个幻想的世界，让自己成为英雄。</p><p>​    随着我们长大，这个制造梦想的机器也随之成长，当我们开始需要伴侣时，我们便在心中描画出一个梦中情人</p><p>​    随着违背满足的需求不断增加，梦中情人的蓝图自然就会变得越来越复杂</p><p>​    我们或许还会执着于这个梦中情人的形象，以至于一段时间，我们都选择等待梦中情人的出现</p><p>​    很快我们就发现，这样拖下去是不会有结果的，但是我们又无法降低标准，和比不上梦中情人的人交往</p><p>​    所以大多数人会选择一个最符合条件的候选人，然后进行改造计划，让他变得和我的梦中情人一样</p><p>​    这种修饰或彻底改变伴侣的企图，很快就会让我们走上通往地狱的路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《亲密关系》&quot;&gt;&lt;a href=&quot;#《亲密关系》&quot; class=&quot;headerlink&quot; title=&quot;《亲密关系》&quot;&gt;&lt;/a&gt;《亲密关系》&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="读后感" scheme="http://example.com/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
    
    <category term="书籍" scheme="http://example.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>读书摘录</title>
    <link href="http://example.com/2022/02/11/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95/"/>
    <id>http://example.com/2022/02/11/%E8%AF%BB%E4%B9%A6%E6%91%98%E5%BD%95/</id>
    <published>2022-02-11T01:31:38.000Z</published>
    <updated>2022-02-11T01:52:39.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h1><p>对于不可控的事情，我们要保持乐观；对于可控的事情，我们要保持谨慎。  —爱比克泰德</p><p>我们登上并非我们选择的舞台,演出并非我们选择的剧本。 —爱比克泰德</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;摘录&quot;&gt;&lt;a href=&quot;#摘录&quot; class=&quot;headerlink&quot; title=&quot;摘录&quot;&gt;&lt;/a&gt;摘录&lt;/h1&gt;&lt;p&gt;对于不可控的事情，我们要保持乐观；对于可控的事情，我们要保持谨慎。  —爱比克泰德&lt;/p&gt;
&lt;p&gt;我们登上并非我们选择的舞台,演出并非我们选</summary>
      
    
    
    
    <category term="读书" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="读书" scheme="http://example.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Buteerfly主题集成Valine评论</title>
    <link href="http://example.com/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/"/>
    <id>http://example.com/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/</id>
    <published>2022-02-10T09:26:37.000Z</published>
    <updated>2022-02-10T10:06:37.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo的Buteerfly主题集成Valine评论"><a href="#Hexo的Buteerfly主题集成Valine评论" class="headerlink" title="Hexo的Buteerfly主题集成Valine评论"></a>Hexo的Buteerfly主题集成Valine评论</h1><p>​    这次主要是为我的博客集成评论系统，方便技术交流，但是hexo博客未自带评论系统，有些主题自带了评论系统，但是Butterfly主题并没有，需要自己配置，用这篇博文记录一下。</p><p>​    <a href="https://valine.js.org/">Valine</a>官网有一些关于配置的介绍也可以去看看</p><p>​    <a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly配置文档</a>中也有关于评论系统的一些配置和配置文件中各个参数的介绍</p><p>在所有的评论系统中，Valine是唯一一个无后端的评论系统，方便易用，但是是基于leancloud的，所以我们需要去注册一个LeanCloud的账号</p><p><a href="https://console.leancloud.cn/register">LeanCloud 注册点这里</a></p><ul><li>Github大礼包：<a href="https://github.com/iissnan/hexo-theme-next/issues/1604">gitment</a>， <a href="https://github.com/iissnan/hexo-theme-next/pull/2037">gitalk</a><strong>（推荐），</strong><a href="https://www.vincentqin.tech/2016/08/09/build-a-website-using-hexo/#%E5%A2%9E%E5%8A%A0Gitter">gitter</a><strong>（推荐）;</strong> 三个都支持<strong>Markdown；</strong></li><li>基于leancloud的无后端评论系统：<a href="https://valine.js.org/#/">Valine</a><strong>（推荐，</strong>支持<strong>Markdown）；</strong></li><li>国外的有几个：<a href="http://www.disqus.com/">disqus</a>(漂亮，但需翻墙)，<a href="https://www.hypercomments.com/">hypercomments</a><strong>（推荐，</strong>不支持<strong>Markdown）.</strong></li></ul><ol><li><p>注册完了之后，我们还需要创建一个应用，应用名称随意。<img src="/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/image-20220210174752744.png" alt="image-20220210174752744"></p></li><li><p>然后点进去应用找到结构化数据，创建一个新的Class，名为Comment，之后的评论数据会保存在这里面。<img src="/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/image-20220210175132766.png" alt="image-20220210175132766"></p></li><li><p>然后在设置中找到安全中心，设置服务开关为数据存储（防止恶意攻击），再将自己的域名保存到Web安全域名中<img src="/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/image-20220210175418269.png" alt="image-20220210175418269"></p></li><li><p>再在设置中找到应用凭证，将其中的AppID和AppKey保存到主题目录下的_config.yml<img src="/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/image-20220210175805940.png" alt="image-20220210175805940"></p></li><li><p>继续在主题目录下的_config.yml中设置Comments参数<img src="/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/image-20220210175954025.png" alt="image-20220210175954025"></p></li><li><p>再将hexo c 和 hexo s一下就行了，测试效果如下：<img src="/2022/02/10/Hexo%E7%9A%84Buteerfly%E4%B8%BB%E9%A2%98%E9%9B%86%E6%88%90Valine%E8%AF%84%E8%AE%BA/image-20220210180113957.png" alt="image-20220210180113957"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo的Buteerfly主题集成Valine评论&quot;&gt;&lt;a href=&quot;#Hexo的Buteerfly主题集成Valine评论&quot; class=&quot;headerlink&quot; title=&quot;Hexo的Buteerfly主题集成Valine评论&quot;&gt;&lt;/a&gt;Hexo的But</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="http://example.com/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>搭建阿里云ECS服务器</title>
    <link href="http://example.com/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-02-10T02:17:19.000Z</published>
    <updated>2022-02-10T07:16:11.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建阿里云ECS服务器"><a href="#搭建阿里云ECS服务器" class="headerlink" title="搭建阿里云ECS服务器"></a>搭建阿里云ECS服务器</h1><p>​    这次搭建阿里云服务器的主要原因是想在完成论文的项目时候，将自己的项目发布到服务器上，通过自己搭建服务器也可以更加深刻的理解计算机网络。</p><p>​    好了，现在就让我们一起搭建ECS服务器吧！</p><h2 id="第一步：购买服务器"><a href="#第一步：购买服务器" class="headerlink" title="第一步：购买服务器"></a>第一步：购买服务器</h2><p>​    在每年的春节中，阿里云服务器都有很大力度的折扣，新用户也都可以免费使用一个月的服务器，还是很划算的，根据自己的需要选购服务器就好了，我这边选择的是38元/年的ECS共享型 n4。</p><p><img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210103140758.png" alt="image-20220210103140758"></p><p>​    点击立即购买就可以在配置页面简单配置自己的服务器参数</p><p><img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210103805546.png" alt="image-20220210103805546"></p><p>操作系统我这边选择的是CentOS 7.9，系统盘在优惠的活动中最多选择到42GB</p><h2 id="第二步：配置服务器"><a href="#第二步：配置服务器" class="headerlink" title="第二步：配置服务器"></a>第二步：配置服务器</h2><p>​    购买完服务器后就可以在控制台看到自己的服务器实例</p><p><img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210104516594.png" alt="image-20220210104516594"></p><ol><li><p>点击实例的名称就可以查看服务器实例的详情<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210104831734.png" alt="image-20220210104831734"></p></li><li><p>先重置一下我们的实例密码，方便我们后续登录<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210104936867.png" alt="image-20220210104936867"></p></li><li><p>重置密码时，需要验证我们的手机号，重制完了之后重启一下服务器就重置成功了，然后再点击选择我们需要的安全组，不然服务器的未允许的端口无法访问<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210105251151.png" alt="image-20220210105251151"></p></li><li><p>根据自己的需要，选择安全组的端口范围，手动添加和快速添加都可以<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210105429728.png" alt="image-20220210105429728"></p></li><li><p>配置完这些之后就可以启动并远程链接服务器了<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210110009551.png" alt="image-20220210110009551"><img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210110037718.png" alt="image-20220210110037718"></p></li><li><p>点击立即登录后就是之前我们设置的管理员密码<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210110218017.png" alt="image-20220210110218017"></p></li><li><p>到这样的页面就说明远程连接成功<img src="/2022/02/10/%E6%90%AD%E5%BB%BA%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20220210110610914.png" alt="image-20220210110610914"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搭建阿里云ECS服务器&quot;&gt;&lt;a href=&quot;#搭建阿里云ECS服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建阿里云ECS服务器&quot;&gt;&lt;/a&gt;搭建阿里云ECS服务器&lt;/h1&gt;&lt;p&gt;​    这次搭建阿里云服务器的主要原因是想在完成论文的项目时候，将</summary>
      
    
    
    
    <category term="服务器" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="服务器" scheme="http://example.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java登录积分统计</title>
    <link href="http://example.com/2022/02/09/Java%E7%99%BB%E5%BD%95%E7%A7%AF%E5%88%86%E7%BB%9F%E8%AE%A1/"/>
    <id>http://example.com/2022/02/09/Java%E7%99%BB%E5%BD%95%E7%A7%AF%E5%88%86%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-02-09T09:36:36.000Z</published>
    <updated>2022-02-10T09:25:29.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA登录积分统计"><a href="#JAVA登录积分统计" class="headerlink" title="JAVA登录积分统计"></a>JAVA登录积分统计</h1><p>需求：</p><ol><li>系统按用户积分多少形成排行榜</li><li>用户登陆系统后，系统更具用户登录情况，进行后台统计，第一天登录积一分，连续登录第二天积两分，第三天以后每天累计三积分</li><li>如签到断开从第一天重新叠加，之前签到的累计积分不受影响，按步骤2的积分规则重新叠加。</li></ol><p>关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLogin</span><span class="params">(String ID)</span> </span>&#123;</span><br><span class="line">        Query query = Query.from(LoginPointsModel.META_ID);</span><br><span class="line">        query.and(Condition.eq(LoginPointsModel.USER_ID, ID));</span><br><span class="line">        <span class="comment">//查询数据库中当前登录用户的存在情况</span></span><br><span class="line">        LoginPointsModel loginPointsModel= <span class="keyword">this</span>.queryOne(query);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用户数据库记录为空 初始化操作</span></span><br><span class="line">            <span class="keyword">if</span> (loginPointsModel == <span class="keyword">null</span>)&#123;</span><br><span class="line">                LoginPointsModel loginPointsModel1 = <span class="keyword">new</span> LoginPointsModel();</span><br><span class="line">                loginPointsModel1.setId(UUID.randomUUID().toString());</span><br><span class="line">                loginPointsModel1.setUser_id(ID);</span><br><span class="line">                loginPointsModel1.setLogin_flag(LoginStatus.First_Login.getKey());</span><br><span class="line">                loginPointsModel1.setLogin_sum(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                loginPointsModel1.setIntegral_sum(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                UpdateInfoUtil.setUpdateInfo(loginPointsModel1);</span><br><span class="line">                UpdateInfoUtil.setCreateInfo(loginPointsModel1);</span><br><span class="line">                loginPointsModel1.setFk_dept(roleUtil.getRoleByUserId(ID).getNickname());</span><br><span class="line">                <span class="comment">//上次登录时间初始化为当前时间的时间戳形式</span></span><br><span class="line">                loginPointsModel1.setLast_login_time(SyncPlanUtil.getTimestamp());</span><br><span class="line">                <span class="keyword">this</span>.save(loginPointsModel1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前用户存在数据库中 进行积分累计</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//获取当前时间戳与数据库中的上次时间戳相减</span></span><br><span class="line">                String nowTime = SyncPlanUtil.getTimestamp();</span><br><span class="line">                BigDecimal now = <span class="keyword">new</span> BigDecimal(nowTime);</span><br><span class="line">                BigDecimal diff = now.subtract(<span class="keyword">new</span> BigDecimal(String.valueOf(loginPointsModel.getLast_login_time())));</span><br><span class="line">                <span class="keyword">int</span> diff_int = diff.intValue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//当当前登录时间与上次登录时间对比小于一天时，不做任何处理</span></span><br><span class="line">                <span class="keyword">if</span> (diff_int &lt; <span class="number">1000000</span>)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//当当前登录时间与上次登录时间对比大于一天但是小于两天时，即连续登录，登录标记增加</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (diff_int &gt; <span class="number">1000000</span> &amp;&amp; diff_int &lt; <span class="number">2000000</span>)&#123;</span><br><span class="line">                    <span class="keyword">switch</span> (loginPointsModel.getLogin_flag())&#123;</span><br><span class="line">                        <span class="comment">//登录标记为第一天登录时</span></span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> :</span><br><span class="line">                            loginPointsModel.setLogin_flag(LoginStatus.Second_Login.getKey());</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">//登录标记为第二天登录时</span></span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> :</span><br><span class="line">                            loginPointsModel.setLogin_flag(LoginStatus.Third_Login.getKey());</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">//登录标记为第三天登录时,积分标记封顶不变</span></span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&quot;3&quot;</span> :</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当当前登录时间与上次登录时间对比大于两天时，登录标记重置为First_Login</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    loginPointsModel.setLogin_flag(LoginStatus.First_Login.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//integral_Sum:积分总量</span></span><br><span class="line">                BigDecimal integral_Sum = <span class="keyword">new</span> BigDecimal(String.valueOf(loginPointsModel.getIntegral_sum()));</span><br><span class="line">                integral_Sum = integral_Sum.add(<span class="keyword">new</span> BigDecimal(String.valueOf(loginPointsModel.getLogin_flag())));</span><br><span class="line">                <span class="comment">//login_Sum:登录天数总和   登录天数+1</span></span><br><span class="line">                BigDecimal login_Sum = <span class="keyword">new</span> BigDecimal(String.valueOf(loginPointsModel.getLogin_sum()));</span><br><span class="line">                login_Sum = login_Sum.add(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>));</span><br><span class="line">                <span class="comment">//数据更新</span></span><br><span class="line">                loginPointsModel.setIntegral_sum(String.valueOf(integral_Sum));</span><br><span class="line">                loginPointsModel.setLogin_sum(String.valueOf(login_Sum));</span><br><span class="line">                loginPointsModel.setLast_login_time(nowTime);</span><br><span class="line">                UpdateInfoUtil.setUpdateInfo(loginPointsModel);</span><br><span class="line">                <span class="keyword">this</span>.update(loginPointsModel);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JAVA登录积分统计&quot;&gt;&lt;a href=&quot;#JAVA登录积分统计&quot; class=&quot;headerlink&quot; title=&quot;JAVA登录积分统计&quot;&gt;&lt;/a&gt;JAVA登录积分统计&lt;/h1&gt;&lt;p&gt;需求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;系统按用户积分多少形成排行榜&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="Java后端" scheme="http://example.com/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="工作记录" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JVM笔记</title>
    <link href="http://example.com/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-27T03:28:15.000Z</published>
    <updated>2022-02-15T03:37:40.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解Java虚拟机"><a href="#深入理解Java虚拟机" class="headerlink" title="深入理解Java虚拟机"></a>深入理解Java虚拟机</h1><p>​    本笔记来自《深入理解Java虚拟机：JVM高级特性与最佳实践（第3版）——周志明》</p><h1 id="第一章-走进Java"><a href="#第一章-走进Java" class="headerlink" title="第一章 走进Java"></a>第一章 走进Java</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    学习Java要带着热情去了解和思考Java技术体系中的这些优秀的技术特性是如何出现及怎样实现的，认识这些技术的本质是思考“程序这样写好不好”的必要基础与前提</p><h2 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h2><p>​    传统意义上，JCP（Java Communit Process）即Java社区所定义的Java技术体系包括了以下几个组成部分：</p><ul><li><p>Java程序设计语言</p></li><li><p>各种硬件平台上的Java虚拟机实现</p></li><li><p>Class文件格式</p></li><li><p>Java类库API</p></li><li><p>来自商业机构和开源社区的第三方Java类库</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220127140731455.png" alt="image-20220127140731455"></p></li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>​    我们可以把Java程序设计语言，Java虚拟机、Java类库者三部分统称为JDK（Java Development Kit），JDK是用于支持Java程序开发的最小环境。</p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>​    Java类库API中的Java SE API子集和Java虚拟机这两部分统称为JRE，JRE是支持Java程序运行的标准环境</p><h3 id="Java技术体系产品线"><a href="#Java技术体系产品线" class="headerlink" title="Java技术体系产品线"></a>Java技术体系产品线</h3><ul><li>Java Card：支持Java小程序（Applets）运行在小内存设备（如智能卡）上的平台</li><li>Java ME（Micro Edition）：支持Java程序运行在移动终端（手机、PDA）上的平台，对Java API有所精简，并加入移动终端的针对性支持，这条产品线在JDK6以前被称为J2ME。但是目前在智能手机上非常流行的、主要使用Java语言开发程序的Android并不属于Java ME。</li><li>Java SE（Standard Edition）：支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java核心API，这条产品线在JDK6以前被称为J2SE</li><li>Java EE（Enterprise Edition）：支持使用多层架构的企业级应用（ERP、MIS、CRM应用）的Java平台，除了提供Java SE API外，还对其做了大量由针对性的扩充，并提供相关的部署支持，这条产品线在JDK6以前被称为J2EE，在JDK10以后被Oracle放弃，捐赠给Eclipse基金会管理，此后被称为Jakarta EE。</li></ul><h1 id="第二章-Java内存区域与内存溢出异常"><a href="#第二章-Java内存区域与内存溢出异常" class="headerlink" title="第二章 Java内存区域与内存溢出异常"></a>第二章 Java内存区域与内存溢出异常</h1><p>​    Java与C++之前有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。</p><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220127144103493.png" alt="image-20220127144103493"></p><p>​    Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而一直存在，有些区域则是依赖用户进程的启动和结束而建立和销毁。</p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>​    程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在Java虚拟机的概念模型中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互补影响，独立存储，我们这类内存区域为“线程私有”的内存。</p><p>如果线程在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地方法，这个计数器值则应为空（Undefined）。此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>​    Java虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每个方法被调用直至执行完毕的过程，就对应者一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>​    我们所说的“栈”通常就是这里讲的虚拟机栈，或者更多的情况下只是指虚拟机中局部变量表部分。局部变量表存放了编译期可知的各种Java虚拟机<strong>基本数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型,它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和<strong>returnAddress类型</strong>（指向了一条字节码指令的地址）。</p><p>​    这些数据类型在局部变量表中的存储空间以局部变量槽（Slot）来表示，其中64位长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个。局部变量表所需的内存在编译期间完成分配，当进入一个方法时，这个方法需要的栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表中的大小。这里的“大小”是指变量槽的数量，虚拟机真正使用多大的内存空间来实现一个变量槽，这是完全由具体的虚拟机实现自行决定的事情。</p><p>​    这个内存区域规定了两类异常状况：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常</li><li>如果虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈发挥的作用是一样的，其区别只是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>​    对于Java应用程序来说，Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java世界里<strong>几乎</strong>（即使编译技术的进步，尤其是逃逸分析技术的日渐强大，栈上分配、标量替换优化手段已经让这个概念不再绝对）所有的对象实例都在这里分配内存。</p><p>​    根据《Java虚拟机规范》的规定，Java堆可以处于物理上的不连续的内存空间中，但在逻辑上它应该被是为连续的，这点就想我们用磁盘空间去存储文件一样，并不要求每个文件都连续存放，但对于大对象（典型的如数组对象），多数虚拟机实现出于实现简单、存储高效的考虑，很可能会要求连续的内存空间。</p><p>​    Java堆可以被实现成固定大小的，也可以是拓展的，不过当前主流的Java虚拟机都是按照可拓展来实现的（通过参数-Xmx和-Xms设定）。如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出OutOfMemoryError异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>​    方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><p>​    《Java虚拟机规范》对方法去的约束是飞创宽松的，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可拓展外，甚至还可以选择不实现垃圾收集。相对而言，垃圾收集行为再这个区域的确是比较少出现的，但是并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。</p><p>​    如果方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>​    运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constans Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法去的运行时常量池中</p><p>​    Java虚拟机对于Class文件的每一部分（包括常量池）的格式都有严格的规定，如每一个字节用于存储那种数据都必须符合规范上的要求才会被虚拟机认可、加载和执行，但是对于运行时常量池，《Java虚拟机规范》并没有做任何细节的要求。</p><p>​    运行时常量池相对于Class文件常量池的另一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，运行期间也可以将新的常量放入池中，这种特性利用的较多的是String类的intren（）方法。</p><p>​    当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>​    直接内存（Direct Memory）并不是虚拟机运行是数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁使用，而且也可能导致OutOfMemoryError异常出现。</p><p>​    本机的直接内存的分配不会受到Java堆大小的限制，但是受到本机总内存（包括物理内存、SWAP分区或者分页文件）大小以及处理器寻址空间的限制，一般配置服务器的虚拟机参数时，会根据实际内存去设置-Xms等参数信息，但是经常忽略直接内存，使得各个内存区域的总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p><h2 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>此次仅讨论一下Java虚拟机中普通Java对象的创建过程</p><ol><li>首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有那就必须执行相应的类加载过程。</li><li>接下来虚拟机将为新生对象分配内存。对象所需的内存的大小在类加载完成后便可完全确定。<ul><li>假设Java堆中的内存是绝对规整的，所有被使用过的内存和空闲的内存分开放，中间用一个指针作为分界点的指示器，那么分配的内存就是把指针向空闲空间方向挪动一段和对象大小相等的距离，这种分配方式被称为“指针碰撞”（Bump The Pointer）</li><li>如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，虚拟机就必须维护一个列表，记录在哪个内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录。这种分配方式被称为“空闲列表”（Free List）</li></ul></li><li>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定，因此，当使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效；而当使用CMS这种基于清除（Sweep）算法的收集器时，理论上就只能采用较为复杂的空闲列表来分配内存。</li><li>但是并发情况下对象的创建并不是线程安全的，解决这个问题有两种可选方案：<ul><li>对分配内存空间的动作进行同步处理——实际上虚拟机时采用CAS配上失败重试的方式保证更新操作的原子性</li></ul></li></ol><p>另一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓存（Thread Local Allocation Buffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓冲区时才需要同步锁定。虚拟机是否使用TLAB，可以通过-XX：+/-UseTLAB参数来设定。</p><p>​    内存分配完成之后，虚拟机必须分配到的内存空间（但不包括对象头）都初始化为零值，如果使用TLAB的话，TLAB分配时就顺便进行了。这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。</p><p>​    接下来，Java虚拟机还要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到这个类的元数据信息、对象的哈希码（在调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息。这些信息存放在对象头（Object Header）之中。</p><p>​    在Java程序的视角来看，对象的创建才刚刚开始——构造函数，即Class文件中的init（）方法还没执行，所有的字段都为默认的零值，对象需要的其他资源和状态信息也还没有按照预定的意图构造好，一般来说，new指令之后会接着执行init（）方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全被构造出来。</p><h3 id="对象的内存分布"><a href="#对象的内存分布" class="headerlink" title="对象的内存分布"></a>对象的内存分布</h3><p>​    对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p><p>​    对象头部分包括两类信息。</p><ul><li>用于存储对象自身运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据长度在32位和64位的虚拟机中（未开启压缩指针）中分别为32个比特和64个比特，官方称为“Mark Word”。对象需要存储的运行时的数据很多，其实已经超出了32、64位Bitmap结构所能记录的最大限度，但对象头里的信息是与对象自身定义的数据无关的额外存储成本。考虑到虚拟机的空间效率，Mark Word被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间。</li></ul><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/../../BaiduNetdiskDownload/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220207135222503.png" alt="image-20220207135222503"></p><ul><li>对象头的另一部分是类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。并不是所有虚拟机实现都必须在对象数据上保留类型指针。</li></ul><p>​    接下来实例数据部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容。这部分存储顺序会受到虚拟机分配策略参数（-XX：FieldsAllocationStyle参数）和字段在Java源码中定义顺序的影响。HotSpot虚拟机默认的分配顺序位longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers，OOPs）。</p><p>​    第三部分是对齐填充，这并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于HotSpot虚拟机的自动内存系统要求对象的起始地址必须是8字节的整数倍，换句话说就是任何对象的大小必须是8的倍数，对象头的部分已经被精心的设计成了8字节的倍数，因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>​    Java程序会通过栈上的reference数据来操作堆上的具体对象。由于reference类型在《Java虚拟机规范》里面只规定了它是一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置，所以对象访问方式也是虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种：</p><ul><li>句柄访问：Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄包含了对象实例数据和类型数据个自具体的地址信息</li></ul><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220207142826841.png" alt="image-20220207142826841"></p><ul><li><p>直接指针访问：Java堆中对象的内存布局就不须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销。</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220207143051755.png" alt="image-20220207143051755"></p></li></ul><p>​    这两种对象访问的方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改。</p><p>​    使用直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常的频繁，因此这类开销积少成多也是极为可观的执行成本，就本书讨论的主要虚拟机HotSpot而言，它主要使用第二种方式进行对象访问，但是整个软件开发的范围来看，在各种语言、框架中使用句柄来访问的情况也十分常见。</p><h2 id="实战：OutOfMemoryError异常"><a href="#实战：OutOfMemoryError异常" class="headerlink" title="实战：OutOfMemoryError异常"></a>实战：OutOfMemoryError异常</h2><h3 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h3><p>​    Java堆用于储存对象实例，我们只要不断的创建对象，就可以保证GCRoots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么随着对象数量的增加，总容量触及最大堆的容量限制后就会产生内存溢出异常。</p><p>虚拟机参数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xms20m</span><br><span class="line">-Xmx20m</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><p>​    限制Java堆的大小为20MB，不可扩展（将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展），通过参数-XX：+HeapDumpOnOutOf-MemoryError可以让虚拟机在出现内存溢出异常的时候Dump出当前的内存堆转储快照以便进行事后分析。</p><p>​    代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOutOfMemoryError</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;OOMObject&gt; list = <span class="keyword">new</span> ArrayList&lt;OOMObject&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> OOMObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行结果：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220207153641233.png" alt="image-20220207153641233"></p><p>​    Java堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况。出现Java堆内存溢出时，异常堆栈信息”Java.lang.OutOfMemoryError“会跟随进一步提示”Java heap space”</p><p>​    要解决这个内存区域的异常，常规的处理方法是首先通过内存映像分析工具对Dump出来的堆转储快照进行分析。第一步首先应确认内存中导致OOM的对象是否是必要的，也就是要分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）。</p><p>​    如果不是内存泄漏，换句话说就是内存中的对象确实都是必须存活的，那就应当检查Java虚拟机的堆参数（-Xmx与-Xms）设置，与机器的内存对比，看看是否还有向上调整的空间。再从代码上检查是否存在某些对象生命周期过长，存储结构设计不合理等情况，尽量减少程序运行期的内存消耗。</p><h3 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h3><p>​    由于HotSpot虚拟机中并不区分虚拟机和本地方法栈，因此对于HotSpot来说，-Xoss参数（设置本地方法栈大小）虽然存在，但实际上是没有任何效果，栈容量只能由-Xss参数来设定。关于虚拟即栈和本地方法栈，在《Java虚拟机规范》中描述了两种异常：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。</li><li>如果虚拟机的栈内存允许动态扩展，当扩展栈容量无法申请到足够的内存时，将抛出OutOfMemoryError异常。</li></ul><p>​    《Java虚拟机规范》明确允许Java虚拟机实现自行选择是否支持栈的动态扩展，而HotSpot虚拟机的选择是不支持扩展，所以除非在创建线程申请内存而出现OutOfMemoryError异常，否则在线程运行时是不会因为扩展而导致内存溢出的，只会因为栈容量无法容纳新的栈帧而导致StackOverflowError异常。</p><p>虚拟机参数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xss128k</span><br></pre></td></tr></table></figure><p>​    使用-Xss参数减少栈内存容量</p><p>​    结果：抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。</p><p>​    代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStackOverflowError_1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stackLength = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stackLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stackLength++;</span><br><span class="line">        stackLeak();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        TestStackOverflowError_1 oom = <span class="keyword">new</span> TestStackOverflowError_1();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oom.stackLeak();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;stack length:&quot;</span> + oom.stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行结果：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220211104619308.png" alt="image-20220211104619308"></p><p>​    对于不同版本的Java虚拟机和不同的操作系统，栈容量最小值可能会有所限制，这主要取决于操作系统内存分页大小，在32位Windows系统下的JDK 6中可以正常使用128K，在64位Windouws系统下的JDK 11则不能低于180K，而在Linux下这个值则可能是228K，如果低于这个最小限制，HotSpot会给出如下提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Java thread stack size specified is too small. Specify at least 228k</span><br></pre></td></tr></table></figure><p>​    第二种情况，定义大量的本地变量，增大此方法帧中本地变量表的长度</p><p>​    结果，抛出StackOverflowError异常，异常出现时输出的堆栈深度相应缩小。</p><p>​    代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStackOverflowError_2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> stackLength = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> unused1, unused2, unused3, unused4, unused5,</span><br><span class="line">                unused6, unused7, unused8, unused9, unused10,</span><br><span class="line">                unused11, unused12, unused13, unused14, unused15,</span><br><span class="line">                unused16, unused17, unused18, unused19, unused20,</span><br><span class="line">                unused21, unused22, unused23, unused24, unused25,</span><br><span class="line">                unused26, unused27, unused28, unused29, unused30,</span><br><span class="line">                unused31, unused32, unused33, unused34, unused35,</span><br><span class="line">                unused36, unused37, unused38, unused39, unused40,</span><br><span class="line">                unused41, unused42, unused43, unused44, unused45,</span><br><span class="line">                unused46, unused47, unused48, unused49, unused50,</span><br><span class="line">                unused51, unused52, unused53, unused54, unused55,</span><br><span class="line">                unused56, unused57, unused58, unused59, unused60,</span><br><span class="line">                unused61, unused62, unused63, unused64, unused65,</span><br><span class="line">                unused66, unused67, unused68, unused69, unused70,</span><br><span class="line">                unused71, unused72, unused73, unused74, unused75,</span><br><span class="line">                unused76, unused77, unused78, unused79, unused80,</span><br><span class="line">                unused81, unused82, unused83, unused84, unused85,</span><br><span class="line">                unused86, unused87, unused88, unused89, unused90,</span><br><span class="line">                unused91, unused92, unused93, unused94, unused95,</span><br><span class="line">                unused96, unused97, unused98, unused99, unused100;</span><br><span class="line">        stackLength ++;</span><br><span class="line">        test();</span><br><span class="line">        unused1 = unused2 = unused3 = unused4 = unused5 =</span><br><span class="line">                  unused6 = unused7 = unused8 = unused9 = unused10 =</span><br><span class="line">                  unused11 = unused12 = unused13 = unused14 = unused15 =</span><br><span class="line">                  unused16 = unused17 = unused18 = unused19 = unused20 =</span><br><span class="line">                  unused21 = unused22 = unused23 = unused24 = unused25 =</span><br><span class="line">                  unused26 = unused27 = unused28 = unused29 = unused30 =</span><br><span class="line">                  unused31 = unused32 = unused33 = unused34 = unused35 =</span><br><span class="line">                  unused36 = unused37 = unused38 = unused39 = unused40 =</span><br><span class="line">                  unused41 = unused42 = unused43 = unused44 = unused45 =</span><br><span class="line">                  unused46 = unused47 = unused48 = unused49 = unused50 =</span><br><span class="line">                  unused51 = unused52 = unused53 = unused54 = unused55 =</span><br><span class="line">                  unused56 = unused57 = unused58 = unused59 = unused60 =</span><br><span class="line">                  unused61 = unused62 = unused63 = unused64 = unused65 =</span><br><span class="line">                  unused66 = unused67 = unused68 = unused69 = unused70 =</span><br><span class="line">                  unused71 = unused72 = unused73 = unused74 = unused75 =</span><br><span class="line">                  unused76 = unused77 = unused78 = unused79 = unused80 =</span><br><span class="line">                  unused81 = unused82 = unused83 = unused84 = unused85 =</span><br><span class="line">                  unused86 = unused87 = unused88 = unused89 = unused90 =</span><br><span class="line">                  unused91 = unused92 = unused93 = unused94 = unused95 =</span><br><span class="line">                  unused96 = unused97 = unused98 = unused99 = unused100 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Error e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;stack length:&quot;</span> + stackLength);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行结果：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220211111153530.png" alt="image-20220211111153530"></p><p>​    实验结果表明，无论是由于栈帧太大还是虚拟机栈容量太小，当新的栈帧内存无法分配的时候，HotSpot虚拟机抛出的都是StackOverflowError异常，可是如果在允许动态扩展栈容量大小的虚拟机上，相同的代码则会导致不一样的情况。在远古时代的Classic虚拟机上，产生的就是OutOfMemoryError而不是StackOverflowError异常，如果测试时不限于单线程，通过不断建立线程的方式，HotSpot上也是可以产生内存溢出异常的。原因是操作系统分配给每个进程的内存是有限制的，譬如32位Windows的单个进程最大内存限制位2GB，HotSpot提供了参数可以控制Java堆和方法区这两部分的内存的最大值，那剩余的内存即为2GB减去最大堆容量，再减去最大方法区容量，再减去程序计数器以及直接内存和虚拟机进程本身耗费的内存也去掉的话，剩下的内存就由虚拟机栈和本地方法栈来分配了，因此为每个线程分配的栈内存越大，可以建立的线程数量自然就越少，建立线程时就越容易把剩下的内存耗尽。</p><p>​    如果是建立过多的线程导致的内存溢出，在不能减少线程数量或提升硬件属性的情况下，就只能通过减少最大堆和减少栈容量来换取更多的线程，</p><h3 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h3><p>​    在JDK 7时开始逐步“去永久代”计划，并在JDK 8时完全使用元空间来代替永久代，接下来就可以探讨一下<strong>永久代</strong>或者<strong>元空间</strong>来实现方法区，对程序有什么实际的影响。</p><p>​    String::intern（）是一个本地方法，它的作用是当字符串常量池中已有相同的String对象的字符串时，则返回这个字符串的String对象的引用，否则，会将此String对象包含的字符串添加常量池中，并返回此String对象的引用，接下来先测试JDK 6，即测试永久代，我们通过-XX：PermSize和-XX：MaxPermSize来限制永久代的大小，即可间接限制其中常量池的容量。这里我就没有自己去测试了，直接引用作者的运行结果。</p><p>​    虚拟机参数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize=6M -XX:MaxPermSize=6M</span><br></pre></td></tr></table></figure><p>​    代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeConstantPoolOOM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用Set保持着常量池引用，避免Full GC回收常量池行为</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 在short范围内足以让6MB的PermSize产生OOM了</span></span><br><span class="line">        <span class="keyword">short</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            set.add(String.valueOf(i++).intern());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行结果：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220211140924940.png" alt="image-20220211140924940"></p><p>​    运行结果表示OutOfMemoryError异常发生在PermGen space，说明运行时常量池的确是属于方法区的一部分（也就是JDK 6中的永久代）。</p><p>​    而使用JDK 7或更高的版本的JDK来运行这段代码就不会得到相同的结果。无论是在JDK 7中继续使用—XX：MaxPermSize参数或者JDK 8及以上版本使用—XX：MaxMeta-spaceSize参数把方法区容量同样限制在6MB，也不会重现JDK 6中的溢出异常，循环将一直进行下去，因为JDK 7及以上版本，<strong>原本存放在永久代的字符串常量池被移至Java堆中</strong>，所以在JDK 7及以上版本，限制方法区的容量对该测试用例来说是毫无意义的，这时候就需要限制最大堆到6MB，运行后会发现两种情况，具体取决于哪里的对象分配时产生了溢出：</p><p>​    虚拟机参数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx6M</span><br></pre></td></tr></table></figure><p>​    代码清单与上面相同</p><p>​    运行结果：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220211144215796.png" alt="image-20220211144215796"></p><p>​    另一种异常：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220211144430458.png" alt="image-20220211144430458"></p><p>​    我们在看看方法区的其他部分的内容，方法区的主要职责是存放类型的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等。作者用的是CGLib直接操作字节码运行时生成大量的动态类。而且类似这样的代码确实可能会出现在实际应用中：当前的很多主流框架（Spring、Hibernate）对类进行增强时，都会用到CGLib这类字节码技术，当增强的类越多，就需要越大的方法区以保证动态生成的新类型可以载入内存。另外，很多运行与Java虚拟机的动态语言通常都会持续创建新类型来支持语言的动态性，随着这类动态语言的流行，与下面代码清单相似的溢出场景也越来越容易遇到。</p><p>​    虚拟机配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:PermSize=10M -XX:MaxPermSize=10M</span><br></pre></td></tr></table></figure><p>​    代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMethodAreaOOM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(OOMObject.class);</span><br><span class="line">            enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> proxy.invokeSuper(obj, args);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行结果：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220211150908703.png" alt="image-20220211150908703"></p><p>​    方法区溢出也是一种常见的内存溢出异常，一个类如果要被垃圾收集器回收，要达成的条件是比较苛刻的。<strong>在经常运行时生成大量动态类的应用场景里，就应该特别关注这些类的回收状况。</strong>但是在JDK 8以后，元空间登场，在默认设置下，前面列举的那些正常的动态创建新类型的测试用例已经很难在迫使虚拟机产生方法区的溢出异常了，而且HotSpot还提供了一些参数作为元空间的防御措施，主要是：</p><p>​    -XX：MaxMetaspaceSize：设置元空间最大值，默认是-1，即不限制，或者说只受限于本地内存大小。</p><p>​    -XX：MetaspaceSize：指定元空间的初始空间大小，以字节为单位，达到该值就会触发垃圾收集进行类型卸载，同时收集器会对该值进行调整：如果释放了大量空间，就适当降低该值；如果释放了很少的空间，那么在不超过-XX：MaxMetaspaceSize的情况下，适当提高该值。</p><p>​    -XX：MinMetaspaceFreeRatio：作用是在垃圾收集之后控制最小的元空间剩余容量的百分比，可减少因为元空间不足导致的垃圾收集的频率。类似的还有-XX：Max-MetaspaceFreeRatio，用于控制最大的元空间剩余容量的百分比。</p><h3 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h3><p>​    直接内存的容量大小可通过-XX：MaxDirectMemorySize参数来指定，如果不去指定，则默认与Java堆最大值一致，代码清单越过了DirectByteBuffer类直接用过反射获取Unsafe实例进行内存分配（Unsafe类原本设计者只希望只有虚拟机标准类库里面的类才能使用，但是在Java 10部分功能通过VarHandle开放给外部使用），因为虽然使用DirectByteBuffer分配内存也会抛出内存溢出异常，但它抛出的异常时并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配就会在代码里手动抛出溢出异常，真正申请分配内存的方法是Unsafe::allocateMemory（）</p><p>​    虚拟机参数设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx20M -XX:MaxDirectMemorySize=10M</span><br></pre></td></tr></table></figure><p>​    代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryOOM</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field unsafeField = Unsafe.class.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">        unsafeField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Unsafe unsafe = (Unsafe) unsafeField.get(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            unsafe.allocateMemory(_1MB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行截图：</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220214101519324.png" alt="image-20220214101519324"></p><p>​    由直接内存导致的内存溢出，最重要的是不会在Heap Dump文件中看见明显异常，而程序直接或间接的使用了DirectMemory。</p><h1 id="第三章-垃圾收集器与内存分配策略"><a href="#第三章-垃圾收集器与内存分配策略" class="headerlink" title="第三章 垃圾收集器与内存分配策略"></a>第三章 垃圾收集器与内存分配策略</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>​    垃圾收集（Garbage Collection，简称GC），该项技术1960年诞生于麻省理工学院的Lisp语言，经过半个世纪的发展，垃圾收集“自动化”程度很高了，但是当垃圾收集称为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节</p><p>​    在<strong>程序计数器，虚拟机栈、本地方法栈</strong>3个区域随线程而生，随线程而灭，而每个线帧分配多少内存基本上都是确定的，所以不需要过多考虑回收的问题，但是<strong>Java堆</strong>和<strong>方法区</strong>这两个区域则有很显著的不确定性，这部分内存的分配和回收是动态的，垃圾收集器所关注的正是这部分内存该如何管理。</p><h2 id="对象已死？"><a href="#对象已死？" class="headerlink" title="对象已死？"></a>对象已死？</h2><p>​    GC在对堆进行回收前，第一件事情就是先确认这些对象之中哪些还“存活”着，哪些已经“死去”。</p><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>​    在对象中添加一个引用计数器，每当有一个地方引用了它时，计数器就加一，当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><p>​    客观的来看，引用计数算法虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是不错的算法。但是Java领域，主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多的例外需要考虑，必须要配合大量额外处理才能保证正确的工作，譬如很难解决对象之间相互循环引用的问题。</p><p>​    代码清单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountingGC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否有回收过</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bigSize = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ReferenceCountingGC objA = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        ReferenceCountingGC objB = <span class="keyword">new</span> ReferenceCountingGC();</span><br><span class="line">        objA.instance = objB;</span><br><span class="line">        objB.instance = objA;</span><br><span class="line">        objA = <span class="keyword">null</span>;</span><br><span class="line">        objB = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 假设在这行发生GC，objA和objB是否能被回收？</span></span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行结果</p><p><img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220214110942755.png" alt="image-20220214110942755"></p><p>​    内存回收日志中包含“4603K-&gt;210K”，意味着虚拟机并没有因为这两个对象互相引用就放弃回收他们，这也从侧面说明了Java虚拟机并不是通过引用计数算法来判断对象是否存活的。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>​    当前主流的商用程序语言的内存管理子系统，都是通过可达性分析算法来判定对象是否存活的。这个算法的基本思路是通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”，如果某个对象到GC Roots间没有任何引用链相连，或者用图论来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。<img src="/2022/01/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E7%AC%94%E8%AE%B0/image-20220214112036268.png" alt="image-20220214112036268"></p><p>​    在Java技术体系里面，固定可作为GC Roots的对象包括以下几种</p><ul><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法栈帧中使用到的参数、局部变量、临时变量等</li><li>在方法区中类静态属性引用的对象，譬如Java类引用类型静态变量。</li><li>在方法区中常量引用的对象，譬如字符串常量池里的引用</li><li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象</li><li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointException、OutOfMemoryError）等，还有系统类加载器</li><li>所有被同步锁持有的对象</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><p>​    除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”的加入，共同构成GC Roots集合。</p><h3 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h3><p>​    在JDK 1.2之前，Java里面的引用是很传统的定义：如果reference类型的数据中存储的数值代表的是另一块内存的起始地址，就称该reference数据是代表某块内存、某个对象的引用。这种定义并没有什么不对，只是现在看来有些过于狭隘了，一个对象在这种定义下只有“被引用”或者“未被引用”两种状态，对于描述一些“食之无味，弃之可惜”的对象就显得无能为力，譬如我们希望能描述这一类对象：当内存还足够时，能保存在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象（很多系统的缓存功能都符合这样的应用场景）</p><p>​    在JDK之后，Java对引用的概念进行了扩充，将引用分为强引用，软引用，弱引用和虚引用四种，这四种引用强度依次逐渐减弱。</p><ul><li>强引用：最传统的“引用”的定义，是指在代码之中普遍存在的引用赋值，即类似“Object obj = new Object（）”这种引用关系，无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</li><li>软引用：用来描述一些还有用，但非必须的对象，只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常，在JDK 1.2版之后提供了SoftReference类来实现软引用。</li><li>弱引用：也是用来描述哪些非必须，但是它的强度比软引用更弱一点，被弱引用关联的对象只能生存到下一次垃圾收集发生为止，当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象，在JDK 1.2之后提供了WeakReference类来实现弱引用</li><li>虚引用：也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例，为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被垃圾收集器回收时受到一个系统通知，在JDK 1.2版之后提供了PhantomReference类来实现虚引用</li></ul><h3 id="生存还是死亡？"><a href="#生存还是死亡？" class="headerlink" title="生存还是死亡？"></a>生存还是死亡？</h3><p>​    即使可达性分析算法中判定为不可达的对象，并不一定会直接清除，真正宣告一个对象的死亡，至少要经历两次标记过程：如果对象在可行性分析后发现没有与GC Roots相连接的引用链，它就会被第一次标记，随后进行一次筛选，筛选的条件的是否有必要执行finalize（）方法，假如对象没有覆盖finalize（）方法，或者finalize（）方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p><p>​    如果这个对象别判定为确有必要执行finalize（）方法，那么该对象将会放置在一个名为F-Queue的队列中，并且稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize（）方法。这里所说的“执行”是指悉尼及会触发这个方法开始运行，并不承诺一定会等待它运行结束。因为finalize（）方法执行缓慢，或者更极端的发生死循环，将有可能导致F-Queue队列中的其他对象永久处于等待。finalize（）方法是对象逃脱的死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行二次小规模的标记，如果对象想要在finalize（）中拯救自己，只要重新与引用链上的任何一个对象建立关联即可，譬如把自己赋值给某个类变量或者对象的成员变量，那么二次标记是它将被移出“即将回收”的集合。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深入理解Java虚拟机&quot;&gt;&lt;a href=&quot;#深入理解Java虚拟机&quot; class=&quot;headerlink&quot; title=&quot;深入理解Java虚拟机&quot;&gt;&lt;/a&gt;深入理解Java虚拟机&lt;/h1&gt;&lt;p&gt;​    本笔记来自《深入理解Java虚拟机：JVM高级特性与最佳实</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学网课笔记</title>
    <link href="http://example.com/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-26T15:06:33.000Z</published>
    <updated>2022-02-15T14:37:06.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h1><h2 id="第一章：经济学与资源配置"><a href="#第一章：经济学与资源配置" class="headerlink" title="第一章：经济学与资源配置"></a>第一章：经济学与资源配置</h2><h3 id="经济学"><a href="#经济学" class="headerlink" title="经济学"></a>经济学</h3><ol><li>经济学与政治经济学</li><li>罗宾斯与萨缪尔森定义的经济学</li></ol><p>罗宾斯：经济学是研究关于目的与可供选择用途的手段之间相互关系的人类行为科学——《经济科学的性质与意义》，1932年</p><p>萨缪尔森：经济学是研究人和社会如何进行选择，来使用可以有不同用途的稀缺资源一边生产各种商品，并在选择或者将来把商品分配给社会各个成员或集团以供消费只用——《经济学》，1988年</p><h3 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h3><ol><li>人的欲望的特点：无限性与多样性</li><li>资源的特点：稀缺性与可选择性</li></ol><p>稀缺性——与人的欲望或需要相比较，资源数量的相对不足。因此，资源稀缺性的程度与资源本身绝对数量大小并无必然关系</p><p>资源的基本种类：</p><ul><li><p>自然资源</p></li><li><p>人力资源</p></li><li><p>资本品</p></li><li><p>技术</p><p>3.生产可能性边界</p></li></ul><p><img src="/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20220127000304339.png" alt="image-20220127000304339"></p><h2 id="第二章-经济学原理"><a href="#第二章-经济学原理" class="headerlink" title="第二章 经济学原理"></a>第二章 经济学原理</h2><h3 id="微观经济学-1"><a href="#微观经济学-1" class="headerlink" title="微观经济学"></a>微观经济学</h3><p>研究市场经济中单个<strong>经济主体</strong>的行为及相应的<strong>经济变量</strong></p><p><strong>经济主体：</strong></p><ul><li>消费者：个人或家庭</li><li>生产者：公司或厂商</li></ul><p><strong>经济变量：</strong></p><ul><li>消费者的收入</li><li>消费者的开支</li><li>消费者的储蓄</li><li>厂商的生产成本</li><li>厂商提供的产品的价格</li><li>厂商的利润</li><li>等…….</li></ul><h4 id="研究的主要问题"><a href="#研究的主要问题" class="headerlink" title="研究的主要问题"></a>研究的主要问题</h4><ul><li>what ：what products should be produced？</li><li>How ：How to produce？ OR which means should be used to produce?</li><li>For whom : How to distribute?</li></ul><p>How影响For whom</p><p>每一个生产要素所有者，在总产品所分得的份额，跟生产要素投入到生产中的数量有关。</p><p>劳动密集型生产最后大部分以工资的形式分配给劳动者</p><p>经济密集型生产最后大部分以资本收入分配给公司或厂商</p><p>For whom影响what</p><p>不同的要素所有者，他们具有不同的消费倾向和消费结构，因此会影响企业最后选择生产哪种产品</p><p>现实生活中这三个问题是紧密联系在一起的。</p><h3 id="宏观经济学"><a href="#宏观经济学" class="headerlink" title="宏观经济学"></a>宏观经济学</h3><p>研究国民经济总体运行及相应的经济变量</p><h4 id="研究主要问题"><a href="#研究主要问题" class="headerlink" title="研究主要问题"></a>研究主要问题</h4><ul><li>Full-Employment（充分就业及闲置资源的利用）</li><li>Economic Growth（经济增长）</li><li>Economic Stability（经济稳定）（Role of Government（政府调控））</li></ul><h3 id="微观经济学与宏观经济学比较"><a href="#微观经济学与宏观经济学比较" class="headerlink" title="微观经济学与宏观经济学比较"></a>微观经济学与宏观经济学比较</h3><table><thead><tr><th align="center"></th><th>微观经济学</th><th>宏观经济学</th></tr></thead><tbody><tr><td align="center">经济主体</td><td>个体：厂商、消费者</td><td>国别：国民经济</td></tr><tr><td align="center">经济变量</td><td>个量：单个市场、供给、需求、价格、利润、收入</td><td>总量：总供给、总需求、价格总水平、投资、储蓄</td></tr><tr><td align="center">进一步说明</td><td></td><td>一个国家不一定是宏观（欧盟），一个非国家的地区不一定是微观（香港、台湾），判断依据（1.关税  2.独立货币发行权）</td></tr></tbody></table><h3 id="经济体制"><a href="#经济体制" class="headerlink" title="经济体制"></a>经济体制</h3><p><img src="/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20220127224525234.png" alt="image-20220127224525234"></p><h4 id="市场经济的前提"><a href="#市场经济的前提" class="headerlink" title="市场经济的前提"></a>市场经济的前提</h4><p><strong>概念：</strong>市场是建立在法治基础上的契约经济，是一种以法治为保障的自愿交换经济</p><ol><li>“经纪人”的假定</li></ol><p>​    囚徒困境模型——纳什</p><p><img src="/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20220127225633486.png" alt="image-20220127225633486"></p><ol start="2"><li>私有财产权</li></ol><ul><li><p>私有产权的作用</p><p>私有财产制度：保护每个人在从事经济活动时他的付出和由此付出带来的收益是匹配的。</p></li><li><p>私有财产权可能的弊病</p><p>经济危机，分配不均</p></li><li><p>社会主义经济大论战</p></li></ul><h3 id="经济变量与经济模型"><a href="#经济变量与经济模型" class="headerlink" title="经济变量与经济模型"></a>经济变量与经济模型</h3><ol><li><p>存量与流量（Stock and Flow）</p><ol><li>存量：在社会经济活动中，某个时间点上确定出来的变量</li><li>流量：在社会经济活动中，某个观察期内从起点到结束确定出来的变量</li><li>Stock and Flow的基本关系：相互依存，相互影响。</li></ol></li><li><p>内生变量与外生变量</p><ol><li><p>内生变量与外生变量</p></li><li><p>方程组：变量举例</p><p>X + Y = 10; X - Y =4（内生变量）</p><p>X + Y + Z = 20; X - Y - Z =5（外生变量）</p></li></ol></li><li><p>经济模型（Economic Model）</p><ol><li>Economic Model</li></ol><p>​    经济模型是指用来描述与所研究的经济现象有关的</p><p>​    经济变量之间相互关系的理论结构 </p><ol start="2"><li><p>Forms of Economic Model：</p><p>文字（words）</p><p>方程式（Equation）</p><p>图表与图形（Figure and Graph）</p></li><li><p>Example:供求方程及均衡</p></li></ol><p><img src="/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20220207211130849.png" alt="image-20220207211130849"></p></li><li><p>经济分析方法（Methods of Economic Analysis）</p><ol><li><p>边际分析（Marginal analysis）</p><ul><li>增量（Delta）</li><li>最后单位（Final Unit）</li></ul></li><li><p>均衡分析（Equilibrium Analysis）</p><ul><li>均衡概念</li><li>局部均衡（Partial Equilibrium）— A.Marshall</li><li>一般均衡（General Equilibrium）— L.Walras</li></ul></li><li><p>静态、比较静态与动态</p><ul><li>静态（staties）：同一时点或一个时点上的经济变量分析</li><li>比较静态（comparative staties）：一个以上时点的经济变量分析</li><li>动态（dynamies）：不同时点上经济变量变动的过程分析</li></ul></li><li><p> 实证与规范</p></li></ol><ul><li><p>实证分析（positive analysis-positive Economics）</p><p>是什么——what is？</p></li><li><p>规范分析（normative analysis-normative Economies）</p><p>应该是什么——what onght to be？</p></li></ul></li></ol><h2 id="第三章-供给与需求"><a href="#第三章-供给与需求" class="headerlink" title="第三章 供给与需求"></a>第三章 供给与需求</h2><p>​    需求：有购买能力的需要</p><h3 id="个别需求与市场需求"><a href="#个别需求与市场需求" class="headerlink" title="个别需求与市场需求"></a>个别需求与市场需求</h3><ol><li>需求函数（Demand Function）</li><li>个别需求</li><li>市场需求：是个别需求的加总</li></ol><h4 id="需求法则"><a href="#需求法则" class="headerlink" title="需求法则"></a>需求法则</h4><p>​    其他条件不变时，对商品的需求数量随着该种商品的市场价格的上升而下降，反之亦然。</p><h4 id="联合产品需求函数与公共产品需求函数的加总"><a href="#联合产品需求函数与公共产品需求函数的加总" class="headerlink" title="联合产品需求函数与公共产品需求函数的加总"></a>联合产品需求函数与公共产品需求函数的加总</h4><p>​    私有产品加数量（因为私人产品具有排他性）</p><p>​    联合产品和公共产品加价格</p><h3 id="需求变动"><a href="#需求变动" class="headerlink" title="需求变动"></a>需求变动</h3><ol><li>需求变化和需求量变化</li><li>影响需求变化的主要因素<ul><li>人口变化</li><li>收入变化</li><li>相关商品价格变化</li><li>收入分配变化</li></ul></li><li>时间与需求变化</li></ol><h3 id="需求的价格弹性"><a href="#需求的价格弹性" class="headerlink" title="需求的价格弹性"></a>需求的价格弹性</h3><ol><li>弹性定义与基本公式</li></ol><ul><li>弹性定义：P变化后，由P变化所引起的Q变化及两者变动率之比率</li><li>基本公式：Ed=-(△Q/Q)/(△R/R）<img src="/2022/01/26/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%BD%91%E8%AF%BE%E7%AC%94%E8%AE%B0/image-20220210212030172.png" alt="image-20220210212030172"></li></ul><ol start="2"><li><p>弹性分类</p><ul><li><p>完全无弹性：E=0.需求曲线是一条垂直的线</p></li><li><p>完全弹性：价格没有变化，需求量无限增加，水平的线</p></li><li><p>单位弹性：E=1，需求量变化与价格变化保持相同比例</p></li><li><p>缺乏弹性：0&lt;E&lt;1，比如说粮食</p></li><li><p>富有弹性：E&gt;1，平缓的曲线</p></li></ul></li><li><p>点弹性与弧弹性</p><ol><li>弧弹性：与需求曲线上两点之间的弧的割线斜率相关</li><li>计算公式：ε={ΔQ÷[(Q0+Q1)/2]}÷{ΔP÷[(P0+P1)/2]}</li><li>点弹性：与需求曲线上某点的切线斜率相关</li><li>计算公式：e=－(dx/dp)×(p/x)</li></ol></li></ol><h3 id="需求的交叉价格弹性与收入弹性"><a href="#需求的交叉价格弹性与收入弹性" class="headerlink" title="需求的交叉价格弹性与收入弹性"></a>需求的交叉价格弹性与收入弹性</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微观经济学&quot;&gt;&lt;a href=&quot;#微观经济学&quot; class=&quot;headerlink&quot; title=&quot;微观经济学&quot;&gt;&lt;/a&gt;微观经济学&lt;/h1&gt;&lt;h2 id=&quot;第一章：经济学与资源配置&quot;&gt;&lt;a href=&quot;#第一章：经济学与资源配置&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="经济学" scheme="http://example.com/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java中BigDecimal的应用</title>
    <link href="http://example.com/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2022-01-26T06:13:42.000Z</published>
    <updated>2022-02-08T09:59:28.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中BigDecimal的应用"><a href="#Java中BigDecimal的应用" class="headerlink" title="Java中BigDecimal的应用"></a>Java中BigDecimal的应用</h1><p>在日常的项目中，我们经常会遇到数据计算的问题，但是Java中自带的+、-、*、/ 这四个运算符在项目中进行计算时，会导致很多的误差，就像这样：</p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126143337444.png" alt="image-20220126143337444"></p><p>这种情况出现的主要原因就是计算机底层是二进制的，浮点数没办法通过二进制来精确表示，CPU表示浮点数由两部分组成：指数和尾数，这样的表示方法一般都会失去一定的精确度。这在项目中，尤其是金融的项目中，这种细小的误差就会出现很大的麻烦，这时候BigDecimal就是大显身手的时候了。</p><h2 id="BigDecimal简介"><a href="#BigDecimal简介" class="headerlink" title="BigDecimal简介"></a>BigDecimal简介</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/index.html">Java 8官方API</a></p><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数。在实际应用中，需要对更大或者更小的数进行运算和处理。float和double只能用来做科学计算或者是工程计算，在商业计算中要用java.math.BigDecimal。BigDecimal所创建的是对象，我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。</p><h2 id="BigDecimal-构造方法"><a href="#BigDecimal-构造方法" class="headerlink" title="BigDecimal 构造方法"></a>BigDecimal 构造方法</h2><p>BigDecimal的构造方法有很多，我们选择其中最典型的构造方法进行讲解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将int表示形式转换成BigDecimal</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将double表示形式转换为BigDecimal</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">double</span> val)</span> <span class="comment">//不推荐使用</span></span></span><br><span class="line"><span class="function"><span class="comment">//将String表示形式转换成BigDecimal</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String val)</span> <span class="comment">//推荐使用</span></span></span><br></pre></td></tr></table></figure><p>为什么推荐使用String而不推荐Double呢？看看<strong>官方注解</strong>解释：</p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126145933709.png" alt="image-20220126145933709"></p><p><strong>Google翻译：</strong></p><p>将 double 转换为 BigDecimal，BigDecimal 是 double 的二进制浮点值的精确十进制表示。返回的 BigDecimal 的小数位数是使 (10scale × val) 为整数的最小值。<br>笔记：</p><ol><li><p>此构造函数的结果可能有些不可预测。有人可能会假设用 Java 编写 new BigDecimal(0.1) 会创建一个正好等于 0.1 的 BigDecimal（未缩放的值 1，缩放为 1），但它实际上等于 0.1000000000000000055511151231257827021181583404541015625。这是因为 0.1 不能完全表示为双精度数（或者，就此而言，不能表示为任何有限长度的二进制分数）。因此，传递给构造函数的值并不完全等于 0.1，尽管看起来如此。</p></li><li><p>另一方面，String 构造函数是完全可预测的：编写 new BigDecimal(“0.1”) 会创建一个正好等于 0.1 的 BigDecimal，正如人们所期望的那样。因此，一般建议优先使用 String 构造函数。</p></li></ol><p>我们也可以自己来测试测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(<span class="number">2</span>);</span><br><span class="line">        BigDecimal bDouble = <span class="keyword">new</span> BigDecimal(<span class="number">2.3</span>);</span><br><span class="line">        BigDecimal bString = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;2.3&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;bigDecimal=&quot;</span> + bigDecimal);</span><br><span class="line">        System.out.println(<span class="string">&quot;bDouble=&quot;</span> + bDouble);</span><br><span class="line">        System.out.println(<span class="string">&quot;bString=&quot;</span> + bString);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126150538649.png" alt="image-20220126150538649"></p><ol start="3"><li>当必须将 double 用作 BigDecimal 的源时，请注意此构造函数提供了精确的转换；它与使用 Double.toString(double) 方法然后使用 BigDecimal(String) 构造函数将双精度转换为字符串的结果不同。要获得该结果，请使用静态 valueOf(double) 方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigDecimal bDouble1 = BigDecimal.valueOf(<span class="number">2.3</span>);</span><br><span class="line">        BigDecimal bDouble2 = <span class="keyword">new</span> BigDecimal(Double.toString(<span class="number">2.3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;bDouble1=&quot;</span> + bDouble1);</span><br><span class="line">        System.out.println(<span class="string">&quot;bDouble2=&quot;</span> + bDouble2);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126150900344.png" alt="image-20220126150900344"></p><h2 id="BigDecimal常用方法"><a href="#BigDecimal常用方法" class="headerlink" title="BigDecimal常用方法"></a>BigDecimal常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(BigDecimal value)</span></span>;                        <span class="comment">//加法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal value)</span></span>;                   <span class="comment">//减法 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal value)</span></span>;                   <span class="comment">//乘法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal value)</span></span>;                     <span class="comment">//除法</span></span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;4.5&quot;</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a + b =&quot;</span> + a.add(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;a - b =&quot;</span> + a.subtract(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;a * b =&quot;</span> + a.multiply(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;a / b =&quot;</span> + a.divide(b));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126151943767.png" alt="image-20220126151943767"></p><p><strong>其中divide()需要注意，源码如下：</strong></p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126152315270.png" alt="image-20220126152315270"></p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126152332223.png" alt="image-20220126152332223"></p><p>BigDecimal除法可能出现不能整除的情况，比如 4.5/1.3，这时会报错<code>java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</code></p><p>或者给divide方法传三个参数，第一参数表示除数， 第二个参数表示小数点后保留位数，<br>第三个参数表示舍入模式，只有在作除法运算或四舍五入时才用到舍入模式，有下面这几种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor, <span class="keyword">int</span> scale, <span class="keyword">int</span> roundingMode)</span> </span></span><br></pre></td></tr></table></figure><p><strong>舍入模式参数：</strong></p><p><strong>ROUND_CEILING</strong>    //向正无穷方向舍入</p><p><strong>ROUND_DOWN</strong>    //向零方向舍入</p><p><strong>ROUND_FLOOR</strong>    //向负无穷方向舍入</p><p><strong>ROUND_HALF_DOWN</strong>    //向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向下舍入, 例如1.55 保留一位小数结果为1.5</p><p><strong>ROUND_HALF_EVEN</strong>    //向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，如果保留位数是奇数，使用<strong>ROUND_HALF_UP</strong>，如果是偶数，使用<strong>ROUND_HALF_DOWN</strong></p><p><strong>ROUND_HALF_UP（四舍五入）</strong>    //向（距离）最近的一边舍入，除非两边（的距离）是相等,如果是这样，向上舍入, 1.55保留一位小数结果为1.6</p><p><strong>ROUND_UNNECESSARY</strong>    //计算结果是精确的，不需要舍入模式</p><p><strong>ROUND_UP</strong>    //向远离0的方向舍入</p><p><strong>需要对BigDecimal进行截断和四舍五入可用setScale方法，实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;4.5635&quot;</span>);</span><br><span class="line"></span><br><span class="line">        a = a.setScale(<span class="number">3</span>, RoundingMode.HALF_UP);    <span class="comment">//保留3位小数，且四舍五入</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>运行截图：</strong></p><p><img src="/2022/01/26/Java%E4%B8%ADBigDecimal%E7%9A%84%E5%BA%94%E7%94%A8/image-20220126153332453.png" alt="image-20220126153332453"></p><p>在进行BigDecimal运算时其实最终都返回的是一个<strong>新的BigDecimal对象</strong>，因为BigInteger与BigDecimal都是不可变的（immutable）的，在进行每一步运算时，都会产生一个新的对象 ，这也导致了BigDecimal在处理大量，复杂的运算时性能比double和float差。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>需要精确计算时最好使用BigDecimal</li><li>最好使用参数类型为String的构造函数</li><li>在进行除法运算divide时，不能整除就会报错，可以通过传三个参数选择舍入模式解决</li><li>BigDecimal都是不可变的（immutable）的，在进行每一步计算时，都会产生一个新的对象，所以在做加减乘除运算时千万要保存操作后的值。</li><li>BigDecimal的性能会比float和double相对来说差，尤其是在处理大量，复杂的运算时很明显，所以根据自己的情况酌情选择</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/YangJavaer/p/6056394.html">Java BigDecimal详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中BigDecimal的应用&quot;&gt;&lt;a href=&quot;#Java中BigDecimal的应用&quot; class=&quot;headerlink&quot; title=&quot;Java中BigDecimal的应用&quot;&gt;&lt;/a&gt;Java中BigDecimal的应用&lt;/h1&gt;&lt;p&gt;在日常的项目</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>微观经济学笔记</title>
    <link href="http://example.com/2022/01/25/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/01/25/%E5%BE%AE%E8%A7%82%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-25T08:17:00.000Z</published>
    <updated>2022-02-08T09:58:24.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本笔记是阅读并参考《经济学原理：微观经济学分册——N. Gregory ManKiw》这本书，作为一位刚刚进入社会的大学生，拥有了属于自己的稳定收入，但是这部分收入的支配以及如何利用，这将是一个很大的问题，这时候系统的学习经济学就显得非常重要，天下熙熙，皆为利来，天下攘攘，皆为利往，平凡人都在为了各种利益而奋斗，但是每个平凡人也都不想成为社会的利益碰撞下的“韭菜”，不能理解经济社会如何运转，永远也只能被别人踩在脚底，这也是我学习经济学的目的，虽然如此世俗，但是不了解敌人也不可能做到独善其身，更何况人非圣贤呀。</p><h2 id="曼昆给读者的话："><a href="#曼昆给读者的话：" class="headerlink" title="曼昆给读者的话："></a>曼昆给读者的话：</h2><p>学习经济学有三个原因：</p><ul><li>它有助于你理解你所在生活在其中的世界</li><li>它将使你更加精明的参与经济</li><li>它将使你更好的理解经济政策的潜力与局限性</li></ul><h1 id="第一章：导言"><a href="#第一章：导言" class="headerlink" title="第一章：导言"></a>第一章：导言</h1><p>经济（economy）来自与希腊，当初是古希腊的家庭理财，由于当初古希腊的家庭就是一个大家族，人口众多，资源稀缺促就了家庭理财的诞生，但是经济学的诞生也是必然的，因为地球上资源是稀缺的，每个人的资源分配肯定不能到达他所希望的最高生活水平，经济学也正是研究社会如何管理自己的稀缺资源。</p><h2 id="人们如何做出决策"><a href="#人们如何做出决策" class="headerlink" title="人们如何做出决策"></a>人们如何做出决策</h2><h3 id="原理一：人们面临权衡取舍"><a href="#原理一：人们面临权衡取舍" class="headerlink" title="原理一：人们面临权衡取舍"></a>原理一：人们面临权衡取舍</h3><ul><li>学生在时间如何分配在学习与其他事情中权衡取舍</li><li>家庭在如何分配家庭收入中权衡取舍</li><li>人们组成社会时会面临更多的各种不同方面的权衡取舍</li><li>社会面临的另一种是效率与平等之间的取舍</li></ul><p><strong>效率</strong>：社会能从其稀缺资源中得到最大的利益，即经济蛋糕的大小</p><p><strong>平等</strong>：将这些利益平均的分配给社会成员，即如何分割这块蛋糕</p><p>人们只有了解他们面临的选择，才可能做出良好的决策，因此，我们对经济学的学习要从认识生活中的权衡取舍开始</p><h3 id="原理二：某种东西的成本是为了得到它所放弃的东西"><a href="#原理二：某种东西的成本是为了得到它所放弃的东西" class="headerlink" title="原理二：某种东西的成本是为了得到它所放弃的东西"></a>原理二：某种东西的成本是为了得到它所放弃的东西</h3><p>决策需要比较可供选择的行动方案的成本和收益，但是在大多数情况下某种行动的成本并不是一目了然的。</p><p><strong>机会成本</strong>是你为了这个选择而放弃其他选择的成本，，决策者应该认识到某一种可能的行动带来的机会成本。</p><h3 id="原理三：理性人考虑边际量"><a href="#原理三：理性人考虑边际量" class="headerlink" title="原理三：理性人考虑边际量"></a>原理三：理性人考虑边际量</h3><p>在经济学中，通常假设人是理性的，<strong>理性人</strong>即系统而有目的地尽最大努力去实现其目标。</p><p><strong>边际变动</strong>：对行动计划的微小增量调整。理性人通常通过比较边际收益与边际成本来做决策</p><p>边际收益大于边际成本时，一个理性的决策者才会采取这种行动。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微观经济学&quot;&gt;&lt;a href=&quot;#微观经济学&quot; class=&quot;headerlink&quot; title=&quot;微观经济学&quot;&gt;&lt;/a&gt;微观经济学&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="经济学" scheme="http://example.com/tags/%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java基础思维导图</title>
    <link href="http://example.com/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <id>http://example.com/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</id>
    <published>2022-01-25T08:00:00.000Z</published>
    <updated>2022-01-25T08:09:25.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125152618248.png" alt="image-20220125152618248"></p><h2 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125152708484.png" alt="image-20220125152708484"></p><h3 id="什么是Java？"><a href="#什么是Java？" class="headerlink" title="什么是Java？"></a>什么是Java？</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125152749309.png" alt="image-20220125152749309"></p><h3 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125152818398.png" alt="image-20220125152818398"></p><h3 id="Java的开发环境"><a href="#Java的开发环境" class="headerlink" title="Java的开发环境"></a>Java的开发环境</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125152841321.png" alt="image-20220125152841321"></p><h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125152943254.png" alt="image-20220125152943254"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153019317.png" alt="image-20220125153019317"></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153038388.png" alt="image-20220125153038388"></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153057945.png" alt="image-20220125153057945"></p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153119992.png" alt="image-20220125153119992"></p><h2 id="Java执行流程"><a href="#Java执行流程" class="headerlink" title="Java执行流程"></a>Java执行流程</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153215126.png" alt="image-20220125153215126"></p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153224560.png" alt="image-20220125153224560"></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153244862.png" alt="image-20220125153244862"></p><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153253564.png" alt="image-20220125153253564"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153453662.png" alt="image-20220125153453662"></p><h3 id="类也是一种对象"><a href="#类也是一种对象" class="headerlink" title="类也是一种对象"></a>类也是一种对象</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153501982.png" alt="image-20220125153501982"></p><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153515190.png" alt="image-20220125153515190"></p><h3 id="属性与方法"><a href="#属性与方法" class="headerlink" title="属性与方法"></a>属性与方法</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153527648.png" alt="image-20220125153527648"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153541645.png" alt="image-20220125153541645"></p><h3 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153623596.png" alt="image-20220125153623596"></p><h3 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153636871.png" alt="image-20220125153636871"></p><h2 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153737381.png" alt="image-20220125153737381"></p><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153821246.png" alt="image-20220125153821246"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153832199.png" alt="image-20220125153832199"></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125153843162.png" alt="image-20220125153843162"></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154057545.png" alt="image-20220125154057545"></p><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154110807.png" alt="image-20220125154110807"></p><h4 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154127903.png" alt="image-20220125154127903"></p><h4 id="CheckedException"><a href="#CheckedException" class="headerlink" title="CheckedException"></a>CheckedException</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154143755.png" alt="image-20220125154143755"></p><h4 id="Java关键字"><a href="#Java关键字" class="headerlink" title="Java关键字"></a>Java关键字</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154200189.png" alt="image-20220125154200189"></p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154218096.png" alt="image-20220125154218096"></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154242948.png" alt="image-20220125154242948"></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154440048.png" alt="image-20220125154440048"></p><h3 id="Iterable接口"><a href="#Iterable接口" class="headerlink" title="Iterable接口"></a>Iterable接口</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154455857.png" alt="image-20220125154455857"></p><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154523671.png" alt="image-20220125154523671"></p><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154616232.png" alt="image-20220125154616232"></p><h4 id="Queue接口"><a href="#Queue接口" class="headerlink" title="Queue接口"></a>Queue接口</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154644508.png" alt="image-20220125154644508"></p><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154714248.png" alt="image-20220125154714248"></p><h3 id="Collections包装类"><a href="#Collections包装类" class="headerlink" title="Collections包装类"></a>Collections包装类</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154736046.png" alt="image-20220125154736046"></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154842280.png" alt="image-20220125154842280"></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154920128.png" alt="image-20220125154920128"></p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154936565.png" alt="image-20220125154936565"></p><h3 id="有关的类"><a href="#有关的类" class="headerlink" title="有关的类"></a>有关的类</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125154958409.png" alt="image-20220125154958409"></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155019305.png" alt="image-20220125155019305"></p><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155103610.png" alt="image-20220125155103610"></p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155227800.png" alt="image-20220125155227800"></p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155304168.png" alt="image-20220125155304168"></p><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155334004.png" alt="image-20220125155334004"></p><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155400497.png" alt="image-20220125155400497"></p><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155411075.png" alt="image-20220125155411075"></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155445526.png" alt="image-20220125155445526"></p><h3 id="代码注解"><a href="#代码注解" class="headerlink" title="代码注解"></a>代码注解</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155456450.png" alt="image-20220125155456450"></p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155522943.png" alt="image-20220125155522943"></p><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155557690.png" alt="image-20220125155557690"></p><h3 id="是一种特殊的值"><a href="#是一种特殊的值" class="headerlink" title="是一种特殊的值"></a>是一种特殊的值</h3><p><img src="/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/image-20220125155607388.png" alt="image-20220125155607388"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/01/25/Java%E5%9F%BA%E7%A1%80%E6%80%9D%</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记</title>
    <link href="http://example.com/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-25T07:00:00.000Z</published>
    <updated>2022-01-25T07:01:07.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法-一周目"><a href="#算法-一周目" class="headerlink" title="算法(一周目)"></a>算法(一周目)</h1><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125143907348.png" alt="image-20220125143907348"></p><h2 id="删除排序数组中的重复项"><a href="#删除排序数组中的重复项" class="headerlink" title="删除排序数组中的重复项"></a>删除排序数组中的重复项</h2><p>给你一个有序数组 nums，请你原地删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组，并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span></span><br><span class="line"><span class="keyword">int</span> len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键信息：</strong></p><p>引用传递、数组有序、原地修改</p><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p><strong>思路：</strong></p><p>使用 <strong>i</strong> 和 <strong>j</strong> 双指针，分别指向第一个和第二个元素，当 <strong>i</strong> 与 <strong>j</strong> 相等时， <strong>j</strong> 向后走一步，当走到与 <strong>i</strong> 不相等时，<strong>i</strong> 向后走一步，把 <strong>j</strong> 赋值给 <strong>i</strong>，然后 <strong>j</strong> 继续向后走，直到 <strong>j</strong> 与数组的长度相等</p><p><strong>复杂度分析：</strong></p><p>时间复杂度：O(n)。<br>空间复杂度：O(1)。</p><p><strong>代码实现：</strong></p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125143933858.png" alt="image-20220125143933858"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != nums[j])&#123;nums[++i] = nums[j];&#125;</span><br><span class="line">            j++;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><strong>思路：</strong></p><p>当 <strong>i</strong> 与 <strong>j</strong> 相邻时，<strong>i</strong> 还要与 <strong>j</strong> 进行赋值，但是这个赋值操作是冗余的。</p><p><strong>作用：</strong></p><p>在相邻的元素较多时，即判断成本低于赋值成本时，提高代码的执行速度。</p><p><strong>优化效果：</strong>⭐</p><p><strong>判断条件：j - i &gt; 1</strong></p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125143946530.png" alt="image-20220125143946530"></p><p><strong>复杂度分析：</strong></p><p>时间复杂度：O(n)。<br>空间复杂度：O(1)。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != nums[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>( j - i &gt; <span class="number">1</span>)</span><br><span class="line">                nums[++i] = nums[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a>买卖股票的最佳时机 II</h2><p>给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: prices = [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: prices = [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: prices = [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><p><strong>思路：</strong>首先buy与shell分别指向0和1，当buy+1的价格比buy的价格低时，buy往后移一步，否则买入，然后shell赋值为buy+1，当shell+1的价格高于shell时，shell向后移一步，低于shell时，就选择抛出股票，sum记录赚来的钱数，buy赋值到shell，继续向后查找购买股票，直到buy大于等于prices数组的长度。</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125143958400.png" alt="image-20220125143958400"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//buy：买入股票的时间</span></span><br><span class="line">        <span class="comment">//shell： 卖出股票的时间</span></span><br><span class="line">        <span class="comment">//sum：总共赚的差值</span></span><br><span class="line">        <span class="keyword">int</span> buy = <span class="number">0</span>, shell = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>( buy &lt; prices.length-<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="comment">//当买股票的价格比明天低时，买入</span></span><br><span class="line">            <span class="keyword">if</span>(prices[buy] &lt; prices[buy+<span class="number">1</span>])&#123;</span><br><span class="line">                shell = buy + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//当卖出的股票价格比明天高时，卖出</span></span><br><span class="line">                <span class="keyword">while</span>(shell &lt; prices.length -<span class="number">1</span> &amp;&amp; prices[shell] &lt;= prices[shell + <span class="number">1</span>])&#123;</span><br><span class="line">                    shell++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//sum累计所赚的钱</span></span><br><span class="line">                sum = sum + prices[shell] - prices[buy];</span><br><span class="line">                buy = shell;</span><br><span class="line">            &#125;</span><br><span class="line">            buy++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>待定优化：动态规划解决，贪心算法。</p><h2 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h2><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h3 id="双指针-2"><a href="#双指针-2" class="headerlink" title="双指针"></a>双指针</h3><p><strong>思路：</strong></p><p>第一种办法就是使用双指针暴力算法，分别定义p、q两个指针，p指向需要查找的元素，q指向被查找的元素，当p与q指向的元素相等时，循环结束。但是此种方法的效率很低</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/Users\xuwenlong\AppData\Roaming\Typora\typora-user-images\image-20211212104721993.png" alt="image-20211212104721993"></p><p><strong>复杂度分析：</strong></p><p>时间复杂度：O(N²)</p><p>空间复杂度：O(1)</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144010641.png" alt="image-20220125144010641"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">while</span> (p &lt; length) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; q &lt; length; q++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[p] == nums[q]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p++;</span><br><span class="line">            q = p+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums[] = &#123;<span class="number">2</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">22</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> b = containsDuplicate(nums);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><strong>思路：</strong></p><p>对数组先进行排序，排序后的数组中重复的元素肯定是相邻的，只需要比较相邻的元素即可找出是否有重复元素。</p><p><strong>复杂度分析：</strong></p><p>时间复杂度 : O(n log n)。即排序的时间复杂度。扫描的时间复杂度 O(n)O(n) 可忽略。</p><p>空间复杂度 : O(1)。 没有用到额外空间。如果深究<code>Arrays.sort(nums)</code> 使用了栈空间，那就是 O(log n)。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将数组按升序排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h3><p><strong>思路：</strong></p><p>遍历数组，将元素放到Set中，如果元素已存在于Set中，直接返回true，如果成功遍历完数组，说明没有重复的元素，返回false。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) &#123;</span><br><span class="line">            <span class="comment">//当add（）添加失败时，返回false</span></span><br><span class="line">            <span class="keyword">if</span> (!set.add(num)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>因为Java中字符串被修饰为final，所以只能新创建一个可变字符串进行替换，首先将字符串s转换为字符数组，然后进行遍历字符c替换，当字符c不是空格时，就将字符c加入可变字符串，如果字符c是空格时，就把字符c替换为‘%20’，直到遍历完全部字符串，然后再将可变字符串转换为字符串进行输出。</p><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(Character c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sb.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure><h3 id="递归法："><a href="#递归法：" class="headerlink" title="递归法："></a>递归法：</h3><p>通过递归方法将链表反向的数据保存到tmp中，然后将tmp的动态数组转换为res的int类型的数组进行返回。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个动态数组，用于接收迭代完成的head链表的值</span></span><br><span class="line">    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        <span class="comment">//使用recur进行递归</span></span><br><span class="line">        recur(head);</span><br><span class="line">        <span class="keyword">int</span> length = tmp.size();</span><br><span class="line">        <span class="comment">//创建一个int类型的数组用于将动态数组tmp转换成int类型进行返回</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length;i++)&#123;</span><br><span class="line">            res[i] = tmp.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recur</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            recur(head.next);</span><br><span class="line">            tmp.add(head.val);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归方法图解：</strong></p><p>!<img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144023916.png" alt="image-20220125144023916"></p><h3 id="递归法优化："><a href="#递归法优化：" class="headerlink" title="递归法优化："></a>递归法优化：</h3><p><strong>问题：</strong></p><p>使用递归法时，由于不明确数组的长度，需要创建一个动态的数组用于存储链表中的值，但最后需要返回的是一个int类型的数组，需要两次转换，非常耗费时间和空间。</p><p><strong>优化：</strong></p><p>首先遍历链表，不保存链表中的数据，只记录链表的长度，最大程度的节约时间与空间，第二步再倒序的将链表中的值赋值给res数组。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        ListNode tmp = head;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历获取链表的长度</span></span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        tmp = head;</span><br><span class="line">        <span class="keyword">int</span> index = length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历倒序赋值链表的值</span></span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res[index--] = tmp.val;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="辅助栈法："><a href="#辅助栈法：" class="headerlink" title="辅助栈法："></a>辅助栈法：</h3><p>从头到尾打印链表，正符合栈的先入后出的原则，只需要创建一个栈，然后进行进栈和出栈的操作，就可以倒序打印链表。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; tmp = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            tmp.addLast(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = tmp.size();</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">            res[i] = tmp.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用两个栈实现一个队列"><a href="#用两个栈实现一个队列" class="headerlink" title="用两个栈实现一个队列"></a>用两个栈实现一个队列</h2><p>队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code> ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回 -1 )</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出：[null,null,3,-1]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[],[5],[2],[],[]]</span><br><span class="line">输出：[null,-1,null,null,5,2]</span><br></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h3><p>分别使用A,B两个栈实现队列，<code>CQueue()</code>实现两个栈的初始化，<code>appendTail()</code>将元素插入队列尾部，<code>deleteHead()</code>将头部的元素移除</p><p>判断条件：</p><p><code>appendTail()</code>：队列插入尾部元素相当于栈A插入栈中元素。</p><p><code>deleteHead()</code>：队列删除头部元素时，分为三种情况</p><ol><li>当栈B不为空时，返回栈B中的栈顶元素</li><li>当A为空时，即两个栈中都为空时，返回 -1</li><li>当A不为空，B为空时，将A中的元素转移到B中，返回B中的栈顶元素</li></ol><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144033715.png" alt="image-20220125144033715"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a><strong>代码实现：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; A,B;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        B = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        A.addLast(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!B.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> B.removeLast();     </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(A.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!A.isEmpty())&#123;</span><br><span class="line">                B.addLast(A.removeLast());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> B.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="包含-min-函数的栈"><a href="#包含-min-函数的栈" class="headerlink" title="包含 min 函数的栈"></a>包含 min 函数的栈</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 <strong>min、push 及 pop 的时间复杂度都是 O(1)。</strong></p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.min();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.min();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a><strong>思路：</strong></h3><p>题目要求min、push、pop的时间复杂度都是O(1)，普通栈的push和pop时间复杂度是O(1)，但是min需要遍历整个链表找出最小的元素，所以时间复杂度为O(N)，所以我们就需要一个辅助栈B，并在push和pop时同时维护辅助栈B使其非严格降序。</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144045296.png" alt="image-20220125144045296"></p><p>push：</p><p>将插入元素压入栈A中</p><p>如果栈B为空或者压入栈中的元素小于B栈顶的元素，就将该元素压入栈B中。</p><p>pop：</p><p>将栈A中的栈顶元素弹出</p><p>如果栈B中的元素等于栈A弹出的元素，同时弹出栈B的栈顶元素，保持两个栈的同步</p><p>min：</p><p>返回栈B中的栈顶元素，即为栈A中的最小元素</p><h3 id="实现代码：-1"><a href="#实现代码：-1" class="headerlink" title="实现代码："></a><strong>实现代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; A,B;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        B = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        A.addLast(x);</span><br><span class="line">        <span class="keyword">if</span>(B.isEmpty() || x &lt;= B.getLast())&#123;</span><br><span class="line">            B.addLast(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B.getLast().equals(A.removeLast()))</span><br><span class="line">            B.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.getLast();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> B.getLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.min();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><h3 id="递归解法："><a href="#递归解法：" class="headerlink" title="递归解法："></a>递归解法：</h3><p>通过递归函数，在回溯时将链表的指向反转，同时返回头节点res。</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144054246.png" alt="image-20220125144054246"></p><p>递归函数：</p><p>首先向下遍历到链表尾部，当<code>head==null</code>或者<code>head.next==nul</code>l时开始回溯，首先将头节点保存到cur中，然后将<code>head.next.next = head</code>,即当<code>head</code>=4时，<code>head.next</code>为5，5.next赋值为4，就完成了将5反向指向4，但为了防止死循环，就需要将4指向5的指针删除，直至回溯完，返回cur头节点。</p><p><strong>实现代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">            <span class="comment">//cur赋值为5，因为返回的（形参）head = （实参）head.next，所以head = 4;  </span></span><br><span class="line">            ListNode cur = reverseList(head.next);</span><br><span class="line">            <span class="comment">//反转链表指向</span></span><br><span class="line">            head.next.next = head;</span><br><span class="line">            <span class="comment">//正向链表的连接切断，防止死循环</span></span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//返回头节点</span></span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针："><a href="#双指针：" class="headerlink" title="双指针："></a>双指针：</h3><p>首先定义三个指针，pre和cur用于反转链表指向，tmp用于临时存储变量，首先pre指向null，cur指向头指针，tmp指向cur.next，然后开始遍历，将cur的元素指向pre，</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144102588.png" alt="image-20220125144102588"></p><p><strong>代码实现:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            tmp = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="II-左旋转字符串"><a href="#II-左旋转字符串" class="headerlink" title="II. 左旋转字符串"></a>II. 左旋转字符串</h2><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;lrloseumgh&quot;, k = 6</span><br><span class="line">输出: &quot;umghlrlose&quot;</span><br></pre></td></tr></table></figure><h3 id="动态数组："><a href="#动态数组：" class="headerlink" title="动态数组："></a>动态数组：</h3><p>因为String在JAVA中，是用的final修饰，无法修改，所以创建一个StringBuilder对象，用于存储左旋转之后的字符串，从n开始遍历到字符串，保存n-最后的字符串，然后再遍历0-n的字符串，最后返回StringBuilder对象。</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseLeftWords</span><span class="params">(String s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &lt; length ; i++)</span><br><span class="line">            sb.append(s.charAt(i));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">            sb.append(s.charAt(i));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取子字符串"><a href="#取子字符串" class="headerlink" title="取子字符串"></a>取子字符串</h3><p>先通过<code>substring()</code>方法将0-n的子字符串和n-后面的字符串进行拼接并返回</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseLeftWords</span><span class="params">(String s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.substring(n)+s.substring(<span class="number">0</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h2><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</p><p>示例 1：</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144513981.png" alt="image-20220125144513981"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144519688.png" alt="image-20220125144519688"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[1,1],[2,1]]</span><br><span class="line">输出：[[1,1],[2,1]]</span><br></pre></td></tr></table></figure><p>示例 3：</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144525335.png" alt="image-20220125144525335"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[3,null],[3,0],[3,null]]</span><br><span class="line">输出：[[3,null],[3,0],[3,null]]</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br><span class="line">解释：给定的链表为空（空指针），因此返回 null。</span><br></pre></td></tr></table></figure><h3 id="哈希表："><a href="#哈希表：" class="headerlink" title="哈希表："></a>哈希表：</h3><p>思路：</p><p>首先判断链表head是否为空，如果为空则返回null，再创建一个Map哈希表和一个链表，哈希表中存储原链表和新链表的映射，然后通过两次遍历完成对新链表的赋值，第一次遍历将原链表和新链表的映射存储到Map中，第二次遍历将原链表的next和random赋值给新链表，最后返回新链表。</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144536673.png" alt="image-20220125144536673"></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        Map&lt;Node,Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//第一次遍历</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//将原链表的新链表映射存储到Map中</span></span><br><span class="line">            map.put(cur,<span class="keyword">new</span> Node(cur.val));</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="comment">//第二次遍历</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//将原链表的next和random赋值给新链表</span></span><br><span class="line">            map.get(cur).next = map.get(cur.next);</span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拼接-拆分"><a href="#拼接-拆分" class="headerlink" title="拼接+拆分"></a>拼接+拆分</h3><p>思路：</p><p>这个方法总共分三步</p><p>第一步先将链表的赋值与原链表拼接在一起</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144617051.png" alt="image-20220125144617051"></p><p>第二步再将原链表的random赋值给拼接后的链表</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144556044.png" alt="image-20220125144556044"></p><p>第三步再将拼接的链表进行拆分</p><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144629644.png" alt="image-20220125144629644"></p><p><strong>实现代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node next;</span></span><br><span class="line"><span class="comment">    Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">        this.next = null;</span></span><br><span class="line"><span class="comment">        this.random = null;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="comment">//第一次进行拼接</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//创建新拼接的节点</span></span><br><span class="line">            Node tmp = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">            <span class="comment">//拼接</span></span><br><span class="line">            tmp.next = cur.next;</span><br><span class="line">            cur.next = tmp;</span><br><span class="line">            cur = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="comment">//第二次遍历进行random的赋值</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.random != <span class="keyword">null</span>)</span><br><span class="line">            cur.next.random = cur.random.next;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第三次遍历进行拆分</span></span><br><span class="line">        cur = head.next; </span><br><span class="line">        Node pre = head;</span><br><span class="line">        <span class="comment">//保存头节点</span></span><br><span class="line">        Node res = head.next;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            pre.next = pre.next.next;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//单独创建原链表尾节点</span></span><br><span class="line">            pre.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h2><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3 </span><br></pre></td></tr></table></figure><h3 id="哈希表-Set-："><a href="#哈希表-Set-：" class="headerlink" title="哈希表(Set)："></a>哈希表(Set)：</h3><p>利用数据结构特点，容易想到使用哈希表（Set）记录数组的各个数字，当查找到重复数字则直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; dic = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dic.contains(num)) <span class="keyword">return</span> num;</span><br><span class="line">            dic.add(num);</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例:</p><p>现有矩阵 matrix 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="二叉排序树查找"><a href="#二叉排序树查找" class="headerlink" title="二叉排序树查找"></a>二叉排序树查找</h3><p><img src="/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/image-20220125144638301.png" alt="image-20220125144638301"></p><p>思路：</p><p>矩阵 matrix 可以将左下角的元素作为根节点，即可将其看成为二叉排序树搜索，根节点上面的数都比它小，根节点右边的数都比它大，然后对指定元素 target 进行搜索，如果当<code>matrix[i][j]</code>大于target时，i–节点向上移动，当其小于target时，j++节点向右移动，当其等于target时，直接返回true，直到搜索完矩阵，如果没有该元素，则返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = matrix.length-<span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( i &gt;= <span class="number">0</span> &amp;&amp; j &lt; matrix[<span class="number">0</span>].length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j] &gt; target) i--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[i][j] &lt; target) j++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;算法-一周目&quot;&gt;&lt;a href=&quot;#算法-一周目&quot; class=&quot;headerlink&quot; title=&quot;算法(一周目)&quot;&gt;&lt;/a&gt;算法(一周目)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/01/25/%E7%AE%97%E6%B3%95%E7%AC%94%E8</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机械硬盘与固态硬盘详解</title>
    <link href="http://example.com/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-01-25T06:53:00.000Z</published>
    <updated>2022-01-25T06:56:40.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><table><thead><tr><th>名称</th><th>机械硬盘</th><th>固态硬盘</th></tr></thead><tbody><tr><td>英文名称</td><td>Hard Disk Drive（HDD）</td><td>Solid State Disk（SSD）</td></tr><tr><td>存储方式</td><td>磁性碟片</td><td>闪存颗粒</td></tr><tr><td>容量</td><td>较小</td><td>大</td></tr><tr><td>读写速度</td><td>极快</td><td>一般</td></tr><tr><td>写入次数</td><td>5000~100000次</td><td>没有限制</td></tr><tr><td>工作噪声</td><td>极低</td><td>有</td></tr><tr><td>工作温度</td><td>极低</td><td>较高</td></tr><tr><td>防震</td><td>很好</td><td>怕震动</td></tr><tr><td>重量</td><td>低</td><td>高</td></tr></tbody></table><h2 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h2><p><strong>整体结构</strong></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142253284.png" alt="image-20220125142253284"></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142306885.png" alt="image-20220125142306885"></p><p>双磁头上下读取</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142320477.png" alt="image-20220125142320477"></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142331211.png" alt="image-20220125142331211"></p><ul><li>磁道为同心圆，最外侧同心圆为0磁道（磁道只是逻辑结构，在盘面上没有真正的同心圆）</li><li>通常一面有上千磁道，磁道之间并不是紧挨着，因为磁化单元相隔太近晖相互影响</li><li>扇骨将磁道分为若干弧段，形成扇区，为磁盘最小单元，大小固定为512 Byte</li><li>盘片从外向内对磁道编号，相同编号的磁道形成柱面</li><li>大小计算公式：磁头数 x 柱面数 x 扇区数 x 每个扇区的大小</li><li>转速越高，内部传输率越快</li></ul><p><strong>硬盘接口</strong></p><ul><li>IDE硬盘接口（Integrated Drive Eectronics，并口，即电子集成驱动器），也称作 “ATA硬盘” 或 “PATA硬盘”，早期机械硬盘接口，理论平均速度为133 MB/s。</li></ul><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142349988.png" alt="image-20220125142349988"></p><ul><li><p>SATA接口（Serial ATA，串口），是速度更高的硬盘标准，具备了更高的传输速度，并具备了更强的纠错能力。目前已经是 SATA 三代，理论平均速度达到 600 MB/s</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142401623.png" alt="image-20220125142401623"></p></li><li><p>SCSI 接口（Small Computer System Interface，小型计算机系统接口），广泛应用在服务器上，具有应用范围广、多任务、带宽大、CPU 占用率低及热插拔等优点，理论传输速度达到 320 MB/s</p></li></ul><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142411461.png" alt="image-20220125142411461"></p><ul><li>光纤通道（Fibre Channel），为提升多硬盘储存系统的速度和灵活性才开发的，它的出现大大提升了多硬盘系统的通信速度。光纤通道的主要特点有：热插拔性、高速带宽、远程连接、连接设备数量大等。</li></ul><h2 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h2><p><a href="https://www.jb51.net/hardware/yingpan/613669.html">固态硬盘详解</a></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142423430.png" alt="image-20220125142423430"></p><p>固态硬盘，一种是采用闪存作为存储介质的；另一种是采用DRAM作为存储介质的。目前使用较多的主要是采用闪存作为存储介质的固态硬盘。</p><p><strong>颗粒分类</strong></p><p>SLC：S是single，单一的意思，如single dog-单身狗。所以，SLC的每个存储单元只存储1bit的数据，这种存储方式稳定性强，读写速度很快，而且不会出错，并且寿命长，因此价格也是最贵的。</p><p>MLC：M是multi，多个的意思，一般我们说的MLC就是指两个，所以，MLC的每个存储单元要放2bit的数据。</p><p>TLC：T是triple，没错，就是“三杀”的那个 triple kill！</p><p>所以，TLC颗粒的每个存储单元要挤3bit的数据。(由于MLC是多个bit的意思，多个包含3个，有些厂商，如三星，会把自家使用TLC颗粒的EVO系列固态硬盘称为“3bit MLC”）</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142531919.png" alt="image-20220125142531919"></p><p>SLC颗粒：1bit独占一个车位，这辆车来去自如，不会出现错误，而且速度很快，由于车位使用频率不高，所以寿命也很长，但是成本很高。</p><p>MLC颗粒：2bit占一个车位，1车2车进出需要管理员调度，效率稍低，所以速度会慢一些，车位使用频率高了一倍，所以寿命也会变短一些。</p><p>TLC颗粒：3bit挤一个车位，进出调度更复杂，效率较低，所以速度慢，还容易出错，寿命短一些。</p><p>虽然我们说TLC颗粒寿命短，但是那是相对于SLC和MLC而言的，经过重度测试，TLC颗粒正常使用5年以上是没有问题的。TLC颗粒固态硬盘也是目前最常见的，主要是这个颗粒SSD价格亲民，大众用户够用，因此最常见。</p><p>现在世界上能自主生产颗粒的厂家有：intel、三星、闪迪、东芝、镁光（英睿达）、海力士。所有正规的固态硬盘使用的都是这几家的检验合格的原厂颗粒。如使用自家颗粒的inter、三星、闪迪、镁光（英睿达）、东芝等；还有虽然自己不会生产颗粒，但是使用从原厂购买颗粒的浦科特、海盗船、建兴等，所以购买时可以优选选择这些品牌。</p><p>市面上还有一些使用“白片”、“黑片”颗粒的固态硬盘的厂家，“白片”是指原厂检验不合格的瑕疵品，被偷偷卖给下游工厂来制作固态硬盘。“黑片”是连白片都比不上的废片，这类硬盘价格通常会远低于原厂颗粒的硬盘，给人一种“高性价比”的错觉。</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142544188.png" alt="image-20220125142544188"></p><p><strong>主控</strong></p><p>如果说存储空间是一个超大的停车场，那么主控就是这个超大停车场的“管理员”啦，他负责指挥每一辆车准确、合理的进出自己的停车位。</p><p>对于这么大的一个停车场，特别是三辆车挤一个车位的TLC颗粒的停车场来说，管理员是操碎了心，每天都累成狗一样。所以这个主控“管理员”必须要有过硬的身体素质（硬件要好）和扎实的管理方法（固件要好）。</p><p>好的主控+优秀的固件就相当于让受过专业训练的交警来管理停车场，而渣的主控+渣的固件就相当于让一个骨瘦如柴，没有受过教育和训练的人来管理，所以啊，即使你的停车场修的很牢固，但是没用多久，管理员先累死了，整个停车场也就不能用了。</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142614931.png" alt="image-20220125142614931"></p><p>比较好的主控品牌有：马牌（Marvell）、SandForce、三星、intel、东芝等。近些年，一些台湾的主控品牌如：慧荣、群联也在迎头追赶。</p><p><strong>缓存</strong></p><p>当你要存入很大、很多数据的时候，就是一次性往停车场存很多车的时候，主控“管理员”是忙不过来的。但是CPU很厉害啊：“我已经把这么多的车（数据）都给你送过来了，你工作慢也不能让我干等着啊！我还有很多事要忙的！”</p><p>如果没有高速缓存这个临时的的停车场，他CPU就得干等着，我们就会感觉“慢”和“卡”，但是如果我们有一个高速缓存这么一个临时的停车场，管理员就可以说：“我先把剩下的这些车都放在这个临时的停车场中，我忙完眼前的事就给这些车安排车位。”于是CPU就可以高兴地忙自己的事去了，我们就会感觉电脑速度”快”、“流畅”。</p><p>但是缓存这个“临时停车场”有个弊端，如果硬盘没有采取断电保护措施的话，一旦断电，停在这里的车可能就会不翼而飞了。（正规厂家都会有断电保护措施，无需太担心）</p><p><strong>3D NAND堆栈技术</strong></p><p>这是一个近几年才开始流行的技术。如果你还记得前面说的停车场的话，就很好理解这个技术了。</p><p>3D堆栈啊，是由于近些年固态硬盘容量越来越大，所以每个存储单元“停车位”之间的密度越来越大，所以我们就把普通的一层的停车场盖成了许多层的楼层式停车场。这样一来，每个停车位之间就不用那么拥挤了，干扰变了，所以性能也就变好了。而对于厂家来说，成本也就更低。</p><p><strong>接口</strong></p><p>接口就是把几条导电的铜线做成不同形状的插头。市面上主流的固态硬盘接口有 SATA、mSATA、m.2、PCI-E插槽这4种。</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142801251.png" alt="image-20220125142801251"></p><p>他们之间除了在外观上有不同外，性能上也有较大的区别。我会在下文中提到，在这之前我们还要先说一些题外话。</p><p><strong>总线：</strong></p><p>总线是我们看不到的东西，可以理解为数据传输的“公路”，有sata总线和PCI-e总线两种。</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142831546.png" alt="image-20220125142831546"></p><p>假如我们要从P城开车到Y城，走PCI-E总线就相当于走两地直达的高速公路，而走SATA总线的就相当于走了比较绕的城乡公路。</p><p>PCI-E总线又有几个等级，PCIE×1、PCIE×2、PCIE×4、PCIE×8、PCIE×16，数字越大，速度就越快。目前的固态硬盘都是用的×2、×4这个等级的，其中×4的最大速度已经可以达到 3000 MB/s以上了。说到这，有机灵的小伙伴可能已经想到了我们用的显卡早就已经是 ×16的级别了。</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142849493.png" alt="image-20220125142849493"></p><p><strong>最后是协议</strong></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142911027.png" alt="image-20220125142911027"></p><p>前面已经说了，PCI-E ×4 是一条平坦的高速公路，但是我们都知道，现实中的高速公路上每辆车的车速也是不同的，跑车总是会比轿车快。而拥有NVMe协议的固态硬盘就相当于专门针对这条平坦的高速公路而设计的超级跑车。同样是走的PCI-E ×4 的车道，不支持NVMe协议的硬盘最大只能跑1500MB/s，而支持NVMe协议的硬盘就可以跑到3000MB/s甚至以上。</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142924845.png" alt="image-20220125142924845"></p><p>知道了这些我们再说接口就容易多了。</p><p><strong>SATA接口：</strong></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125142946925.png" alt="image-20220125142946925"></p><p>SATA接口属于老式的接口，分SATA 3GB和SATA6 GB，我们的机械硬盘使用的也是这种接口，兼容性强，新老电脑基本都通用。只不过，这种接口SSD速度稍慢，延迟稍高，最大速度不会超过600MB/s</p><p><strong>mSATA接口：</strong></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125143012420.png" alt="image-20220125143012420"></p><p>这种接口不多，一般会用在早期笔记本上。只不过，如今笔记本大都用的是M.2接口，因此这种接口基本逐渐被淘汰了。</p><p><strong>M.2接口：</strong></p><p>M.2接口有两种：M key和B key，如图所示</p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125143025557.png" alt="image-20220125143025557"></p><p>M型接口的固态硬盘一般来说性能较好，价格普遍比SATA接口SSD贵，并且需要主板配备M.2接口，目前主流新主板都配备这个接口。而很多老主板或者一些新入门主板都没有这个接口，因此购买这种硬盘之前，需要了解下主板是否带有M.2全速接口。由于走PCI-E×4这条高速功路，速度能轻松达到1500MB/s以上，如果还支持NVMe协议那速度能轻松达到2000MB/s及以上。</p><p>B&amp;M型接口的固态硬盘兼容性好，两种M.2的插槽都能用，但是速度稍慢，虽大也就1000MB/s。</p><p><strong>PCI-E接口：</strong></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125143041444.png" alt="image-20220125143041444"></p><p>这个长得跟显卡一样的固态硬盘也是 PCI-E ×4的接口，支持PCI-E ×4的总线。但是现在的主板大多数是没有PCIE-4的插槽的。所以一般都是接在显卡的插槽里使用的，这种接口固态硬盘速度虽然快，但很多平台可能不支持，因此市面上相对不是很常见。</p><p><strong>4KB随机读写</strong></p><p><img src="/2022/01/25/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%B8%8E%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E8%AF%A6%E8%A7%A3/image-20220125143101205.png" alt="image-20220125143101205"></p><p>说了这么多，终于又回到正题了。</p><p>固态硬盘虽然顺序读写速度超快，但是那是只有在读写一整个大文件（如一部电影）时才能体会到它的优势，而影响我们日常使用的是硬盘的4K 随机读写速度（这里的4K是4KB）。</p><p><strong>举个例子吧：</strong></p><p>小明去一个大商场买东西，售货员问小明：“你要买什么呢？”</p><p>小明说：“阿姨，我要买一台大电视！”“好的！”虽然电视很大很重，但是售货员只要跑一趟花点力气就能把大电视给小明拿过来。这就是大文件的持续读写速度。</p><p>小明又说：“阿姨，我要一颗小白兔奶糖、一包辣条、一瓶可乐、一只铅笔、一个小猪佩奇、一卷卫生纸……”售货员：“#￥@%……&amp;*”这些东西虽然又轻又小，但是量多，售货员阿姨就要跑很多地方才能完成小明的请求，速度自然就慢了下来，这就是4kb随机读写。</p><p>很遗憾的是我们日常使用电脑时大多都是这种小文件的随机读写。所以，我们在挑选固态的时候要重点关注硬盘的4k随机读写性能。（商家很少会标出来，可以看商品评价中的晒单）</p><p>说了这么久，终于到了尾声。</p><p><strong>总结：</strong></p><p>1、固太硬盘最重要的是颗粒和主控，所以尽量买能自主研发生产颗粒厂家的品牌，如intel、三星、闪迪、东芝、镁光（英睿达）、海力士，或者使用这几家原厂颗粒的品牌如浦科特、海盗船、建兴等。</p><p>2.SLC、MLC、TLC这三种颗粒在速度和使用寿命上存在很大差距，但是现在是TLC颗粒的时代，TLC虽然是这几个中最差的，但是正常使用的情况下用5年以上没有问题，而且容量越大，寿命也就越久。况且TLC有很高的价格优势。</p><p>3.主控也很重要，一般情况下，MLC颗粒+马牌（Marvell）主控的固态硬盘是最佳的选择。TLC颗粒+马牌（Marvell）主控也不错，当然，三星自己家的也相当优秀。</p><p>4.120GB装个系统，装几个日常软件、装一个大型游戏就差不多满了，建议首选240GB容量。</p><p>5.缓存越大越好。</p><p>6.新配电脑的用户建议选择M.2接口的硬盘，因为这是未来的主流。老电脑升级的用户要检查主板是否有M.2插槽。</p><p>7.4k读写性能才是影响日常体验的重中之重，购买前需要重点关注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;存储&quot;&gt;&lt;a href=&quot;#存储&quot; class=&quot;headerlink&quot; title=&quot;存储&quot;&gt;&lt;/a&gt;存储&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;机械硬盘&lt;/th&gt;
&lt;th&gt;固态硬盘&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="硬件" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Excel表格导入脚本输出SQL</title>
    <link href="http://example.com/2022/01/25/Excel%E8%A1%A8%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%84%9A%E6%9C%AC%E8%BE%93%E5%87%BASQL/"/>
    <id>http://example.com/2022/01/25/Excel%E8%A1%A8%E6%A0%BC%E5%AF%BC%E5%85%A5%E8%84%9A%E6%9C%AC%E8%BE%93%E5%87%BASQL/</id>
    <published>2022-01-25T03:12:01.000Z</published>
    <updated>2022-01-25T03:13:41.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读取Excel表格的数据生成SQL语句-批量插入"><a href="#读取Excel表格的数据生成SQL语句-批量插入" class="headerlink" title="读取Excel表格的数据生成SQL语句(批量插入)"></a>读取Excel表格的数据生成SQL语句(批量插入)</h2><p><strong>首先添加依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelData_MySQL</span> </span>&#123;</span><br><span class="line">    <span class="comment">//mysql</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XSSFSheet sheet = <span class="keyword">null</span>;   <span class="comment">//声明XSSFSheet对象</span></span><br><span class="line">        String newCell = <span class="string">&quot;&quot;</span>;      <span class="comment">//用作生成符合sql规范的字符串</span></span><br><span class="line">        XSSFRow row = <span class="keyword">null</span>;       <span class="comment">//excel表中的行</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">0</span>;             <span class="comment">//excel表中的行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = <span class="number">0</span>;          <span class="comment">//excel表中的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));查看当前文件夹路径，方便下方输入文件位置</span></span><br><span class="line">        <span class="comment">//建立输入流获取excle文件对象</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/1.xlsx&quot;</span>);</span><br><span class="line">        <span class="comment">//获取excel文件的工作簿对象</span></span><br><span class="line">        XSSFWorkbook sheets = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">//获取工作簿中的工作表对象</span></span><br><span class="line">        sheet = sheets.getSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下生成sql语句</span></span><br><span class="line">        <span class="comment">//直接写出sql头语句，可根据实际情况修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;insert into 表名 (字段名, 字段名, 字段名, 字段名) values &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取行数</span></span><br><span class="line">        rows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">        <span class="comment">//因为excel中第一行通常为各个列的名字，故舍去，从第二行开始，索引为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            newCell = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到Excel工作表的行</span></span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//得到列数</span></span><br><span class="line">            columns = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//UUID.randomUUID().toString()：生成随机ID</span></span><br><span class="line">            <span class="comment">//需要生成随机ID</span></span><br><span class="line">            newCell =  newCell + UUID.randomUUID().toString() +<span class="string">&quot;\&quot;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//不需要生成随机ID</span></span><br><span class="line">            <span class="comment">//newCell =  newCell+&quot;\&quot;&quot;+&quot;,&quot;+&quot;\&quot;&quot;;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环遍历一行中的每一列数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="comment">//获取一列的数据</span></span><br><span class="line">                String cell = row.getCell(j).toString();</span><br><span class="line">                <span class="comment">//为了符合sql规范，第一列数据前不需要加”,“,故作判断,如果添加随机ID就是第二列不需要加”,“</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCell = <span class="string">&quot;\&quot;&quot;</span> + newCell + cell +<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newCell =  newCell + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&quot;&quot;</span> + cell +<span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//一行数据读取结束，为了符合sql规范，最后一行结尾应该用”;“表示，故作判断</span></span><br><span class="line">            <span class="keyword">if</span> (i == rows - <span class="number">1</span>) &#123;</span><br><span class="line">                newCell = <span class="string">&quot;(&quot;</span> + newCell + <span class="string">&quot;);&quot;</span>;</span><br><span class="line">                <span class="comment">//除去数字中的”.0“</span></span><br><span class="line">                String rpStr = newCell.replace(<span class="string">&quot;.0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(rpStr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newCell = <span class="string">&quot;(&quot;</span> + newCell + <span class="string">&quot;),&quot;</span>;</span><br><span class="line">                <span class="comment">//除去数字中的”.0“</span></span><br><span class="line">                String rpStr = newCell.replace(<span class="string">&quot;.0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(rpStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//流操作后关闭流，养成好习惯</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        sheets.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>Oracle不支持insert into … values…批量插入，所以使用多条的insert方法，多次插入，以达到批量插入的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelData_Oracle</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Oracle</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//声明XSSFSheet对象</span></span><br><span class="line">        XSSFSheet sheet = <span class="keyword">null</span>;</span><br><span class="line">        String newCell = <span class="string">&quot;&quot;</span>;<span class="comment">//用作生成符合sql规范的字符串</span></span><br><span class="line">        XSSFRow row = <span class="keyword">null</span>;<span class="comment">//excel表中的行</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="number">0</span>;<span class="comment">//excel表中的行数</span></span><br><span class="line">        <span class="keyword">int</span> columns = <span class="number">0</span>;<span class="comment">//excel表中的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(System.getProperty(&quot;user.dir&quot;));查看当前文件夹路径，方便下方输入文件位置</span></span><br><span class="line">        <span class="comment">//建立输入流获取excle文件对象</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/1.xlsx&quot;</span>);</span><br><span class="line">        <span class="comment">//获取excel文件的工作簿对象</span></span><br><span class="line">        XSSFWorkbook sheets = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">        <span class="comment">//获取工作簿中的工作表对象</span></span><br><span class="line">        sheet = sheets.getSheet(<span class="string">&quot;Sheet1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取行数</span></span><br><span class="line">        rows = sheet.getPhysicalNumberOfRows();</span><br><span class="line">        <span class="comment">//因为excel中第一行通常为各个列的名字，故舍去，从第二行开始，索引为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            newCell = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">//得到Excel工作表的行</span></span><br><span class="line">            row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//得到列数</span></span><br><span class="line">            columns = row.getPhysicalNumberOfCells();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环遍历一行中的每一列数据</span></span><br><span class="line">            newCell =  newCell + UUID.randomUUID().toString() +<span class="string">&quot;\&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;\&#x27;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">                <span class="comment">//获取一列的数据</span></span><br><span class="line">                String cell = row.getCell(j).toString();</span><br><span class="line">                <span class="comment">//为了符合sql规范，第一列数据前不需要加”,“,故作判断</span></span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                    newCell = <span class="string">&quot;\&#x27;&quot;</span> + newCell + cell +<span class="string">&quot;\&#x27;&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newCell =  newCell + <span class="string">&quot;,&quot;</span> + <span class="string">&quot;\&#x27;&quot;</span> + cell +<span class="string">&quot;\&#x27;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                newCell = <span class="string">&quot;INSERT INTO 字段名 (字段名,字段名,字段名,字段名) VALUES&quot;</span> + <span class="string">&quot;(&quot;</span> + newCell + <span class="string">&quot;);&quot;</span>;</span><br><span class="line">                <span class="comment">//除去数字中的”.0“</span></span><br><span class="line">                String rpStr = newCell.replace(<span class="string">&quot;.0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(rpStr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//流操作后关闭流，养成好习惯</span></span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        sheets.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;读取Excel表格的数据生成SQL语句-批量插入&quot;&gt;&lt;a href=&quot;#读取Excel表格的数据生成SQL语句-批量插入&quot; class=&quot;headerlink&quot; title=&quot;读取Excel表格的数据生成SQL语句(批量插入)&quot;&gt;&lt;/a&gt;读取Excel表格的数据生</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>通过POI导入Excel表格数据修改数据库</title>
    <link href="http://example.com/2022/01/25/%E9%80%9A%E8%BF%87POI%E5%AF%BC%E5%85%A5Excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2022/01/25/%E9%80%9A%E8%BF%87POI%E5%AF%BC%E5%85%A5Excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-01-25T02:28:01.000Z</published>
    <updated>2022-01-26T06:18:31.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过POI导入Excel表格数据修改数据库"><a href="#通过POI导入Excel表格数据修改数据库" class="headerlink" title="通过POI导入Excel表格数据修改数据库"></a>通过POI导入Excel表格数据修改数据库</h1><p><strong>背景：</strong></p><p>利用前端传过来的Excel文件，查询数据库中与Excel表中第一列和第二列相等的数据并对其的第三列数据进行修改。</p><p><strong>完整代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">updateGoodsRepositoryPrice</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XSSFSheet sheet = <span class="keyword">null</span>;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (multipartFile.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Excel文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(multipartFile.getInputStream());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">        String title = sheet.getRow(<span class="number">0</span>).getCell(<span class="number">0</span>).getStringCellValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (title.indexOf(<span class="string">&quot;器材编码&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;第一列必须为器材编码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String title1 = sheet.getRow(<span class="number">0</span>).getCell(<span class="number">1</span>).getStringCellValue();</span><br><span class="line">        <span class="keyword">if</span> (title1.indexOf(<span class="string">&quot;名称规格型号&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;第二列必须为名称规格型号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String title3 = sheet.getRow(<span class="number">0</span>).getCell(<span class="number">2</span>).getStringCellValue();</span><br><span class="line">        <span class="keyword">if</span> (title3.indexOf(<span class="string">&quot;单价&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;第三列必须为单价&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sheet.removeRow(sheet.getRow(<span class="number">0</span>));</span><br><span class="line">        Double a = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Row row : sheet)&#123;</span><br><span class="line">            <span class="keyword">if</span> (row.getCell(<span class="number">0</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Query query3 = Query.from(GoodsRepositoryModel.META_ID);</span><br><span class="line">            <span class="comment">//消除科学计数法格式</span></span><br><span class="line">            DecimalFormat df=<span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            a = Double.valueOf(row.getCell(<span class="number">0</span>).toString());</span><br><span class="line">            String Goods_No = df.format(a);</span><br><span class="line"></span><br><span class="line">            query3.and(Condition.eq(GoodsRepositoryModel.GOODS_NO, Goods_No),</span><br><span class="line">                Condition.eq(GoodsRepositoryModel.GOODS_NAME, row.getCell(<span class="number">1</span>).getStringCellValue()));</span><br><span class="line">            GoodsRepositoryModel goodsRepositoryModel3 = <span class="keyword">this</span>.queryOne(query3);</span><br><span class="line">            String price = row.getCell(<span class="number">2</span>).toString();</span><br><span class="line">            logger.debug(query3.toString());</span><br><span class="line">            <span class="comment">//单价为小于等于0</span></span><br><span class="line">            <span class="keyword">if</span>(Double.parseDouble(price) &lt;= <span class="number">0.0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;单价不能小于0.0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//计算结算金额</span></span><br><span class="line">            BigDecimal amount = <span class="keyword">new</span> BigDecimal(goodsRepositoryModel3.getCount()).multiply(<span class="keyword">new</span> BigDecimal(price));</span><br><span class="line"></span><br><span class="line">            goodsRepositoryModel3.setUpdate_time(DateUtil.getDate());</span><br><span class="line">            goodsRepositoryModel3.setAmount(amount.toString());</span><br><span class="line">            goodsRepositoryModel3.setPrice(price);</span><br><span class="line">            <span class="keyword">this</span>.update(goodsRepositoryModel3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;模块导入成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;器材编码或名称规格型号错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException runtimeException)&#123;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>,runtimeException.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        result.put(<span class="string">&quot;success&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;物资导入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        workbook.close();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="MultipartFile类"><a href="#MultipartFile类" class="headerlink" title="MultipartFile类"></a>MultipartFile类</h3><p>使用MultipartFile类，项目必须使用Spring框架，否则无法引入这个类，中文翻译为“多组件文档”，主要使用这个类来实现以表单的形式进行文件上传功能。</p><p><strong>源码注解</strong></p><p><img src="/2022/01/25/%E9%80%9A%E8%BF%87POI%E5%AF%BC%E5%85%A5Excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220125102323405.png" alt="image-20220125102323405"></p><ul><li>一种可以接收使用多种请求方式来进行上传文件的代表形式。也就是说，如果你想用spring框架来实现项目中的文件上传功能，则MultipartFile可能是最合适的选择，而这里提到的多种请求方式则可以通俗理解为以表单的形式提交。</li><li>这个文件内容可以存储到内存中或者存储在磁盘的临时位置上。</li><li>  无论发生哪种情况，用户都可以自由地拷贝文件内容到session存储中，或者以一种永久存储的形式进行存储，如果有需要的话。</li><li>  这种临时性的存储在请求结束之后将会被清除掉</li></ul><p><strong>常用方法</strong></p><p>MultipartFile是一个接口，继承InputStreamSource，所以MultipartFile文件可以转换为输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipartFile.getInputStream();</span><br></pre></td></tr></table></figure><p><strong>使用技巧</strong></p><ul><li>在使用MultipartFile进行参数传递的时候，可以将MultipartFile声明为一个数组，这样就可以支持多文件传输了。</li><li>使用MultipartFile的getSize()方法来获取到传输文件的大小，这样就可以限定传输过来的文件的大小了。</li></ul><h3 id="toString-和getStringCellValue"><a href="#toString-和getStringCellValue" class="headerlink" title="toString()和getStringCellValue()"></a>toString()和getStringCellValue()</h3><p><strong>toString()：</strong></p><p>返回该对象的字符串表示。通常，toString方法返回一个“文本表示”该对象的字符串。结果应该是一个简洁但内容丰富的表述，对于一个人来说很容易阅读。建议所有子类重写此方法。</p><p>类Object的toString方法返回一个字符串，其中包含对象为实例的类的名称，符号字符“@”和对象的哈希代码的无符号十六进制表示形式。换句话说，此方法返回一个字符串等于的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + &#x27;@&#x27; + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure><p><strong>返回：</strong></p><p>对象的字符串表示</p><p><strong>getStringCellValue():</strong></p><p>获取单元格的值作为字符串</p><p>对于数值细胞，这将抛出异常。对于空白单元格，这将返回一个空字符串。对于不是字符串公式的formulaCell，这会引发异常。</p><p><strong>返回：</strong></p><p> 细胞作为字符串</p><p><strong>例如值：</strong></p><p>如果单元格包含日期字段，并使用<code>toString()</code>你可能会得到正确的日期格式的值，但从来没有得到任何的异常，而在第二种情况，你会得到<code>IllegalArgumentException</code></p><p><strong>IllegalStateException异常</strong></p><p>cell.getStringCellValue() 去获取单元格数据的，POI会判断单元格的类型，如果非字符串类型就会抛出上面的异常。</p><p><strong>解决方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cell.setCellType(Cell.CELL_TYPE_STRING); <span class="comment">// 将该列单元格类型设置为String</span></span><br></pre></td></tr></table></figure><h3 id="POI导入长数据会变成1-E10科学计数法"><a href="#POI导入长数据会变成1-E10科学计数法" class="headerlink" title="POI导入长数据会变成1.E10科学计数法"></a>POI导入长数据会变成1.E10科学计数法</h3><p>Excel中的单元格格式无论怎样最后传到Java代码中都会强制转换为1.E10科学计数法的形式，即使POI提供的强制设置Excel单元格为文本类型的代码，也对这个问题起不到关键性的作用。我们需要对传过来的数值进行格式重置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">Double a = Double.valueOf(Cell.toString());</span><br><span class="line">String b = df.format(a);</span><br></pre></td></tr></table></figure><h3 id="POI"><a href="#POI" class="headerlink" title="POI"></a>POI</h3><p>HSSF提供读写Microsoft Excel XLS格式档案的功能。</p><p>XSSF提供读写Microsoft Excel OOXML XLSX格式档案的功能。</p><p>HWPF提供读写Microsoft Word DOC格式档案的功能。</p><p>HSLF提供读写Microsoft PowerPoint格式档案的功能。</p><p>HDGF提供读Microsoft Visio格式档案的功能。</p><p>HPBF提供读Microsoft Publisher格式档案的功能。</p><p>HSMF提供读Microsoft Outlook格式档案的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过POI导入Excel表格数据修改数据库&quot;&gt;&lt;a href=&quot;#通过POI导入Excel表格数据修改数据库&quot; class=&quot;headerlink&quot; title=&quot;通过POI导入Excel表格数据修改数据库&quot;&gt;&lt;/a&gt;通过POI导入Excel表格数据修改数据库&lt;/</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SQL语句</title>
    <link href="http://example.com/2021/12/24/SQL/"/>
    <id>http://example.com/2021/12/24/SQL/</id>
    <published>2021-12-24T15:00:00.000Z</published>
    <updated>2022-01-25T06:51:38.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>SELECT <strong>distinct</strong> university from user_profile</p><h2 id="返回前几行"><a href="#返回前几行" class="headerlink" title="返回前几行"></a>返回前几行</h2><p>select device_id FROM user_profile <strong>limit 2</strong></p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>select device_id <strong>AS user_infos_example</strong> FROM user_profile</p><h2 id="排除"><a href="#排除" class="headerlink" title="排除"></a>排除</h2><p>SELECT device_id,gender,age,university from user_profile where university <strong>not in (‘复旦大学’)</strong></p><h2 id="过滤空值"><a href="#过滤空值" class="headerlink" title="过滤空值"></a>过滤空值</h2><p>SELECT device_id,gender,age,university from user_profile where age <strong>is not null</strong></p><h2 id="含有"><a href="#含有" class="headerlink" title="含有"></a>含有</h2><p>SELECT device_id,age,university from user_profile where university <strong>like “%北京%”</strong></p><h2 id="最高值"><a href="#最高值" class="headerlink" title="最高值"></a>最高值</h2><p>SELECT <strong>max(gpa)</strong> AS gpa from user_profile</p><p>或者</p><p>SELECT gpa from user_profile <strong>ORDER BY gpa DESC LIMIT 1</strong></p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>SELECT gender,university FROM user_profile <strong>GROUP BY</strong> university,gender</p><h2 id="分组过滤"><a href="#分组过滤" class="headerlink" title="分组过滤"></a>分组过滤</h2><p>SELECT  university,AVG(question_cnt),AVG(answer_cnt)<br>FROM  user_profile<br><strong>GROUP BY</strong><br>university<br><strong>HAVING</strong><br>AVG(question_cnt)&lt; 5  OR AVG(answer_cnt)&lt;20</p><h2 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h2><p>SELECT university,AVG(question_cnt)<br>FROM user_profile<br><strong>GROUP BY</strong> university<br><strong>ORDER BY</strong> AVG(question_cnt) <strong>ASC</strong></p><h2 id="联表"><a href="#联表" class="headerlink" title="联表"></a>联表</h2><p>SELECT u.device_id,q.question_id,q.result<br>FROM user_profile u <strong>join</strong> question_practice_detail q <strong>on</strong> q.device_id = u.device_id<br>WHERE u.university = “浙江大学”</p><h2 id="结果不去重"><a href="#结果不去重" class="headerlink" title="结果不去重"></a>结果不去重</h2><p>SELECT device_id,gender,age,gpa<br>FROM user_profile<br>WHERE university = “山东大学”<br><strong>union all</strong><br>SELECT device_id,gender,age,gpa<br>FROM user_profile<br>WHERE  gender = “male” </p><p><strong>union 相当于 or 但是or和union自带去重，union all不去重</strong></p><h2 id="CASE函数"><a href="#CASE函数" class="headerlink" title="CASE函数"></a>CASE函数</h2><p>SELECT <strong>CASE when</strong> age &lt; 25 or age is NULL *<em>then** “25岁以下”<br>            when age &gt;= 25 <strong>then</strong> “25岁及以上”<br>            <strong>end</strong> AS age_cut,COUNT(</em>)<br>FROM user_profile<br>GROUP BY age_cut</p><h2 id="统计每日"><a href="#统计每日" class="headerlink" title="统计每日"></a>统计每日</h2><p>SELECT <strong>day(date)</strong> ,COUNT(*)<br>FROM question_practice_detail<br>WHERE <strong>MONTH(date) = “8” and YEAR(date) = “2021”</strong><br>GROUP BY date</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;h2 id=&quot;去重&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2学习笔记</title>
    <link href="http://example.com/2021/11/26/SpringBoot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/11/26/SpringBoot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-26T03:03:09.000Z</published>
    <updated>2022-04-05T12:48:01.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="56-Web原生组件的注入（Servlet、Filter、Listener）"><a href="#56-Web原生组件的注入（Servlet、Filter、Listener）" class="headerlink" title="56 Web原生组件的注入（Servlet、Filter、Listener）"></a>56 Web原生组件的注入（Servlet、Filter、Listener）</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#howto-add-a-servlet-filter-or-listener">官方文档 - Servlets, Filters, and listeners</a></p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=56">视频地址</a></p><h3 id="使用Servlet-API"><a href="#使用Servlet-API" class="headerlink" title="使用Servlet API"></a>使用Servlet API</h3><h4 id="MyServlet类"><a href="#MyServlet类" class="headerlink" title="MyServlet类"></a>MyServlet类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问映射</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;66666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@WebServlet直接响应，没有经过Spring的拦截器</strong></p><p>主配置类中同时编写注解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//自动将Servlet扫描进去</span><br><span class="line">@ServletComponentScan(basePackages = &quot;被扫描的包&quot;)</span><br></pre></td></tr></table></figure><p><strong>@ServletComponentScan指定原生Servlet组件都放在哪里</strong></p><p><strong>basePackages默认扫描主配置类同一个包及其子包中的servlet（也可以在需要被扫描的包中使用@ComponentScan注解）</strong></p><h4 id="MyFilter类"><a href="#MyFilter类" class="headerlink" title="MyFilter类"></a>MyFilter类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//urlPatterns过滤路径</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns=&#123;&quot;/css/*&quot;,&quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException, IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter工作&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyServletContextListener类"><a href="#MyServletContextListener类" class="headerlink" title="MyServletContextListener类"></a>MyServletContextListener类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MySwervletContextListener监听到项目初始化完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MySwervletContextListener监听到项目销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用RegistrationBean"><a href="#使用RegistrationBean" class="headerlink" title="使用RegistrationBean"></a>使用RegistrationBean</h3><h4 id="MyRegistConfig配置类"><a href="#MyRegistConfig配置类" class="headerlink" title="MyRegistConfig配置类"></a>MyRegistConfig配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（proxyBeanMethods = true）: 保证依赖的组件始终是单实例的</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/my02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line"><span class="comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = <span class="keyword">new</span> MySwervletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="59-定制化原理-springboot的定制化组件的几种方式"><a href="#59-定制化原理-springboot的定制化组件的几种方式" class="headerlink" title="59 定制化原理-springboot的定制化组件的几种方式"></a>59 定制化原理-springboot的定制化组件的几种方式</h2><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=59">视频地址</a></p><h3 id="定制化的常见方式"><a href="#定制化的常见方式" class="headerlink" title="定制化的常见方式"></a>定制化的常见方式</h3><ul><li>修改配置文件</li><li><code>xxxxxCustomizer</code></li><li>编写自定义的配置类 <code>xxxConfiguration</code> + <code>@Bean</code>替换、增加容器中默认组件，视图解析器</li><li>==Web应用 编写一个配置类实现 <code>WebMvcConfigurer</code> 即可定制化web功能 + <code>@Bean</code>给容器中再扩展一些组件==</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li><p>@EnableWebMvc+WebMvcConfigurer—@Bean</p><p>可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能（高级功能，初学者退避三舍）。</p><ul><li><p>原理：</p><ol><li><p><code>WebMvcAutoConfiguration</code>默认的SpringMVC的自动配置功能类，如静态资源、欢迎页等。</p></li><li><p>一旦使用 <code>@EnableWebMvc</code> ，会<code>@Import(DelegatingWebMvcConfiguration.class)</code>。</p></li><li><p>DelegatingWebMvcConfiguration</p><p>的作用，只保证SpringMVC最基本的使用</p><ul><li>把所有系统中的<code>WebMvcConfigurer</code>拿过来，所有功能的定制都是这些<code>WebMvcConfigurer</code>合起来一起生效。</li><li>自动配置了一些非常底层的组件，如<code>RequestMappingHandlerMapping</code>，这些组件依赖的组件都是从容器中获取如。</li><li><code>public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport</code>。</li></ul></li><li><p><code>WebMvcAutoConfiguration</code>里面的配置要能生效必须 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>。</p></li><li><p>@EnableWebMvc 导致了WebMvcAutoConfiguration 没有生效。</p></li></ol></li></ul></li></ul><h3 id="原理分析套路"><a href="#原理分析套路" class="headerlink" title="原理分析套路"></a>原理分析套路</h3><p>==场景starter== - <code>xxxxAutoConfiguration</code> - 导入xxx组件 - 绑定<code>xxxProperties</code> - ==绑定配置文件项。==</p><h2 id="60-数据访问-数据库场景的自动配置分析及整合测试"><a href="#60-数据访问-数据库场景的自动配置分析及整合测试" class="headerlink" title="60 数据访问-数据库场景的自动配置分析及整合测试"></a>60 数据访问-数据库场景的自动配置分析及整合测试</h2><h3 id="1-导入JDBC场景"><a href="#1-导入JDBC场景" class="headerlink" title="1.导入JDBC场景"></a>1.导入JDBC场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/11/26/SpringBoot2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211126131006672.png" alt="image-20211126131006672"></p><p><strong>数据库驱动</strong>（官方不知道我们需要操作哪个数据库，所以需要自行导入）</p><p>默认版本为最新版本</p><p>查看方式：pom.xml-&gt;spring-boot-starter-parent-&gt;spring-boot-dependencies-&gt;&lt;mysql.version&gt;</p><p>这里选择自己电脑最合适的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-分析自动配置"><a href="#2-分析自动配置" class="headerlink" title="2.分析自动配置"></a>2.分析自动配置</h3><h4 id="自动配置的类"><a href="#自动配置的类" class="headerlink" title="自动配置的类"></a>自动配置的类</h4><ul><li><code>DataSourceAutoConfiguration</code> ： 数据源的自动配置。<ul><li>修改数据源相关的配置：<code>spring.datasource</code>。</li><li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong>。</li><li>底层配置好的连接池是：<code>HikariDataSource</code>。</li></ul></li><li><code>DataSourceTransactionManagerAutoConfiguration</code>： 事务管理器的自动配置。</li><li><code>JdbcTemplateAutoConfiguration</code>： <code>JdbcTemplate</code>的自动配置，可以来对数据库进行CRUD。<ul><li>可以修改前缀为<code>spring.jdbc</code>的配置项来修改<code>JdbcTemplate</code>。</li><li><code>@Bean @Primary JdbcTemplate</code>：Spring容器中有这个<code>JdbcTemplate</code>组件，使用<code>@Autowired</code>。</li></ul></li><li><code>JndiDataSourceAutoConfiguration</code>： JNDI的自动配置。</li><li><code>XADataSourceAutoConfiguration</code>： 分布式事务相关的。</li></ul><p><strong>修改配置项：application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="3-单元测试数据源"><a href="#3-单元测试数据源" class="headerlink" title="3.单元测试数据源"></a>3.单元测试数据源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//用@org.junit.Test会报空指针异常，可能跟JUnit新版本有关</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span></span><br><span class="line">        Long aLong = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);</span><br><span class="line">        log.info(<span class="string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="61-数据访问-自定义方式整合druid数据源"><a href="#61-数据访问-自定义方式整合druid数据源" class="headerlink" title="61.数据访问-自定义方式整合druid数据源"></a>61.数据访问-自定义方式整合druid数据源</h2><p><a href="https://github.com/alibaba/druid">Druid官网</a></p><h3 id="Druid是什么？"><a href="#Druid是什么？" class="headerlink" title="Druid是什么？"></a>Druid是什么？</h3><p>它是数据库连接池，它能够提供强大的监控和扩展功能，有些企业会用到。</p><h3 id="Spring-Boot整合第三方技术的两种方式："><a href="#Spring-Boot整合第三方技术的两种方式：" class="headerlink" title="Spring Boot整合第三方技术的两种方式："></a>Spring Boot整合第三方技术的两种方式：</h3><h4 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置Druid数据源"><a href="#配置Druid数据源" class="headerlink" title="配置Druid数据源"></a>配置Druid数据源</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span><span class="comment">//将配置文件中指定路径下 的属性对应的绑定过来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        druidDataSource.setUrl();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setUsername();</span></span><br><span class="line"><span class="comment">//        druidDataSource.setPassword();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">更多配置项</a></p><p><strong>配置Druid的监控页功能</strong>：</p><ul><li>Druid内置提供了一个<code>StatViewServlet</code>用于展示Druid的统计信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE">官方文档 - 配置_StatViewServlet配置</a>。这个<code>StatViewServlet</code>的用途包括：<ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul></li><li>Druid内置提供一个<code>StatFilter</code>，用于统计监控信息。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatFilter">官方文档 - 配置_StatFilter</a></li><li><code>WebStatFilter</code>用于采集web-jdbc关联监控的数据，如SQL监控、URI监控。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_%E9%85%8D%E7%BD%AEWebStatFilter">官方文档 - 配置_配置WebStatFilter</a></li><li>Druid提供了<code>WallFilter</code>，它是基于SQL语义分析来实现防御SQL注入攻击的。<a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter">官方文档 - 配置 wallfilter</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入监控和防火墙功能功能</span></span><br><span class="line">        druidDataSource.setFilters(<span class="string">&quot;stat,wall&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 druid的监控页功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = </span><br><span class="line">            <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监控页账号密码：</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line"></span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;56-Web原生组件的注入（Servlet、Filter、Listener）&quot;&gt;&lt;a href=&quot;#56-Web原生组件的注入（Servlet、Filter、Listener）&quot; class=&quot;headerlink&quot; title=&quot;56 Web原生组件的注入（Se</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java后端" scheme="http://example.com/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
